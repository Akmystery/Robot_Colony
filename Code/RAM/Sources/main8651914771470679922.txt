Sources\main.o:     file format elf32-littlearmSources\main.oarchitecture: arm, flags 0x00000011:HAS_RELOC, HAS_SYMSstart address 0x00000000private flags = 5000000: [Version5 EABI]Sections:Idx Name          Size      VMA       LMA       File off  Algn  0 .text         00000000  00000000  00000000  00000034  2**1                  CONTENTS, ALLOC, LOAD, READONLY, CODE  1 .data         00000000  00000000  00000000  00000034  2**0                  CONTENTS, ALLOC, LOAD, DATA  2 .bss          00000000  00000000  00000000  00000034  2**0                  ALLOC  3 .bss.index0   00000004  00000000  00000000  00000034  2**2                  ALLOC  4 .text.send0Char 00000048  00000000  00000000  00000034  2**2                  CONTENTS, ALLOC, LOAD, READONLY, CODE  5 .text.send0String 00000034  00000000  00000000  0000007c  2**2                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE  6 .bss.index1   00000004  00000000  00000000  000000b0  2**2                  ALLOC  7 .text.send1Char 00000048  00000000  00000000  000000b0  2**2                  CONTENTS, ALLOC, LOAD, READONLY, CODE  8 .text.send1String 00000034  00000000  00000000  000000f8  2**2                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE  9 .text.uart1isr 000000ac  00000000  00000000  0000012c  2**2                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE 10 .bss.index2   00000004  00000000  00000000  000001d8  2**2                  ALLOC 11 .text.send2Char 00000048  00000000  00000000  000001d8  2**2                  CONTENTS, ALLOC, LOAD, READONLY, CODE 12 .text.send2String 00000034  00000000  00000000  00000220  2**2                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE 13 .text.uart2isr 000000a4  00000000  00000000  00000254  2**2                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE 14 .bss.index3   00000004  00000000  00000000  000002f8  2**2                  ALLOC 15 .text.send3Char 00000048  00000000  00000000  000002f8  2**2                  CONTENTS, ALLOC, LOAD, READONLY, CODE 16 .text.send3String 00000034  00000000  00000000  00000340  2**2                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE 17 .text.uart3isr 000000a4  00000000  00000000  00000374  2**2                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE 18 .data.LKp     00000002  00000000  00000000  00000418  2**1                  CONTENTS, ALLOC, LOAD, DATA 19 .data.LKd     00000002  00000000  00000000  0000041a  2**1                  CONTENTS, ALLOC, LOAD, DATA 20 .bss.LKi      00000002  00000000  00000000  0000041c  2**1                  ALLOC 21 .data.RKp     00000002  00000000  00000000  0000041c  2**1                  CONTENTS, ALLOC, LOAD, DATA 22 .data.RKd     00000002  00000000  00000000  0000041e  2**1                  CONTENTS, ALLOC, LOAD, DATA 23 .bss.RKi      00000002  00000000  00000000  00000420  2**1                  ALLOC 24 .bss.flag     00000002  00000000  00000000  00000420  2**1                  ALLOC 25 .data.pellet  00000002  00000000  00000000  00000420  2**1                  CONTENTS, ALLOC, LOAD, DATA 26 .data.cse1    00000002  00000000  00000000  00000422  2**1                  CONTENTS, ALLOC, LOAD, DATA 27 .data.RC      00000004  00000000  00000000  00000424  2**2                  CONTENTS, ALLOC, LOAD, DATA 28 .data.detected 00000004  00000000  00000000  00000428  2**2                  CONTENTS, ALLOC, LOAD, DATA 29 .text.uart0isr 000001a8  00000000  00000000  0000042c  2**2                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE 30 .text.writeAXRegister 000000c8  00000000  00000000  000005d4  2**2                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE 31 .data.LEDon   00000004  00000000  00000000  0000069c  2**2                  CONTENTS, ALLOC, LOAD, DATA 32 .data.LEDoff  00000004  00000000  00000000  000006a0  2**2                  CONTENTS, ALLOC, LOAD, DATA 33 .data.CWservo 00000008  00000000  00000000  000006a4  2**2                  CONTENTS, ALLOC, LOAD, DATA 34 .data.CCWservo 00000008  00000000  00000000  000006ac  2**2                  CONTENTS, ALLOC, LOAD, DATA 35 .data.SetCW   00000008  00000000  00000000  000006b4  2**2                  CONTENTS, ALLOC, LOAD, DATA 36 .data.MaxTorque 00000008  00000000  00000000  000006bc  2**2                  CONTENTS, ALLOC, LOAD, DATA 37 .data.Compliance 00000008  00000000  00000000  000006c4  2**2                  CONTENTS, ALLOC, LOAD, DATA 38 .data.Set0    00000008  00000000  00000000  000006cc  2**2                  CONTENTS, ALLOC, LOAD, DATA 39 .data.Set90   00000008  00000000  00000000  000006d4  2**2                  CONTENTS, ALLOC, LOAD, DATA 40 .data.Set180  00000008  00000000  00000000  000006dc  2**2                  CONTENTS, ALLOC, LOAD, DATA 41 .data.Set270  00000008  00000000  00000000  000006e4  2**2                  CONTENTS, ALLOC, LOAD, DATA 42 .data.Set45   00000008  00000000  00000000  000006ec  2**2                  CONTENTS, ALLOC, LOAD, DATA 43 .data.WheelMode 00000008  00000000  00000000  000006f4  2**2                  CONTENTS, ALLOC, LOAD, DATA 44 .data.ServoMode 00000008  00000000  00000000  000006fc  2**2                  CONTENTS, ALLOC, LOAD, DATA 45 .data.MoveCCW 00000008  00000000  00000000  00000704  2**2                  CONTENTS, ALLOC, LOAD, DATA 46 .data.MoveCW  00000008  00000000  00000000  0000070c  2**2                  CONTENTS, ALLOC, LOAD, DATA 47 .data.StopMoving 00000008  00000000  00000000  00000714  2**2                  CONTENTS, ALLOC, LOAD, DATA 48 .text.ServoDeg 000000c8  00000000  00000000  0000071c  2**2                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE 49 .text.RCControl 00000038  00000000  00000000  000007e4  2**2                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE 50 .text.pta5isr 000000c0  00000000  00000000  0000081c  2**2                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE 51 .text.battMon 00000050  00000000  00000000  000008dc  2**2                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE 52 .text.wheelmotor 0000046c  00000000  00000000  0000092c  2**2                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE 53 .text.Forward 0000037c  00000000  00000000  00000d98  2**2                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE 54 .text.BackWard 00000134  00000000  00000000  00001114  2**2                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE 55 .text.goForWard 00000028  00000000  00000000  00001248  2**2                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE 56 .text.goBackWard 00000028  00000000  00000000  00001270  2**2                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE 57 .text.stop    00000028  00000000  00000000  00001298  2**2                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE 58 .text.LnsSensor 0000054c  00000000  00000000  000012c0  2**2                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE 59 .text.rollerMotor 0000000c  00000000  00000000  0000180c  2**2                  CONTENTS, ALLOC, LOAD, READONLY, CODE 60 .text.Systickpwm 0000003c  00000000  00000000  00001818  2**2                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE 61 .text.Sensor  00000060  00000000  00000000  00001854  2**2                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE 62 .text.goPass  0000005c  00000000  00000000  000018b4  2**2                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE 63 .text.TurnRight 000000dc  00000000  00000000  00001910  2**2                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE 64 .text.TurnLeft 000000e0  00000000  00000000  000019ec  2**2                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE 65 .text.Turn    00000134  00000000  00000000  00001acc  2**2                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE 66 .text.Reset   00000098  00000000  00000000  00001c00  2**2                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE 67 .text.detectPellet 00000454  00000000  00000000  00001c98  2**2                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE 68 .text.moveToMidLine 00000370  00000000  00000000  000020ec  2**2                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE 69 .text.main    000009fc  00000000  00000000  0000245c  2**2                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE 70 .debug_info   00001d95  00000000  00000000  00002e58  2**0                  CONTENTS, RELOC, READONLY, DEBUGGING 71 .debug_abbrev 00000204  00000000  00000000  00004bed  2**0                  CONTENTS, READONLY, DEBUGGING 72 .debug_loc    000006c4  00000000  00000000  00004df1  2**0                  CONTENTS, RELOC, READONLY, DEBUGGING 73 .debug_aranges 00000130  00000000  00000000  000054b5  2**0                  CONTENTS, RELOC, READONLY, DEBUGGING 74 .debug_macinfo 000654f2  00000000  00000000  000055e5  2**0                  CONTENTS, READONLY, DEBUGGING 75 .debug_line   00000901  00000000  00000000  0006aad7  2**0                  CONTENTS, RELOC, READONLY, DEBUGGING 76 .debug_str    00000a90  00000000  00000000  0006b3d8  2**0                  CONTENTS, READONLY, DEBUGGING 77 .comment      0000007a  00000000  00000000  0006be68  2**0                  CONTENTS, READONLY 78 .ARM.attributes 00000033  00000000  00000000  0006bee2  2**0                  CONTENTS, READONLY 79 .debug_frame  000003e4  00000000  00000000  0006bf18  2**2                  CONTENTS, RELOC, READONLY, DEBUGGINGSYMBOL TABLE:00000000 l    df *ABS*	00000000 main.c00000000 l    d  .text	00000000 .text00000000 l    d  .data	00000000 .data00000000 l    d  .bss	00000000 .bss00000000 l    d  .bss.index0	00000000 .bss.index000000000 l    d  .text.send0Char	00000000 .text.send0Char00000000 l    d  .text.send0String	00000000 .text.send0String00000000 l    d  .bss.index1	00000000 .bss.index100000000 l    d  .text.send1Char	00000000 .text.send1Char00000000 l    d  .text.send1String	00000000 .text.send1String00000000 l    d  .text.uart1isr	00000000 .text.uart1isr00000000 l    d  .bss.index2	00000000 .bss.index200000000 l    d  .text.send2Char	00000000 .text.send2Char00000000 l    d  .text.send2String	00000000 .text.send2String00000000 l    d  .text.uart2isr	00000000 .text.uart2isr00000000 l    d  .bss.index3	00000000 .bss.index300000000 l    d  .text.send3Char	00000000 .text.send3Char00000000 l    d  .text.send3String	00000000 .text.send3String00000000 l    d  .text.uart3isr	00000000 .text.uart3isr00000000 l    d  .data.LKp	00000000 .data.LKp00000000 l    d  .data.LKd	00000000 .data.LKd00000000 l    d  .bss.LKi	00000000 .bss.LKi00000000 l    d  .data.RKp	00000000 .data.RKp00000000 l    d  .data.RKd	00000000 .data.RKd00000000 l    d  .bss.RKi	00000000 .bss.RKi00000000 l    d  .bss.flag	00000000 .bss.flag00000000 l    d  .data.pellet	00000000 .data.pellet00000000 l    d  .data.cse1	00000000 .data.cse100000000 l    d  .data.RC	00000000 .data.RC00000000 l    d  .data.detected	00000000 .data.detected00000000 l    d  .text.uart0isr	00000000 .text.uart0isr00000000 l    d  .text.writeAXRegister	00000000 .text.writeAXRegister00000000 l    d  .data.LEDon	00000000 .data.LEDon00000000 l    d  .data.LEDoff	00000000 .data.LEDoff00000000 l    d  .data.CWservo	00000000 .data.CWservo00000000 l    d  .data.CCWservo	00000000 .data.CCWservo00000000 l    d  .data.SetCW	00000000 .data.SetCW00000000 l    d  .data.MaxTorque	00000000 .data.MaxTorque00000000 l    d  .data.Compliance	00000000 .data.Compliance00000000 l    d  .data.Set0	00000000 .data.Set000000000 l    d  .data.Set90	00000000 .data.Set9000000000 l    d  .data.Set180	00000000 .data.Set18000000000 l    d  .data.Set270	00000000 .data.Set27000000000 l    d  .data.Set45	00000000 .data.Set4500000000 l    d  .data.WheelMode	00000000 .data.WheelMode00000000 l    d  .data.ServoMode	00000000 .data.ServoMode00000000 l    d  .data.MoveCCW	00000000 .data.MoveCCW00000000 l    d  .data.MoveCW	00000000 .data.MoveCW00000000 l    d  .data.StopMoving	00000000 .data.StopMoving00000000 l    d  .text.ServoDeg	00000000 .text.ServoDeg00000000 l    d  .text.RCControl	00000000 .text.RCControl00000000 l    d  .text.pta5isr	00000000 .text.pta5isr00000000 l    d  .text.battMon	00000000 .text.battMon00000000 l    d  .text.wheelmotor	00000000 .text.wheelmotor00000000 l    d  .text.Forward	00000000 .text.Forward00000000 l    d  .text.BackWard	00000000 .text.BackWard00000000 l    d  .text.goForWard	00000000 .text.goForWard00000000 l    d  .text.goBackWard	00000000 .text.goBackWard00000000 l    d  .text.stop	00000000 .text.stop00000000 l    d  .text.LnsSensor	00000000 .text.LnsSensor00000000 l    d  .text.rollerMotor	00000000 .text.rollerMotor00000000 l    d  .text.Systickpwm	00000000 .text.Systickpwm00000000 l    d  .text.Sensor	00000000 .text.Sensor00000000 l    d  .text.goPass	00000000 .text.goPass00000000 l    d  .text.TurnRight	00000000 .text.TurnRight00000000 l    d  .text.TurnLeft	00000000 .text.TurnLeft00000000 l    d  .text.Turn	00000000 .text.Turn00000000 l    d  .text.Reset	00000000 .text.Reset00000000 l    d  .text.detectPellet	00000000 .text.detectPellet00000000 l    d  .text.moveToMidLine	00000000 .text.moveToMidLine00000000 l    d  .text.main	00000000 .text.main00000000 l    d  .debug_info	00000000 .debug_info00000000 l    d  .debug_abbrev	00000000 .debug_abbrev00000000 l    d  .debug_loc	00000000 .debug_loc00000000 l    d  .debug_aranges	00000000 .debug_aranges00000000 l    d  .debug_macinfo	00000000 .debug_macinfo00000000 l    d  .debug_line	00000000 .debug_line00000000 l    d  .debug_str	00000000 .debug_str00000000 l    d  .debug_frame	00000000 .debug_frame00000000 l    d  .comment	00000000 .comment00000000 l    d  .ARM.attributes	00000000 .ARM.attributes0000000a       O *COM*	00000004 uart0Buffer00000000 g     O .bss.index0	00000004 index000000001       O *COM*	00000001 rx0char00000000 g     F .text.send0Char	00000046 send0Char00000000 g     F .text.send0String	00000034 send0String0000000a       O *COM*	00000004 uart1Buffer00000000 g     O .bss.index1	00000004 index100000001       O *COM*	00000001 rx1char00000000 g     F .text.send1Char	00000046 send1Char00000000 g     F .text.send1String	00000034 send1String00000000 g     F .text.uart1isr	000000ac uart1isr0000000a       O *COM*	00000004 uart2Buffer00000000 g     O .bss.index2	00000004 index200000001       O *COM*	00000001 rx2char00000000 g     F .text.send2Char	00000046 send2Char00000000 g     F .text.send2String	00000034 send2String00000000 g     F .text.uart2isr	000000a2 uart2isr0000000a       O *COM*	00000004 uart3Buffer00000000 g     O .bss.index3	00000004 index300000001       O *COM*	00000001 rx3char00000000 g     F .text.send3Char	00000046 send3Char00000000 g     F .text.send3String	00000034 send3String00000000 g     F .text.uart3isr	000000a2 uart3isr00000002       O *COM*	00000002 count00000002       O *COM*	00000002 process00000002       O *COM*	00000002 tick00000002       O *COM*	00000002 catch00000002       O *COM*	00000002 countTwo00000004       O *COM*	00000004 LDist00000004       O *COM*	00000004 RDist00000004       O *COM*	00000004 speed00000004       O *COM*	00000004 control00000004       O *COM*	00000004 difLeft00000004       O *COM*	00000004 difRight00000004       O *COM*	00000004 difForwardLeft00000004       O *COM*	00000004 difForwardRight00000004       O *COM*	00000004 difBackwardLeft00000004       O *COM*	00000004 difBackwardRight00000002       O *COM*	00000002 LsetSpeed00000002       O *COM*	00000002 LnewCount00000002       O *COM*	00000002 LoldCount00000002       O *COM*	00000002 Lspeed00000002       O *COM*	00000002 LerrSpeed00000002       O *COM*	00000002 LolderrSpeed00000002       O *COM*	00000002 LerrSpeedRate00000002       O *COM*	00000002 LsumSpeed00000002       O *COM*	00000002 LsumErrSpeed00000002       O *COM*	00000002 LspeedOut00000000 g     O .data.LKp	00000002 LKp00000000 g     O .data.LKd	00000002 LKd00000000 g     O .bss.LKi	00000002 LKi00000004       O *COM*	00000004 LsetDist00000004       O *COM*	00000004 LerrDist00000004       O *COM*	00000004 LerrDistRate00000004       O *COM*	00000004 LolderrDist00000004       O *COM*	00000004 LsumErrDist00000004       O *COM*	00000004 LDistout00000004       O *COM*	00000004 LDistOut00000004       O *COM*	00000004 LoldDist00000004       O *COM*	00000004 RsetDist00000004       O *COM*	00000004 RerrDist00000004       O *COM*	00000004 RerrDistRate00000004       O *COM*	00000004 RolderrDist00000004       O *COM*	00000004 RsumErrDist00000004       O *COM*	00000004 RDistout00000004       O *COM*	00000004 RDistOut00000004       O *COM*	00000004 RoldDist00000002       O *COM*	00000002 RsetSpeed00000002       O *COM*	00000002 RnewCount00000002       O *COM*	00000002 RoldCount00000002       O *COM*	00000002 Rspeed00000002       O *COM*	00000002 RerrSpeed00000002       O *COM*	00000002 RolderrSpeed00000002       O *COM*	00000002 RerrSpeedRate00000002       O *COM*	00000002 RsumSpeed00000002       O *COM*	00000002 RsumErrSpeed00000002       O *COM*	00000002 RspeedOut00000000 g     O .data.RKp	00000002 RKp00000000 g     O .data.RKd	00000002 RKd00000000 g     O .bss.RKi	00000002 RKi00000002       O *COM*	00000002 LoopCount00000002       O *COM*	00000002 D00000002       O *COM*	00000002 S00000000 g     O .bss.flag	00000002 flag00000002       O *COM*	00000002 x00000002       O *COM*	00000002 g00000002       O *COM*	00000002 a00000002       O *COM*	00000002 b00000002       O *COM*	00000002 q100000002       O *COM*	00000002 q200000002       O *COM*	00000002 d00000002       O *COM*	00000002 s00000002       O *COM*	00000002 value100000002       O *COM*	00000002 x100000002       O *COM*	00000002 y100000002       O *COM*	00000002 value200000002       O *COM*	00000002 x200000002       O *COM*	00000002 y200000002       O *COM*	00000002 g100000002       O *COM*	00000002 a100000002       O *COM*	00000002 b100000002       O *COM*	00000002 g200000002       O *COM*	00000002 a200000002       O *COM*	00000002 b200000002       O *COM*	00000002 value00000002       O *COM*	00000002 xx00000002       O *COM*	00000002 save00000002       O *COM*	00000002 countLineOne00000002       O *COM*	00000002 countLineTwo00000002       O *COM*	00000002 countLineThree00000002       O *COM*	00000002 step00000002       O *COM*	00000002 stage00000002       O *COM*	00000002 stageOne00000002       O *COM*	00000002 oneLine00000002       O *COM*	00000002 oneLineOne00000002       O *COM*	00000002 oneLineTwo00000002       O *COM*	00000002 collect00000000 g     O .data.pellet	00000002 pellet00000000 g     O .data.cse1	00000002 cse100000002       O *COM*	00000002 cse00000002       O *COM*	00000002 saveLeft00000002       O *COM*	00000002 saveRight00000002       O *COM*	00000002 saveForward00000002       O *COM*	00000002 saveBackward00000002       O *COM*	00000002 f100000002       O *COM*	00000002 f200000002       O *COM*	00000002 f300000002       O *COM*	00000002 f400000002       O *COM*	00000002 f500000002       O *COM*	00000002 f600000002       O *COM*	00000002 f700000002       O *COM*	00000002 f800000002       O *COM*	00000002 f900000002       O *COM*	00000002 f1000000002       O *COM*	00000002 fin100000002       O *COM*	00000002 fin200000002       O *COM*	00000002 fin300000002       O *COM*	00000002 fin400000002       O *COM*	00000002 ambientreading400000002       O *COM*	00000002 ambientreading500000002       O *COM*	00000002 ambientreading600000002       O *COM*	00000002 ambientreading700000002       O *COM*	00000002 ambientreading1400000002       O *COM*	00000002 ambientreading1500000002       O *COM*	00000002 mixreading400000002       O *COM*	00000002 mixreading500000002       O *COM*	00000002 mixreading600000002       O *COM*	00000002 mixreading700000002       O *COM*	00000002 mixreading1400000002       O *COM*	00000002 mixreading1500000002       O *COM*	00000002 clearreadingLB00000002       O *COM*	00000002 clearreadingRB00000002       O *COM*	00000002 clearreadingR200000002       O *COM*	00000002 clearreadingR100000002       O *COM*	00000002 clearreadingL100000002       O *COM*	00000002 clearreadingL200000002       O *COM*	00000002 LDistanceVal00000002       O *COM*	00000002 RDistanceVal00000002       O *COM*	00000002 delay00000004       O *COM*	00000004 test00000004       O *COM*	00000004 RCmillisec00000004       O *COM*	00000004 r100000004       O *COM*	00000004 r200000004       O *COM*	00000004 l100000004       O *COM*	00000004 l200000004       O *COM*	00000004 dis00000004       O *COM*	00000004 spe00000004       O *COM*	00000004 Bdis00000004       O *COM*	00000004 Bspe00000000 g     O .data.RC	00000004 RC00000004       O *COM*	00000004 p00000004       O *COM*	00000004 vie00000004       O *COM*	00000004 CMUDetectedState00000004       O *COM*	00000004 signature00000004       O *COM*	00000004 Obj1xcenter00000004       O *COM*	00000004 Obj1ycenter00000004       O *COM*	00000004 i00000004       O *COM*	00000004 ms00000004       O *COM*	00000004 halfSecond00000004       O *COM*	00000004 freq00000004       O *COM*	00000004 Pellet_in00000004       O *COM*	00000004 OneTime00000004       O *COM*	00000004 view00000000 g     O .data.detected	00000004 detected00000004       O *COM*	00000004 Servo00000001       O *COM*	00000001 colour00000001       O *COM*	00000001 uart00000004       O *COM*	00000004 right00000004       O *COM*	00000004 left00000000 g     F .text.uart0isr	000001a6 uart0isr00000000 g     F .text.writeAXRegister	000000c8 writeAXRegister00000000 g     O .data.LEDon	00000004 LEDon00000000 g     O .data.LEDoff	00000004 LEDoff00000000 g     O .data.CWservo	00000007 CWservo00000000 g     O .data.CCWservo	00000007 CCWservo00000000 g     O .data.SetCW	00000007 SetCW00000000 g     O .data.MaxTorque	00000005 MaxTorque00000000 g     O .data.Compliance	00000007 Compliance00000000 g     O .data.Set0	00000007 Set000000000 g     O .data.Set90	00000007 Set9000000000 g     O .data.Set180	00000007 Set18000000000 g     O .data.Set270	00000007 Set27000000000 g     O .data.Set45	00000007 Set4500000000 g     O .data.WheelMode	00000005 WheelMode00000000 g     O .data.ServoMode	00000005 ServoMode00000000 g     O .data.MoveCCW	00000005 MoveCCW00000000 g     O .data.MoveCW	00000005 MoveCW00000000 g     O .data.StopMoving	00000005 StopMoving00000000 g     F .text.ServoDeg	000000c8 ServoDeg00000000 g     F .text.RCControl	00000038 RCControl00000004       O *COM*	00000004 ints00000004       O *COM*	00000004 testin00000004       O *COM*	00000004 col00000004       O *COM*	00000004 edge100000004       O *COM*	00000004 edge200000004       O *COM*	00000004 period00000000 g     F .text.pta5isr	000000c0 pta5isr00000004       O *COM*	00000004 batt00000004       O *COM*	00000004 move00000000 g     F .text.battMon	00000050 battMon00000000 g     F .text.wheelmotor	0000046a wheelmotor00000000 g     F .text.Forward	0000037c Forward00000000 g     F .text.BackWard	00000132 BackWard00000000 g     F .text.goForWard	00000026 goForWard00000000 g     F .text.goBackWard	00000026 goBackWard00000000 g     F .text.stop	00000026 stop00000000 g     F .text.LnsSensor	0000054c LnsSensor00000000 g     F .text.rollerMotor	0000000a rollerMotor00000000 g     F .text.Systickpwm	0000003a Systickpwm00000000 g     F .text.Sensor	0000005e Sensor00000000 g     F .text.goPass	0000005c goPass00000000         *UND*	00000000 goStraight00000000 g     F .text.TurnRight	000000dc TurnRight00000000 g     F .text.TurnLeft	000000e0 TurnLeft00000000 g     F .text.Turn	00000132 Turn00000000 g     F .text.Reset	00000096 Reset00000000 g     F .text.detectPellet	00000452 detectPellet00000000 g     F .text.moveToMidLine	0000036e moveToMidLine00000000 g     F .text.main	000009fa main00000000         *UND*	00000000 PE_low_level_initDisassembly of section .text.send0Char:00000000 <send0Char>:volatile char uart0Buffer[10];			 // circular buffer to store bytes received via interruptvolatile int  index0 = 0;				 // index for uart buffervolatile char rx0char;					 // variable to store received character from serial portvoid send0Char (char x){   0:	b480      	push	{r7}   2:	b083      	sub	sp, #12   4:	af00      	add	r7, sp, #0   6:	4603      	mov	r3, r0   8:	71fb      	strb	r3, [r7, #7]	  while(TC0 != 1);   a:	bf00      	nop   c:	f24a 0304 	movw	r3, #40964	; 0xa004  10:	f2c4 0306 	movt	r3, #16390	; 0x4006  14:	781b      	ldrb	r3, [r3, #0]  16:	f003 0340 	and.w	r3, r3, #64	; 0x40  1a:	b2db      	uxtb	r3, r3  1c:	2b00      	cmp	r3, #0  1e:	d0f5      	beq.n	c <send0Char+0xc>	  UART0_D = x;   20:	f44f 4320 	mov.w	r3, #40960	; 0xa000  24:	f2c4 0306 	movt	r3, #16390	; 0x4006  28:	79fa      	ldrb	r2, [r7, #7]  2a:	71da      	strb	r2, [r3, #7]	  TC0 = 0;  2c:	f24a 0304 	movw	r3, #40964	; 0xa004  30:	f2c4 0306 	movt	r3, #16390	; 0x4006  34:	781a      	ldrb	r2, [r3, #0]  36:	f36f 1286 	bfc	r2, #6, #1  3a:	701a      	strb	r2, [r3, #0]}  3c:	f107 070c 	add.w	r7, r7, #12  40:	46bd      	mov	sp, r7  42:	bc80      	pop	{r7}  44:	4770      	bx	lr  46:	bf00      	nopDisassembly of section .text.send0String:00000000 <send0String>:void send0String (char* ptr){   0:	b580      	push	{r7, lr}   2:	b082      	sub	sp, #8   4:	af00      	add	r7, sp, #0   6:	6078      	str	r0, [r7, #4]	while (*ptr != 0) {   8:	e008      	b.n	1c <send0String+0x1c>		send0Char(*ptr);   a:	687b      	ldr	r3, [r7, #4]   c:	781b      	ldrb	r3, [r3, #0]   e:	4618      	mov	r0, r3  10:	f7ff fffe 	bl	0 <send0String>			10: R_ARM_THM_CALL	send0Char		ptr++;  14:	687b      	ldr	r3, [r7, #4]  16:	f103 0301 	add.w	r3, r3, #1  1a:	607b      	str	r3, [r7, #4]	  UART0_D = x; 	  TC0 = 0;}void send0String (char* ptr){	while (*ptr != 0) {  1c:	687b      	ldr	r3, [r7, #4]  1e:	781b      	ldrb	r3, [r3, #0]  20:	2b00      	cmp	r3, #0  22:	d1f2      	bne.n	a <send0String+0xa>		send0Char(*ptr);		ptr++;	}	send0Char(13);	// optional  24:	f04f 000d 	mov.w	r0, #13  28:	f7ff fffe 	bl	0 <send0String>			28: R_ARM_THM_CALL	send0Char}  2c:	f107 0708 	add.w	r7, r7, #8  30:	46bd      	mov	sp, r7  32:	bd80      	pop	{r7, pc}Disassembly of section .text.send1Char:00000000 <send1Char>:volatile char rx1char;					 // variable to store received character from serial port#define UART1_S1 (*(ioreg8 *)0x4006B004) // UART1 status register 1 whose bit 6 is transmit complete#define TC1 UART1_S1.B6					 // UART1 Transmit Complete flag'#define RDRF1 UART1_S1.B5				 // UART1 Receive Data Register Full flagvoid send1Char (char x){   0:	b480      	push	{r7}   2:	b083      	sub	sp, #12   4:	af00      	add	r7, sp, #0   6:	4603      	mov	r3, r0   8:	71fb      	strb	r3, [r7, #7]	  while(TC1 != 1);   a:	bf00      	nop   c:	f24b 0304 	movw	r3, #45060	; 0xb004  10:	f2c4 0306 	movt	r3, #16390	; 0x4006  14:	781b      	ldrb	r3, [r3, #0]  16:	f003 0340 	and.w	r3, r3, #64	; 0x40  1a:	b2db      	uxtb	r3, r3  1c:	2b00      	cmp	r3, #0  1e:	d0f5      	beq.n	c <send1Char+0xc>	  UART1_D = x;   20:	f44f 4330 	mov.w	r3, #45056	; 0xb000  24:	f2c4 0306 	movt	r3, #16390	; 0x4006  28:	79fa      	ldrb	r2, [r7, #7]  2a:	71da      	strb	r2, [r3, #7]	  TC1 = 0;  2c:	f24b 0304 	movw	r3, #45060	; 0xb004  30:	f2c4 0306 	movt	r3, #16390	; 0x4006  34:	781a      	ldrb	r2, [r3, #0]  36:	f36f 1286 	bfc	r2, #6, #1  3a:	701a      	strb	r2, [r3, #0]}  3c:	f107 070c 	add.w	r7, r7, #12  40:	46bd      	mov	sp, r7  42:	bc80      	pop	{r7}  44:	4770      	bx	lr  46:	bf00      	nopDisassembly of section .text.send1String:00000000 <send1String>:void send1String (char* ptr){   0:	b580      	push	{r7, lr}   2:	b082      	sub	sp, #8   4:	af00      	add	r7, sp, #0   6:	6078      	str	r0, [r7, #4]	while (*ptr != 0) {   8:	e008      	b.n	1c <send1String+0x1c>		send1Char(*ptr);   a:	687b      	ldr	r3, [r7, #4]   c:	781b      	ldrb	r3, [r3, #0]   e:	4618      	mov	r0, r3  10:	f7ff fffe 	bl	0 <send1String>			10: R_ARM_THM_CALL	send1Char		ptr++;  14:	687b      	ldr	r3, [r7, #4]  16:	f103 0301 	add.w	r3, r3, #1  1a:	607b      	str	r3, [r7, #4]	  UART1_D = x; 	  TC1 = 0;}void send1String (char* ptr){	while (*ptr != 0) {  1c:	687b      	ldr	r3, [r7, #4]  1e:	781b      	ldrb	r3, [r3, #0]  20:	2b00      	cmp	r3, #0  22:	d1f2      	bne.n	a <send1String+0xa>		send1Char(*ptr);		ptr++;	}	send1Char(13);	// optional  24:	f04f 000d 	mov.w	r0, #13  28:	f7ff fffe 	bl	0 <send1String>			28: R_ARM_THM_CALL	send1Char}  2c:	f107 0708 	add.w	r7, r7, #8  30:	46bd      	mov	sp, r7  32:	bd80      	pop	{r7, pc}Disassembly of section .text.uart1isr:00000000 <uart1isr>:void uart1isr (void){   0:	4668      	mov	r0, sp   2:	f020 0107 	bic.w	r1, r0, #7   6:	468d      	mov	sp, r1   8:	b481      	push	{r0, r7}   a:	af00      	add	r7, sp, #0	RDRF1 = 0;	// clear flag   c:	f24b 0304 	movw	r3, #45060	; 0xb004  10:	f2c4 0306 	movt	r3, #16390	; 0x4006  14:	781a      	ldrb	r2, [r3, #0]  16:	f36f 1245 	bfc	r2, #5, #1  1a:	701a      	strb	r2, [r3, #0]	rx1char = UART1_D;  1c:	f44f 4330 	mov.w	r3, #45056	; 0xb000  20:	f2c4 0306 	movt	r3, #16390	; 0x4006  24:	79db      	ldrb	r3, [r3, #7]  26:	b2da      	uxtb	r2, r3  28:	f240 0300 	movw	r3, #0			28: R_ARM_THM_MOVW_ABS_NC	rx1char  2c:	f2c0 0300 	movt	r3, #0			2c: R_ARM_THM_MOVT_ABS	rx1char  30:	701a      	strb	r2, [r3, #0]	uart1Buffer[index1] = rx1char; //UART0_D;  32:	f240 0300 	movw	r3, #0			32: R_ARM_THM_MOVW_ABS_NC	index1  36:	f2c0 0300 	movt	r3, #0			36: R_ARM_THM_MOVT_ABS	index1  3a:	681a      	ldr	r2, [r3, #0]  3c:	f240 0300 	movw	r3, #0			3c: R_ARM_THM_MOVW_ABS_NC	rx1char  40:	f2c0 0300 	movt	r3, #0			40: R_ARM_THM_MOVT_ABS	rx1char  44:	781b      	ldrb	r3, [r3, #0]  46:	b2d9      	uxtb	r1, r3  48:	f240 0300 	movw	r3, #0			48: R_ARM_THM_MOVW_ABS_NC	uart1Buffer  4c:	f2c0 0300 	movt	r3, #0			4c: R_ARM_THM_MOVT_ABS	uart1Buffer  50:	5499      	strb	r1, [r3, r2]	index1++;  52:	f240 0300 	movw	r3, #0			52: R_ARM_THM_MOVW_ABS_NC	index1  56:	f2c0 0300 	movt	r3, #0			56: R_ARM_THM_MOVT_ABS	index1  5a:	681b      	ldr	r3, [r3, #0]  5c:	f103 0201 	add.w	r2, r3, #1  60:	f240 0300 	movw	r3, #0			60: R_ARM_THM_MOVW_ABS_NC	index1  64:	f2c0 0300 	movt	r3, #0			64: R_ARM_THM_MOVT_ABS	index1  68:	601a      	str	r2, [r3, #0]	if (rx1char == 13){ // check for '\r' to reset index  6a:	f240 0300 	movw	r3, #0			6a: R_ARM_THM_MOVW_ABS_NC	rx1char  6e:	f2c0 0300 	movt	r3, #0			6e: R_ARM_THM_MOVT_ABS	rx1char  72:	781b      	ldrb	r3, [r3, #0]  74:	b2db      	uxtb	r3, r3  76:	2b0d      	cmp	r3, #13  78:	d106      	bne.n	88 <uart1isr+0x88>		index1 = 0;  7a:	f240 0300 	movw	r3, #0			7a: R_ARM_THM_MOVW_ABS_NC	index1  7e:	f2c0 0300 	movt	r3, #0			7e: R_ARM_THM_MOVT_ABS	index1  82:	f04f 0200 	mov.w	r2, #0  86:	601a      	str	r2, [r3, #0]	}	if (index1 > 9) {	// check for buffer overflow to reset index  88:	f240 0300 	movw	r3, #0			88: R_ARM_THM_MOVW_ABS_NC	index1  8c:	f2c0 0300 	movt	r3, #0			8c: R_ARM_THM_MOVT_ABS	index1  90:	681b      	ldr	r3, [r3, #0]  92:	2b09      	cmp	r3, #9  94:	dd06      	ble.n	a4 <uart1isr+0xa4>		index1 = 0;  96:	f240 0300 	movw	r3, #0			96: R_ARM_THM_MOVW_ABS_NC	index1  9a:	f2c0 0300 	movt	r3, #0			9a: R_ARM_THM_MOVT_ABS	index1  9e:	f04f 0200 	mov.w	r2, #0  a2:	601a      	str	r2, [r3, #0]	}}  a4:	46bd      	mov	sp, r7  a6:	bc81      	pop	{r0, r7}  a8:	4685      	mov	sp, r0  aa:	4770      	bx	lrDisassembly of section .text.send2Char:00000000 <send2Char>:volatile char rx2char;					 // variable to store received character from serial port#define UART2_S1 (*(ioreg8 *)0x4006C004) // UART2 status register 1 whose bit 6 is transmit complete#define TC2 UART2_S1.B6					 // UART2 Transmit Complete flag'#define RDRF2 UART2_S1.B5				 // UART2 Receive Data Register Full flagvoid send2Char (char x){   0:	b480      	push	{r7}   2:	b083      	sub	sp, #12   4:	af00      	add	r7, sp, #0   6:	4603      	mov	r3, r0   8:	71fb      	strb	r3, [r7, #7]	  while(TC2 != 1);   a:	bf00      	nop   c:	f24c 0304 	movw	r3, #49156	; 0xc004  10:	f2c4 0306 	movt	r3, #16390	; 0x4006  14:	781b      	ldrb	r3, [r3, #0]  16:	f003 0340 	and.w	r3, r3, #64	; 0x40  1a:	b2db      	uxtb	r3, r3  1c:	2b00      	cmp	r3, #0  1e:	d0f5      	beq.n	c <send2Char+0xc>	  UART2_D = x;   20:	f44f 4340 	mov.w	r3, #49152	; 0xc000  24:	f2c4 0306 	movt	r3, #16390	; 0x4006  28:	79fa      	ldrb	r2, [r7, #7]  2a:	71da      	strb	r2, [r3, #7]	  TC2 = 0;  2c:	f24c 0304 	movw	r3, #49156	; 0xc004  30:	f2c4 0306 	movt	r3, #16390	; 0x4006  34:	781a      	ldrb	r2, [r3, #0]  36:	f36f 1286 	bfc	r2, #6, #1  3a:	701a      	strb	r2, [r3, #0]}  3c:	f107 070c 	add.w	r7, r7, #12  40:	46bd      	mov	sp, r7  42:	bc80      	pop	{r7}  44:	4770      	bx	lr  46:	bf00      	nopDisassembly of section .text.send2String:00000000 <send2String>:void send2String (char* ptr){   0:	b580      	push	{r7, lr}   2:	b082      	sub	sp, #8   4:	af00      	add	r7, sp, #0   6:	6078      	str	r0, [r7, #4]	while (*ptr != 0) {   8:	e008      	b.n	1c <send2String+0x1c>		send2Char(*ptr);   a:	687b      	ldr	r3, [r7, #4]   c:	781b      	ldrb	r3, [r3, #0]   e:	4618      	mov	r0, r3  10:	f7ff fffe 	bl	0 <send2String>			10: R_ARM_THM_CALL	send2Char		ptr++;  14:	687b      	ldr	r3, [r7, #4]  16:	f103 0301 	add.w	r3, r3, #1  1a:	607b      	str	r3, [r7, #4]	  UART2_D = x; 	  TC2 = 0;}void send2String (char* ptr){	while (*ptr != 0) {  1c:	687b      	ldr	r3, [r7, #4]  1e:	781b      	ldrb	r3, [r3, #0]  20:	2b00      	cmp	r3, #0  22:	d1f2      	bne.n	a <send2String+0xa>		send2Char(*ptr);		ptr++;	}	send2Char(13);	// optional  24:	f04f 000d 	mov.w	r0, #13  28:	f7ff fffe 	bl	0 <send2String>			28: R_ARM_THM_CALL	send2Char}  2c:	f107 0708 	add.w	r7, r7, #8  30:	46bd      	mov	sp, r7  32:	bd80      	pop	{r7, pc}Disassembly of section .text.uart2isr:00000000 <uart2isr>:void uart2isr (void){   0:	b480      	push	{r7}   2:	af00      	add	r7, sp, #0	RDRF2 = 0;	// clear flag   4:	f24c 0304 	movw	r3, #49156	; 0xc004   8:	f2c4 0306 	movt	r3, #16390	; 0x4006   c:	781a      	ldrb	r2, [r3, #0]   e:	f36f 1245 	bfc	r2, #5, #1  12:	701a      	strb	r2, [r3, #0]	rx2char = UART2_D;  14:	f44f 4340 	mov.w	r3, #49152	; 0xc000  18:	f2c4 0306 	movt	r3, #16390	; 0x4006  1c:	79db      	ldrb	r3, [r3, #7]  1e:	b2da      	uxtb	r2, r3  20:	f240 0300 	movw	r3, #0			20: R_ARM_THM_MOVW_ABS_NC	rx2char  24:	f2c0 0300 	movt	r3, #0			24: R_ARM_THM_MOVT_ABS	rx2char  28:	701a      	strb	r2, [r3, #0]	uart2Buffer[index2] = rx2char; //UART0_D;  2a:	f240 0300 	movw	r3, #0			2a: R_ARM_THM_MOVW_ABS_NC	index2  2e:	f2c0 0300 	movt	r3, #0			2e: R_ARM_THM_MOVT_ABS	index2  32:	681a      	ldr	r2, [r3, #0]  34:	f240 0300 	movw	r3, #0			34: R_ARM_THM_MOVW_ABS_NC	rx2char  38:	f2c0 0300 	movt	r3, #0			38: R_ARM_THM_MOVT_ABS	rx2char  3c:	781b      	ldrb	r3, [r3, #0]  3e:	b2d9      	uxtb	r1, r3  40:	f240 0300 	movw	r3, #0			40: R_ARM_THM_MOVW_ABS_NC	uart2Buffer  44:	f2c0 0300 	movt	r3, #0			44: R_ARM_THM_MOVT_ABS	uart2Buffer  48:	5499      	strb	r1, [r3, r2]	index2++;  4a:	f240 0300 	movw	r3, #0			4a: R_ARM_THM_MOVW_ABS_NC	index2  4e:	f2c0 0300 	movt	r3, #0			4e: R_ARM_THM_MOVT_ABS	index2  52:	681b      	ldr	r3, [r3, #0]  54:	f103 0201 	add.w	r2, r3, #1  58:	f240 0300 	movw	r3, #0			58: R_ARM_THM_MOVW_ABS_NC	index2  5c:	f2c0 0300 	movt	r3, #0			5c: R_ARM_THM_MOVT_ABS	index2  60:	601a      	str	r2, [r3, #0]	if (rx2char == 13){ // check for '\r' to reset index  62:	f240 0300 	movw	r3, #0			62: R_ARM_THM_MOVW_ABS_NC	rx2char  66:	f2c0 0300 	movt	r3, #0			66: R_ARM_THM_MOVT_ABS	rx2char  6a:	781b      	ldrb	r3, [r3, #0]  6c:	b2db      	uxtb	r3, r3  6e:	2b0d      	cmp	r3, #13  70:	d106      	bne.n	80 <uart2isr+0x80>		index2 = 0;  72:	f240 0300 	movw	r3, #0			72: R_ARM_THM_MOVW_ABS_NC	index2  76:	f2c0 0300 	movt	r3, #0			76: R_ARM_THM_MOVT_ABS	index2  7a:	f04f 0200 	mov.w	r2, #0  7e:	601a      	str	r2, [r3, #0]	}	if (index2 > 9) {	// check for buffer overflow to reset index  80:	f240 0300 	movw	r3, #0			80: R_ARM_THM_MOVW_ABS_NC	index2  84:	f2c0 0300 	movt	r3, #0			84: R_ARM_THM_MOVT_ABS	index2  88:	681b      	ldr	r3, [r3, #0]  8a:	2b09      	cmp	r3, #9  8c:	dd06      	ble.n	9c <uart2isr+0x9c>		index2 = 0;  8e:	f240 0300 	movw	r3, #0			8e: R_ARM_THM_MOVW_ABS_NC	index2  92:	f2c0 0300 	movt	r3, #0			92: R_ARM_THM_MOVT_ABS	index2  96:	f04f 0200 	mov.w	r2, #0  9a:	601a      	str	r2, [r3, #0]	}}  9c:	46bd      	mov	sp, r7  9e:	bc80      	pop	{r7}  a0:	4770      	bx	lr  a2:	bf00      	nopDisassembly of section .text.send3Char:00000000 <send3Char>:volatile char rx3char;					 // variable to store received character from serial port#define UART3_S1 (*(ioreg8 *)0x4006D004) // UART3 status register 1 whose bit 6 is transmit complete#define TC3 UART3_S1.B6					 // UART3 Transmit Complete flag'#define RDRF3 UART3_S1.B5				 // UART3 Receive Data Register Full flagvoid send3Char (char x){   0:	b480      	push	{r7}   2:	b083      	sub	sp, #12   4:	af00      	add	r7, sp, #0   6:	4603      	mov	r3, r0   8:	71fb      	strb	r3, [r7, #7]	  while(TC3 != 1);   a:	bf00      	nop   c:	f24d 0304 	movw	r3, #53252	; 0xd004  10:	f2c4 0306 	movt	r3, #16390	; 0x4006  14:	781b      	ldrb	r3, [r3, #0]  16:	f003 0340 	and.w	r3, r3, #64	; 0x40  1a:	b2db      	uxtb	r3, r3  1c:	2b00      	cmp	r3, #0  1e:	d0f5      	beq.n	c <send3Char+0xc>	  UART3_D = x;   20:	f44f 4350 	mov.w	r3, #53248	; 0xd000  24:	f2c4 0306 	movt	r3, #16390	; 0x4006  28:	79fa      	ldrb	r2, [r7, #7]  2a:	71da      	strb	r2, [r3, #7]	  TC3 = 0;  2c:	f24d 0304 	movw	r3, #53252	; 0xd004  30:	f2c4 0306 	movt	r3, #16390	; 0x4006  34:	781a      	ldrb	r2, [r3, #0]  36:	f36f 1286 	bfc	r2, #6, #1  3a:	701a      	strb	r2, [r3, #0]}  3c:	f107 070c 	add.w	r7, r7, #12  40:	46bd      	mov	sp, r7  42:	bc80      	pop	{r7}  44:	4770      	bx	lr  46:	bf00      	nopDisassembly of section .text.send3String:00000000 <send3String>:void send3String (char* ptr){   0:	b580      	push	{r7, lr}   2:	b082      	sub	sp, #8   4:	af00      	add	r7, sp, #0   6:	6078      	str	r0, [r7, #4]	while (*ptr != 0) {   8:	e008      	b.n	1c <send3String+0x1c>		send3Char(*ptr);   a:	687b      	ldr	r3, [r7, #4]   c:	781b      	ldrb	r3, [r3, #0]   e:	4618      	mov	r0, r3  10:	f7ff fffe 	bl	0 <send3String>			10: R_ARM_THM_CALL	send3Char		ptr++;  14:	687b      	ldr	r3, [r7, #4]  16:	f103 0301 	add.w	r3, r3, #1  1a:	607b      	str	r3, [r7, #4]	  UART3_D = x; 	  TC3 = 0;}void send3String (char* ptr){	while (*ptr != 0) {  1c:	687b      	ldr	r3, [r7, #4]  1e:	781b      	ldrb	r3, [r3, #0]  20:	2b00      	cmp	r3, #0  22:	d1f2      	bne.n	a <send3String+0xa>		send3Char(*ptr);		ptr++;	}	send3Char(13);	// optional  24:	f04f 000d 	mov.w	r0, #13  28:	f7ff fffe 	bl	0 <send3String>			28: R_ARM_THM_CALL	send3Char}  2c:	f107 0708 	add.w	r7, r7, #8  30:	46bd      	mov	sp, r7  32:	bd80      	pop	{r7, pc}Disassembly of section .text.uart3isr:00000000 <uart3isr>:void uart3isr (void){   0:	b480      	push	{r7}   2:	af00      	add	r7, sp, #0	RDRF3 = 0;	// clear flag   4:	f24d 0304 	movw	r3, #53252	; 0xd004   8:	f2c4 0306 	movt	r3, #16390	; 0x4006   c:	781a      	ldrb	r2, [r3, #0]   e:	f36f 1245 	bfc	r2, #5, #1  12:	701a      	strb	r2, [r3, #0]	rx3char = UART3_D;  14:	f44f 4350 	mov.w	r3, #53248	; 0xd000  18:	f2c4 0306 	movt	r3, #16390	; 0x4006  1c:	79db      	ldrb	r3, [r3, #7]  1e:	b2da      	uxtb	r2, r3  20:	f240 0300 	movw	r3, #0			20: R_ARM_THM_MOVW_ABS_NC	rx3char  24:	f2c0 0300 	movt	r3, #0			24: R_ARM_THM_MOVT_ABS	rx3char  28:	701a      	strb	r2, [r3, #0]	uart3Buffer[index3] = rx3char; //UART0_D;  2a:	f240 0300 	movw	r3, #0			2a: R_ARM_THM_MOVW_ABS_NC	index3  2e:	f2c0 0300 	movt	r3, #0			2e: R_ARM_THM_MOVT_ABS	index3  32:	681a      	ldr	r2, [r3, #0]  34:	f240 0300 	movw	r3, #0			34: R_ARM_THM_MOVW_ABS_NC	rx3char  38:	f2c0 0300 	movt	r3, #0			38: R_ARM_THM_MOVT_ABS	rx3char  3c:	781b      	ldrb	r3, [r3, #0]  3e:	b2d9      	uxtb	r1, r3  40:	f240 0300 	movw	r3, #0			40: R_ARM_THM_MOVW_ABS_NC	uart3Buffer  44:	f2c0 0300 	movt	r3, #0			44: R_ARM_THM_MOVT_ABS	uart3Buffer  48:	5499      	strb	r1, [r3, r2]	index3++;  4a:	f240 0300 	movw	r3, #0			4a: R_ARM_THM_MOVW_ABS_NC	index3  4e:	f2c0 0300 	movt	r3, #0			4e: R_ARM_THM_MOVT_ABS	index3  52:	681b      	ldr	r3, [r3, #0]  54:	f103 0201 	add.w	r2, r3, #1  58:	f240 0300 	movw	r3, #0			58: R_ARM_THM_MOVW_ABS_NC	index3  5c:	f2c0 0300 	movt	r3, #0			5c: R_ARM_THM_MOVT_ABS	index3  60:	601a      	str	r2, [r3, #0]	if (rx3char == 13){ // check for '\r' to reset index  62:	f240 0300 	movw	r3, #0			62: R_ARM_THM_MOVW_ABS_NC	rx3char  66:	f2c0 0300 	movt	r3, #0			66: R_ARM_THM_MOVT_ABS	rx3char  6a:	781b      	ldrb	r3, [r3, #0]  6c:	b2db      	uxtb	r3, r3  6e:	2b0d      	cmp	r3, #13  70:	d106      	bne.n	80 <uart3isr+0x80>		index3 = 0;  72:	f240 0300 	movw	r3, #0			72: R_ARM_THM_MOVW_ABS_NC	index3  76:	f2c0 0300 	movt	r3, #0			76: R_ARM_THM_MOVT_ABS	index3  7a:	f04f 0200 	mov.w	r2, #0  7e:	601a      	str	r2, [r3, #0]	}	if (index3 > 9) {	// check for buffer overflow to reset index  80:	f240 0300 	movw	r3, #0			80: R_ARM_THM_MOVW_ABS_NC	index3  84:	f2c0 0300 	movt	r3, #0			84: R_ARM_THM_MOVT_ABS	index3  88:	681b      	ldr	r3, [r3, #0]  8a:	2b09      	cmp	r3, #9  8c:	dd06      	ble.n	9c <uart3isr+0x9c>		index3 = 0;  8e:	f240 0300 	movw	r3, #0			8e: R_ARM_THM_MOVW_ABS_NC	index3  92:	f2c0 0300 	movt	r3, #0			92: R_ARM_THM_MOVT_ABS	index3  96:	f04f 0200 	mov.w	r2, #0  9a:	601a      	str	r2, [r3, #0]	}}  9c:	46bd      	mov	sp, r7  9e:	bc80      	pop	{r7}  a0:	4770      	bx	lr  a2:	bf00      	nopDisassembly of section .text.uart0isr:00000000 <uart0isr>:volatile int Servo;volatile char colour, uart;volatile long right,left;void uart0isr(void)	{   0:	4668      	mov	r0, sp   2:	f020 0107 	bic.w	r1, r0, #7   6:	468d      	mov	sp, r1   8:	b481      	push	{r0, r7}   a:	af00      	add	r7, sp, #0	    RDRF0 = 0; //clear flag   c:	f24a 0304 	movw	r3, #40964	; 0xa004  10:	f2c4 0306 	movt	r3, #16390	; 0x4006  14:	781a      	ldrb	r2, [r3, #0]  16:	f36f 1245 	bfc	r2, #5, #1  1a:	701a      	strb	r2, [r3, #0]		rx0char = UART0_D;  1c:	f44f 4320 	mov.w	r3, #40960	; 0xa000  20:	f2c4 0306 	movt	r3, #16390	; 0x4006  24:	79db      	ldrb	r3, [r3, #7]  26:	b2da      	uxtb	r2, r3  28:	f240 0300 	movw	r3, #0			28: R_ARM_THM_MOVW_ABS_NC	rx0char  2c:	f2c0 0300 	movt	r3, #0			2c: R_ARM_THM_MOVT_ABS	rx0char  30:	701a      	strb	r2, [r3, #0]		uart0Buffer[index0] = rx0char;  32:	f240 0300 	movw	r3, #0			32: R_ARM_THM_MOVW_ABS_NC	index0  36:	f2c0 0300 	movt	r3, #0			36: R_ARM_THM_MOVT_ABS	index0  3a:	681a      	ldr	r2, [r3, #0]  3c:	f240 0300 	movw	r3, #0			3c: R_ARM_THM_MOVW_ABS_NC	rx0char  40:	f2c0 0300 	movt	r3, #0			40: R_ARM_THM_MOVT_ABS	rx0char  44:	781b      	ldrb	r3, [r3, #0]  46:	b2d9      	uxtb	r1, r3  48:	f240 0300 	movw	r3, #0			48: R_ARM_THM_MOVW_ABS_NC	uart0Buffer  4c:	f2c0 0300 	movt	r3, #0			4c: R_ARM_THM_MOVT_ABS	uart0Buffer  50:	5499      	strb	r1, [r3, r2]		index0++;  52:	f240 0300 	movw	r3, #0			52: R_ARM_THM_MOVW_ABS_NC	index0  56:	f2c0 0300 	movt	r3, #0			56: R_ARM_THM_MOVT_ABS	index0  5a:	681b      	ldr	r3, [r3, #0]  5c:	f103 0201 	add.w	r2, r3, #1  60:	f240 0300 	movw	r3, #0			60: R_ARM_THM_MOVW_ABS_NC	index0  64:	f2c0 0300 	movt	r3, #0			64: R_ARM_THM_MOVT_ABS	index0  68:	601a      	str	r2, [r3, #0]		if (index0 > 1 && uart0Buffer[index0 - 1] == 0xAA && uart0Buffer[index0-2] == 0x55)  6a:	f240 0300 	movw	r3, #0			6a: R_ARM_THM_MOVW_ABS_NC	index0  6e:	f2c0 0300 	movt	r3, #0			6e: R_ARM_THM_MOVT_ABS	index0  72:	681b      	ldr	r3, [r3, #0]  74:	2b01      	cmp	r3, #1  76:	dd32      	ble.n	de <uart0isr+0xde>  78:	f240 0300 	movw	r3, #0			78: R_ARM_THM_MOVW_ABS_NC	index0  7c:	f2c0 0300 	movt	r3, #0			7c: R_ARM_THM_MOVT_ABS	index0  80:	681b      	ldr	r3, [r3, #0]  82:	f103 32ff 	add.w	r2, r3, #4294967295  86:	f240 0300 	movw	r3, #0			86: R_ARM_THM_MOVW_ABS_NC	uart0Buffer  8a:	f2c0 0300 	movt	r3, #0			8a: R_ARM_THM_MOVT_ABS	uart0Buffer  8e:	5c9b      	ldrb	r3, [r3, r2]  90:	b2db      	uxtb	r3, r3  92:	2baa      	cmp	r3, #170	; 0xaa  94:	d123      	bne.n	de <uart0isr+0xde>  96:	f240 0300 	movw	r3, #0			96: R_ARM_THM_MOVW_ABS_NC	index0  9a:	f2c0 0300 	movt	r3, #0			9a: R_ARM_THM_MOVT_ABS	index0  9e:	681b      	ldr	r3, [r3, #0]  a0:	f1a3 0202 	sub.w	r2, r3, #2  a4:	f240 0300 	movw	r3, #0			a4: R_ARM_THM_MOVW_ABS_NC	uart0Buffer  a8:	f2c0 0300 	movt	r3, #0			a8: R_ARM_THM_MOVT_ABS	uart0Buffer  ac:	5c9b      	ldrb	r3, [r3, r2]  ae:	b2db      	uxtb	r3, r3  b0:	2b55      	cmp	r3, #85	; 0x55  b2:	d114      	bne.n	de <uart0isr+0xde>		{			uart0Buffer[0] = 0x55;  b4:	f240 0300 	movw	r3, #0			b4: R_ARM_THM_MOVW_ABS_NC	uart0Buffer  b8:	f2c0 0300 	movt	r3, #0			b8: R_ARM_THM_MOVT_ABS	uart0Buffer  bc:	f04f 0255 	mov.w	r2, #85	; 0x55  c0:	701a      	strb	r2, [r3, #0]			uart0Buffer[1] = 0xAA;  c2:	f240 0300 	movw	r3, #0			c2: R_ARM_THM_MOVW_ABS_NC	uart0Buffer  c6:	f2c0 0300 	movt	r3, #0			c6: R_ARM_THM_MOVT_ABS	uart0Buffer  ca:	f04f 02aa 	mov.w	r2, #170	; 0xaa  ce:	705a      	strb	r2, [r3, #1]			index0 = 2;  d0:	f240 0300 	movw	r3, #0			d0: R_ARM_THM_MOVW_ABS_NC	index0  d4:	f2c0 0300 	movt	r3, #0			d4: R_ARM_THM_MOVT_ABS	index0  d8:	f04f 0202 	mov.w	r2, #2  dc:	601a      	str	r2, [r3, #0]		}		if(index0 == 13 && uart0Buffer[1] == 0xAA && uart0Buffer[0] == 0x55)   de:	f240 0300 	movw	r3, #0			de: R_ARM_THM_MOVW_ABS_NC	index0  e2:	f2c0 0300 	movt	r3, #0			e2: R_ARM_THM_MOVT_ABS	index0  e6:	681b      	ldr	r3, [r3, #0]  e8:	2b0d      	cmp	r3, #13  ea:	d14a      	bne.n	182 <uart0isr+0x182>  ec:	f240 0300 	movw	r3, #0			ec: R_ARM_THM_MOVW_ABS_NC	uart0Buffer  f0:	f2c0 0300 	movt	r3, #0			f0: R_ARM_THM_MOVT_ABS	uart0Buffer  f4:	785b      	ldrb	r3, [r3, #1]  f6:	b2db      	uxtb	r3, r3  f8:	2baa      	cmp	r3, #170	; 0xaa  fa:	d142      	bne.n	182 <uart0isr+0x182>  fc:	f240 0300 	movw	r3, #0			fc: R_ARM_THM_MOVW_ABS_NC	uart0Buffer 100:	f2c0 0300 	movt	r3, #0			100: R_ARM_THM_MOVT_ABS	uart0Buffer 104:	781b      	ldrb	r3, [r3, #0] 106:	b2db      	uxtb	r3, r3 108:	2b55      	cmp	r3, #85	; 0x55 10a:	d13a      	bne.n	182 <uart0isr+0x182>		{			signature = uart0Buffer[4]; 10c:	f240 0300 	movw	r3, #0			10c: R_ARM_THM_MOVW_ABS_NC	uart0Buffer 110:	f2c0 0300 	movt	r3, #0			110: R_ARM_THM_MOVT_ABS	uart0Buffer 114:	791b      	ldrb	r3, [r3, #4] 116:	b2db      	uxtb	r3, r3 118:	461a      	mov	r2, r3 11a:	f240 0300 	movw	r3, #0			11a: R_ARM_THM_MOVW_ABS_NC	signature 11e:	f2c0 0300 	movt	r3, #0			11e: R_ARM_THM_MOVT_ABS	signature 122:	601a      	str	r2, [r3, #0]			if(signature == 2) 124:	f240 0300 	movw	r3, #0			124: R_ARM_THM_MOVW_ABS_NC	signature 128:	f2c0 0300 	movt	r3, #0			128: R_ARM_THM_MOVT_ABS	signature 12c:	681b      	ldr	r3, [r3, #0] 12e:	2b02      	cmp	r3, #2 130:	d127      	bne.n	182 <uart0isr+0x182>			{				Obj1xcenter = uart0Buffer[7] * 256 + uart0Buffer[6];  // acquire the center of x 132:	f240 0300 	movw	r3, #0			132: R_ARM_THM_MOVW_ABS_NC	uart0Buffer 136:	f2c0 0300 	movt	r3, #0			136: R_ARM_THM_MOVT_ABS	uart0Buffer 13a:	79db      	ldrb	r3, [r3, #7] 13c:	b2db      	uxtb	r3, r3 13e:	ea4f 2203 	mov.w	r2, r3, lsl #8 142:	f240 0300 	movw	r3, #0			142: R_ARM_THM_MOVW_ABS_NC	uart0Buffer 146:	f2c0 0300 	movt	r3, #0			146: R_ARM_THM_MOVT_ABS	uart0Buffer 14a:	799b      	ldrb	r3, [r3, #6] 14c:	b2db      	uxtb	r3, r3 14e:	18d2      	adds	r2, r2, r3 150:	f240 0300 	movw	r3, #0			150: R_ARM_THM_MOVW_ABS_NC	Obj1xcenter 154:	f2c0 0300 	movt	r3, #0			154: R_ARM_THM_MOVT_ABS	Obj1xcenter 158:	601a      	str	r2, [r3, #0]				Obj1ycenter = uart0Buffer[9] * 256 + uart0Buffer[8]; // acquire the center of y 15a:	f240 0300 	movw	r3, #0			15a: R_ARM_THM_MOVW_ABS_NC	uart0Buffer 15e:	f2c0 0300 	movt	r3, #0			15e: R_ARM_THM_MOVT_ABS	uart0Buffer 162:	7a5b      	ldrb	r3, [r3, #9] 164:	b2db      	uxtb	r3, r3 166:	ea4f 2203 	mov.w	r2, r3, lsl #8 16a:	f240 0300 	movw	r3, #0			16a: R_ARM_THM_MOVW_ABS_NC	uart0Buffer 16e:	f2c0 0300 	movt	r3, #0			16e: R_ARM_THM_MOVT_ABS	uart0Buffer 172:	7a1b      	ldrb	r3, [r3, #8] 174:	b2db      	uxtb	r3, r3 176:	18d2      	adds	r2, r2, r3 178:	f240 0300 	movw	r3, #0			178: R_ARM_THM_MOVW_ABS_NC	Obj1ycenter 17c:	f2c0 0300 	movt	r3, #0			17c: R_ARM_THM_MOVT_ABS	Obj1ycenter 180:	601a      	str	r2, [r3, #0]			}		}		if (index0 > 13) // check for buffer overflow 182:	f240 0300 	movw	r3, #0			182: R_ARM_THM_MOVW_ABS_NC	index0 186:	f2c0 0300 	movt	r3, #0			186: R_ARM_THM_MOVT_ABS	index0 18a:	681b      	ldr	r3, [r3, #0] 18c:	2b0d      	cmp	r3, #13 18e:	dd06      	ble.n	19e <uart0isr+0x19e>		{			index0 = 0; // reset index 190:	f240 0300 	movw	r3, #0			190: R_ARM_THM_MOVW_ABS_NC	index0 194:	f2c0 0300 	movt	r3, #0			194: R_ARM_THM_MOVT_ABS	index0 198:	f04f 0200 	mov.w	r2, #0 19c:	601a      	str	r2, [r3, #0]		}	} 19e:	46bd      	mov	sp, r7 1a0:	bc81      	pop	{r0, r7} 1a2:	4685      	mov	sp, r0 1a4:	4770      	bx	lr 1a6:	bf00      	nopDisassembly of section .text.writeAXRegister:00000000 <writeAXRegister>:void writeAXRegister (char bytes[]){   0:	b580      	push	{r7, lr}   2:	b084      	sub	sp, #16   4:	af00      	add	r7, sp, #0   6:	6078      	str	r0, [r7, #4]	char x, N, n=0, sum=0;   8:	f04f 0300 	mov.w	r3, #0   c:	737b      	strb	r3, [r7, #13]   e:	f04f 0300 	mov.w	r3, #0  12:	73bb      	strb	r3, [r7, #14]	//	PTE2o = 1;//enable single-wire Tx	//	PTE3o = 0; //disable single-wire Rx;		for (x=1; x<=bytes[0];x++){  14:	f04f 0301 	mov.w	r3, #1  18:	73fb      	strb	r3, [r7, #15]  1a:	e00a      	b.n	32 <writeAXRegister+0x32>		sum = sum + bytes[x];  1c:	7bfb      	ldrb	r3, [r7, #15]  1e:	687a      	ldr	r2, [r7, #4]  20:	18d3      	adds	r3, r2, r3  22:	781a      	ldrb	r2, [r3, #0]  24:	7bbb      	ldrb	r3, [r7, #14]  26:	18d3      	adds	r3, r2, r3  28:	73bb      	strb	r3, [r7, #14]	char x, N, n=0, sum=0;	//	PTE2o = 1;//enable single-wire Tx	//	PTE3o = 0; //disable single-wire Rx;		for (x=1; x<=bytes[0];x++){  2a:	7bfb      	ldrb	r3, [r7, #15]  2c:	f103 0301 	add.w	r3, r3, #1  30:	73fb      	strb	r3, [r7, #15]  32:	687b      	ldr	r3, [r7, #4]  34:	781b      	ldrb	r3, [r3, #0]  36:	7bfa      	ldrb	r2, [r7, #15]  38:	429a      	cmp	r2, r3  3a:	d9ef      	bls.n	1c <writeAXRegister+0x1c>		sum = sum + bytes[x];	}		n = bytes[0]-1; 	// subtract ID from count  3c:	687b      	ldr	r3, [r7, #4]  3e:	781b      	ldrb	r3, [r3, #0]  40:	f103 33ff 	add.w	r3, r3, #4294967295  44:	737b      	strb	r3, [r7, #13]	N = n+2;			// calculate N  46:	7b7b      	ldrb	r3, [r7, #13]  48:	f103 0302 	add.w	r3, r3, #2  4c:	733b      	strb	r3, [r7, #12]		sum = sum + 0x03 + N;  4e:	7bba      	ldrb	r2, [r7, #14]  50:	7b3b      	ldrb	r3, [r7, #12]  52:	18d3      	adds	r3, r2, r3  54:	b2db      	uxtb	r3, r3  56:	f103 0303 	add.w	r3, r3, #3  5a:	73bb      	strb	r3, [r7, #14]		send1Char(0xFF);				// send 2 0xFFs  5c:	f04f 00ff 	mov.w	r0, #255	; 0xff  60:	f7ff fffe 	bl	0 <writeAXRegister>			60: R_ARM_THM_CALL	send1Char	send1Char(0xFF);  64:	f04f 00ff 	mov.w	r0, #255	; 0xff  68:	f7ff fffe 	bl	0 <writeAXRegister>			68: R_ARM_THM_CALL	send1Char	send1Char(bytes[1]);			// send ID  6c:	687b      	ldr	r3, [r7, #4]  6e:	f103 0301 	add.w	r3, r3, #1  72:	781b      	ldrb	r3, [r3, #0]  74:	4618      	mov	r0, r3  76:	f7ff fffe 	bl	0 <writeAXRegister>			76: R_ARM_THM_CALL	send1Char	send1Char(N);					// send length  7a:	7b3b      	ldrb	r3, [r7, #12]  7c:	4618      	mov	r0, r3  7e:	f7ff fffe 	bl	0 <writeAXRegister>			7e: R_ARM_THM_CALL	send1Char	send1Char(0x03);				// write-to-Control Table command  82:	f04f 0003 	mov.w	r0, #3  86:	f7ff fffe 	bl	0 <writeAXRegister>			86: R_ARM_THM_CALL	send1Char	for (x=2; x<=bytes[0]; x++){	// send register address and data(s)  8a:	f04f 0302 	mov.w	r3, #2  8e:	73fb      	strb	r3, [r7, #15]  90:	e00a      	b.n	a8 <writeAXRegister+0xa8>		send1Char(bytes[x]);  92:	7bfb      	ldrb	r3, [r7, #15]  94:	687a      	ldr	r2, [r7, #4]  96:	18d3      	adds	r3, r2, r3  98:	781b      	ldrb	r3, [r3, #0]  9a:	4618      	mov	r0, r3  9c:	f7ff fffe 	bl	0 <writeAXRegister>			9c: R_ARM_THM_CALL	send1Char	send1Char(0xFF);				// send 2 0xFFs	send1Char(0xFF);	send1Char(bytes[1]);			// send ID	send1Char(N);					// send length	send1Char(0x03);				// write-to-Control Table command	for (x=2; x<=bytes[0]; x++){	// send register address and data(s)  a0:	7bfb      	ldrb	r3, [r7, #15]  a2:	f103 0301 	add.w	r3, r3, #1  a6:	73fb      	strb	r3, [r7, #15]  a8:	687b      	ldr	r3, [r7, #4]  aa:	781b      	ldrb	r3, [r3, #0]  ac:	7bfa      	ldrb	r2, [r7, #15]  ae:	429a      	cmp	r2, r3  b0:	d9ef      	bls.n	92 <writeAXRegister+0x92>		send1Char(bytes[x]);	}		send1Char(~sum);				// send checksum  b2:	7bbb      	ldrb	r3, [r7, #14]  b4:	ea6f 0303 	mvn.w	r3, r3  b8:	b2db      	uxtb	r3, r3  ba:	4618      	mov	r0, r3  bc:	f7ff fffe 	bl	0 <writeAXRegister>			bc: R_ARM_THM_CALL	send1Char	// the next 2 lines must go together, else Tx disabled before last byte is sent 	//while (TC1 != 1); // wait for last byte to be fully Tx//	PTC8o = 0;// disable single-wire Tx 	//PTC9o = 1; //enable single-wire Rx}  c0:	f107 0710 	add.w	r7, r7, #16  c4:	46bd      	mov	sp, r7  c6:	bd80      	pop	{r7, pc}Disassembly of section .text.ServoDeg:00000000 <ServoDeg>:char MoveCCW[] = {4,0xfe,0x20,0xff,0x03};char MoveCW[] = {4,0xfe,0x20,0xff,0x07};char StopMoving[] = {4,0xfe,0x20,0x00,0x00};void ServoDeg(char no){   0:	b580      	push	{r7, lr}   2:	b082      	sub	sp, #8   4:	af00      	add	r7, sp, #0   6:	4603      	mov	r3, r0   8:	71fb      	strb	r3, [r7, #7]	switch(no){   a:	79fb      	ldrb	r3, [r7, #7]   c:	2b09      	cmp	r3, #9   e:	d83a      	bhi.n	86 <ServoDeg+0x86>  10:	a201      	add	r2, pc, #4	; (adr r2, 18 <ServoDeg+0x18>)  12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]  16:	bf00      	nop  18:	00000041 	.word	0x00000041			18: R_ARM_ABS32	.text.ServoDeg  1c:	0000004f 	.word	0x0000004f			1c: R_ARM_ABS32	.text.ServoDeg  20:	0000005d 	.word	0x0000005d			20: R_ARM_ABS32	.text.ServoDeg  24:	0000006b 	.word	0x0000006b			24: R_ARM_ABS32	.text.ServoDeg  28:	00000087 	.word	0x00000087			28: R_ARM_ABS32	.text.ServoDeg  2c:	00000087 	.word	0x00000087			2c: R_ARM_ABS32	.text.ServoDeg  30:	00000087 	.word	0x00000087			30: R_ARM_ABS32	.text.ServoDeg  34:	00000087 	.word	0x00000087			34: R_ARM_ABS32	.text.ServoDeg  38:	00000087 	.word	0x00000087			38: R_ARM_ABS32	.text.ServoDeg  3c:	00000079 	.word	0x00000079			3c: R_ARM_ABS32	.text.ServoDeg		case 0 : writeAXRegister(Set0);break;  40:	f240 0000 	movw	r0, #0			40: R_ARM_THM_MOVW_ABS_NC	Set0  44:	f2c0 0000 	movt	r0, #0			44: R_ARM_THM_MOVT_ABS	Set0  48:	f7ff fffe 	bl	0 <ServoDeg>			48: R_ARM_THM_CALL	writeAXRegister  4c:	e01b      	b.n	3a <ServoDeg+0x3a>		case 1 : writeAXRegister(Set90);break;  4e:	f240 0000 	movw	r0, #0			4e: R_ARM_THM_MOVW_ABS_NC	Set90  52:	f2c0 0000 	movt	r0, #0			52: R_ARM_THM_MOVT_ABS	Set90  56:	f7ff fffe 	bl	0 <ServoDeg>			56: R_ARM_THM_CALL	writeAXRegister  5a:	e014      	b.n	2c <ServoDeg+0x2c>		case 2 : writeAXRegister(Set180);break;  5c:	f240 0000 	movw	r0, #0			5c: R_ARM_THM_MOVW_ABS_NC	Set180  60:	f2c0 0000 	movt	r0, #0			60: R_ARM_THM_MOVT_ABS	Set180  64:	f7ff fffe 	bl	0 <ServoDeg>			64: R_ARM_THM_CALL	writeAXRegister  68:	e00d      	b.n	1e <ServoDeg+0x1e>		case 3 : writeAXRegister(Set270); break;  6a:	f240 0000 	movw	r0, #0			6a: R_ARM_THM_MOVW_ABS_NC	Set270  6e:	f2c0 0000 	movt	r0, #0			6e: R_ARM_THM_MOVT_ABS	Set270  72:	f7ff fffe 	bl	0 <ServoDeg>			72: R_ARM_THM_CALL	writeAXRegister  76:	e006      	b.n	10 <ServoDeg+0x10>		case 9 : writeAXRegister(Set45); break;  78:	f240 0000 	movw	r0, #0			78: R_ARM_THM_MOVW_ABS_NC	Set45  7c:	f2c0 0000 	movt	r0, #0			7c: R_ARM_THM_MOVT_ABS	Set45  80:	f7ff fffe 	bl	0 <ServoDeg>			80: R_ARM_THM_CALL	writeAXRegister  84:	bf00      	nop	}	for(i=0;i<1000;i++);  86:	f240 0300 	movw	r3, #0			86: R_ARM_THM_MOVW_ABS_NC	i  8a:	f2c0 0300 	movt	r3, #0			8a: R_ARM_THM_MOVT_ABS	i  8e:	f04f 0200 	mov.w	r2, #0  92:	601a      	str	r2, [r3, #0]  94:	e00b      	b.n	ae <ServoDeg+0xae>  96:	f240 0300 	movw	r3, #0			96: R_ARM_THM_MOVW_ABS_NC	i  9a:	f2c0 0300 	movt	r3, #0			9a: R_ARM_THM_MOVT_ABS	i  9e:	681b      	ldr	r3, [r3, #0]  a0:	f103 0201 	add.w	r2, r3, #1  a4:	f240 0300 	movw	r3, #0			a4: R_ARM_THM_MOVW_ABS_NC	i  a8:	f2c0 0300 	movt	r3, #0			a8: R_ARM_THM_MOVT_ABS	i  ac:	601a      	str	r2, [r3, #0]  ae:	f240 0300 	movw	r3, #0			ae: R_ARM_THM_MOVW_ABS_NC	i  b2:	f2c0 0300 	movt	r3, #0			b2: R_ARM_THM_MOVT_ABS	i  b6:	681a      	ldr	r2, [r3, #0]  b8:	f240 33e7 	movw	r3, #999	; 0x3e7  bc:	429a      	cmp	r2, r3  be:	ddea      	ble.n	96 <ServoDeg+0x96>}  c0:	f107 0708 	add.w	r7, r7, #8  c4:	46bd      	mov	sp, r7  c6:	bd80      	pop	{r7, pc}Disassembly of section .text.RCControl:00000000 <RCControl>:void RCControl(char control){   0:	b480      	push	{r7}   2:	b083      	sub	sp, #12   4:	af00      	add	r7, sp, #0   6:	4603      	mov	r3, r0   8:	71fb      	strb	r3, [r7, #7]	if(control == 'u'){   a:	79fb      	ldrb	r3, [r7, #7]   c:	2b75      	cmp	r3, #117	; 0x75   e:	d107      	bne.n	20 <RCControl+0x20>		RC = 3;  10:	f240 0300 	movw	r3, #0			10: R_ARM_THM_MOVW_ABS_NC	RC  14:	f2c0 0300 	movt	r3, #0			14: R_ARM_THM_MOVT_ABS	RC  18:	f04f 0203 	mov.w	r2, #3  1c:	601a      	str	r2, [r3, #0]  1e:	e006      	b.n	2e <RCControl+0x2e>	}	else{		RC = 2;  20:	f240 0300 	movw	r3, #0			20: R_ARM_THM_MOVW_ABS_NC	RC  24:	f2c0 0300 	movt	r3, #0			24: R_ARM_THM_MOVT_ABS	RC  28:	f04f 0202 	mov.w	r2, #2  2c:	601a      	str	r2, [r3, #0]	}}  2e:	f107 070c 	add.w	r7, r7, #12  32:	46bd      	mov	sp, r7  34:	bc80      	pop	{r7}  36:	4770      	bx	lrDisassembly of section .text.pta5isr:00000000 <pta5isr>:volatile int ints, testin;volatile int col;volatile int edge1,edge2,period;void pta5isr(void) {   0:	4668      	mov	r0, sp   2:	f020 0107 	bic.w	r1, r0, #7   6:	468d      	mov	sp, r1   8:	b481      	push	{r0, r7}   a:	af00      	add	r7, sp, #0	PORTA_ISFR = PORTA_ISFR | 0x0020; // write 1 to clear interrupt flag of PTA5   c:	f44f 4310 	mov.w	r3, #36864	; 0x9000  10:	f2c4 0304 	movt	r3, #16388	; 0x4004  14:	f44f 4210 	mov.w	r2, #36864	; 0x9000  18:	f2c4 0204 	movt	r2, #16388	; 0x4004  1c:	f8d2 20a0 	ldr.w	r2, [r2, #160]	; 0xa0  20:	f042 0220 	orr.w	r2, r2, #32  24:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0	ints++;  28:	f240 0300 	movw	r3, #0			28: R_ARM_THM_MOVW_ABS_NC	ints  2c:	f2c0 0300 	movt	r3, #0			2c: R_ARM_THM_MOVT_ABS	ints  30:	681b      	ldr	r3, [r3, #0]  32:	f103 0201 	add.w	r2, r3, #1  36:	f240 0300 	movw	r3, #0			36: R_ARM_THM_MOVW_ABS_NC	ints  3a:	f2c0 0300 	movt	r3, #0			3a: R_ARM_THM_MOVT_ABS	ints  3e:	601a      	str	r2, [r3, #0]	if (ints == 1) { // 1st interrupt read in 16-bit counter value as (signed) int16_t   40:	f240 0300 	movw	r3, #0			40: R_ARM_THM_MOVW_ABS_NC	ints  44:	f2c0 0300 	movt	r3, #0			44: R_ARM_THM_MOVT_ABS	ints  48:	681b      	ldr	r3, [r3, #0]  4a:	2b01      	cmp	r3, #1  4c:	d10b      	bne.n	66 <pta5isr+0x66>		edge1 = LPTMR0_CNR;  4e:	f04f 0300 	mov.w	r3, #0  52:	f2c4 0304 	movt	r3, #16388	; 0x4004  56:	68db      	ldr	r3, [r3, #12]  58:	461a      	mov	r2, r3  5a:	f240 0300 	movw	r3, #0			5a: R_ARM_THM_MOVW_ABS_NC	edge1  5e:	f2c0 0300 	movt	r3, #0			5e: R_ARM_THM_MOVT_ABS	edge1  62:	601a      	str	r2, [r3, #0]  64:	e028      	b.n	b8 <pta5isr+0xb8>	} else if (ints == 2) { // 2nd interrupt read in 16-bit counter again   66:	f240 0300 	movw	r3, #0			66: R_ARM_THM_MOVW_ABS_NC	ints  6a:	f2c0 0300 	movt	r3, #0			6a: R_ARM_THM_MOVT_ABS	ints  6e:	681b      	ldr	r3, [r3, #0]  70:	2b02      	cmp	r3, #2  72:	d121      	bne.n	b8 <pta5isr+0xb8>		edge2 = LPTMR0_CNR;  74:	f04f 0300 	mov.w	r3, #0  78:	f2c4 0304 	movt	r3, #16388	; 0x4004  7c:	68db      	ldr	r3, [r3, #12]  7e:	461a      	mov	r2, r3  80:	f240 0300 	movw	r3, #0			80: R_ARM_THM_MOVW_ABS_NC	edge2  84:	f2c0 0300 	movt	r3, #0			84: R_ARM_THM_MOVT_ABS	edge2  88:	601a      	str	r2, [r3, #0]		period = edge2 - edge1; // difference in count value = period in terms of 32.768KHz clock periods  8a:	f240 0300 	movw	r3, #0			8a: R_ARM_THM_MOVW_ABS_NC	edge2  8e:	f2c0 0300 	movt	r3, #0			8e: R_ARM_THM_MOVT_ABS	edge2  92:	681a      	ldr	r2, [r3, #0]  94:	f240 0300 	movw	r3, #0			94: R_ARM_THM_MOVW_ABS_NC	edge1  98:	f2c0 0300 	movt	r3, #0			98: R_ARM_THM_MOVT_ABS	edge1  9c:	681b      	ldr	r3, [r3, #0]  9e:	1ad2      	subs	r2, r2, r3  a0:	f240 0300 	movw	r3, #0			a0: R_ARM_THM_MOVW_ABS_NC	period  a4:	f2c0 0300 	movt	r3, #0			a4: R_ARM_THM_MOVT_ABS	period  a8:	601a      	str	r2, [r3, #0]		ints = 0; // reset ints for next period measurement  aa:	f240 0300 	movw	r3, #0			aa: R_ARM_THM_MOVW_ABS_NC	ints  ae:	f2c0 0300 	movt	r3, #0			ae: R_ARM_THM_MOVT_ABS	ints  b2:	f04f 0200 	mov.w	r2, #0  b6:	601a      	str	r2, [r3, #0]	}	}  b8:	46bd      	mov	sp, r7  ba:	bc81      	pop	{r0, r7}  bc:	4685      	mov	sp, r0  be:	4770      	bx	lrDisassembly of section .text.battMon:00000000 <battMon>:volatile int batt, move;void battMon(){   0:	b480      	push	{r7}   2:	af00      	add	r7, sp, #0	scADC0_SE23;				// start ADC conversion of signal at single-ended ADC0_SE8 pin      4:	f44f 4330 	mov.w	r3, #45056	; 0xb000   8:	f2c4 0303 	movt	r3, #16387	; 0x4003   c:	f04f 0217 	mov.w	r2, #23  10:	601a      	str	r2, [r3, #0]	while (ADC0_COCO == 0);	// wait for conversion completed (COCO) before reading ADC value  12:	bf00      	nop  14:	f44f 4330 	mov.w	r3, #45056	; 0xb000  18:	f2c4 0303 	movt	r3, #16387	; 0x4003  1c:	681b      	ldr	r3, [r3, #0]  1e:	f003 0380 	and.w	r3, r3, #128	; 0x80  22:	ea4f 13d3 	mov.w	r3, r3, lsr #7  26:	2b00      	cmp	r3, #0  28:	d0f4      	beq.n	14 <battMon+0x14>	batt = ADC0_RA;  2a:	f44f 4330 	mov.w	r3, #45056	; 0xb000  2e:	f2c4 0303 	movt	r3, #16387	; 0x4003  32:	691b      	ldr	r3, [r3, #16]  34:	461a      	mov	r2, r3  36:	f240 0300 	movw	r3, #0			36: R_ARM_THM_MOVW_ABS_NC	batt  3a:	f2c0 0300 	movt	r3, #0			3a: R_ARM_THM_MOVT_ABS	batt  3e:	601a      	str	r2, [r3, #0]	if(batt<725){  40:	f240 0300 	movw	r3, #0			40: R_ARM_THM_MOVW_ABS_NC	batt  44:	f2c0 0300 	movt	r3, #0			44: R_ARM_THM_MOVT_ABS	batt  48:	681b      	ldr	r3, [r3, #0]			}// less than 10V}  4a:	46bd      	mov	sp, r7  4c:	bc80      	pop	{r7}  4e:	4770      	bx	lrDisassembly of section .text.wheelmotor:00000000 <wheelmotor>:void wheelmotor(void){   0:	b480      	push	{r7}   2:	af00      	add	r7, sp, #0	LnewCount = FTM2_CNT;   4:	f44f 4300 	mov.w	r3, #32768	; 0x8000   8:	f2c4 030b 	movt	r3, #16395	; 0x400b   c:	685b      	ldr	r3, [r3, #4]   e:	b29a      	uxth	r2, r3  10:	f240 0300 	movw	r3, #0			10: R_ARM_THM_MOVW_ABS_NC	LnewCount  14:	f2c0 0300 	movt	r3, #0			14: R_ARM_THM_MOVT_ABS	LnewCount  18:	801a      	strh	r2, [r3, #0]		Lspeed = LnewCount - LoldCount;  1a:	f240 0300 	movw	r3, #0			1a: R_ARM_THM_MOVW_ABS_NC	LnewCount  1e:	f2c0 0300 	movt	r3, #0			1e: R_ARM_THM_MOVT_ABS	LnewCount  22:	881b      	ldrh	r3, [r3, #0]  24:	b29b      	uxth	r3, r3  26:	b29a      	uxth	r2, r3  28:	f240 0300 	movw	r3, #0			28: R_ARM_THM_MOVW_ABS_NC	LoldCount  2c:	f2c0 0300 	movt	r3, #0			2c: R_ARM_THM_MOVT_ABS	LoldCount  30:	881b      	ldrh	r3, [r3, #0]  32:	b29b      	uxth	r3, r3  34:	b29b      	uxth	r3, r3  36:	1ad3      	subs	r3, r2, r3  38:	b29b      	uxth	r3, r3  3a:	b29a      	uxth	r2, r3  3c:	f240 0300 	movw	r3, #0			3c: R_ARM_THM_MOVW_ABS_NC	Lspeed  40:	f2c0 0300 	movt	r3, #0			40: R_ARM_THM_MOVT_ABS	Lspeed  44:	801a      	strh	r2, [r3, #0]	LDist = LDist + Lspeed;  46:	f240 0300 	movw	r3, #0			46: R_ARM_THM_MOVW_ABS_NC	Lspeed  4a:	f2c0 0300 	movt	r3, #0			4a: R_ARM_THM_MOVT_ABS	Lspeed  4e:	881b      	ldrh	r3, [r3, #0]  50:	b29b      	uxth	r3, r3  52:	b21a      	sxth	r2, r3  54:	f240 0300 	movw	r3, #0			54: R_ARM_THM_MOVW_ABS_NC	LDist  58:	f2c0 0300 	movt	r3, #0			58: R_ARM_THM_MOVT_ABS	LDist  5c:	681b      	ldr	r3, [r3, #0]  5e:	18d2      	adds	r2, r2, r3  60:	f240 0300 	movw	r3, #0			60: R_ARM_THM_MOVW_ABS_NC	LDist  64:	f2c0 0300 	movt	r3, #0			64: R_ARM_THM_MOVT_ABS	LDist  68:	601a      	str	r2, [r3, #0]	LoldCount = LnewCount;  6a:	f240 0300 	movw	r3, #0			6a: R_ARM_THM_MOVW_ABS_NC	LnewCount  6e:	f2c0 0300 	movt	r3, #0			6e: R_ARM_THM_MOVT_ABS	LnewCount  72:	881b      	ldrh	r3, [r3, #0]  74:	b29a      	uxth	r2, r3  76:	f240 0300 	movw	r3, #0			76: R_ARM_THM_MOVW_ABS_NC	LoldCount  7a:	f2c0 0300 	movt	r3, #0			7a: R_ARM_THM_MOVT_ABS	LoldCount  7e:	801a      	strh	r2, [r3, #0]		LsetDist = LsetDist + LsetSpeed;  80:	f240 0300 	movw	r3, #0			80: R_ARM_THM_MOVW_ABS_NC	LsetSpeed  84:	f2c0 0300 	movt	r3, #0			84: R_ARM_THM_MOVT_ABS	LsetSpeed  88:	881b      	ldrh	r3, [r3, #0]  8a:	b29b      	uxth	r3, r3  8c:	b21a      	sxth	r2, r3  8e:	f240 0300 	movw	r3, #0			8e: R_ARM_THM_MOVW_ABS_NC	LsetDist  92:	f2c0 0300 	movt	r3, #0			92: R_ARM_THM_MOVT_ABS	LsetDist  96:	681b      	ldr	r3, [r3, #0]  98:	18d2      	adds	r2, r2, r3  9a:	f240 0300 	movw	r3, #0			9a: R_ARM_THM_MOVW_ABS_NC	LsetDist  9e:	f2c0 0300 	movt	r3, #0			9e: R_ARM_THM_MOVT_ABS	LsetDist  a2:	601a      	str	r2, [r3, #0]		LerrDist = LsetDist - LDist;  a4:	f240 0300 	movw	r3, #0			a4: R_ARM_THM_MOVW_ABS_NC	LsetDist  a8:	f2c0 0300 	movt	r3, #0			a8: R_ARM_THM_MOVT_ABS	LsetDist  ac:	681a      	ldr	r2, [r3, #0]  ae:	f240 0300 	movw	r3, #0			ae: R_ARM_THM_MOVW_ABS_NC	LDist  b2:	f2c0 0300 	movt	r3, #0			b2: R_ARM_THM_MOVT_ABS	LDist  b6:	681b      	ldr	r3, [r3, #0]  b8:	1ad2      	subs	r2, r2, r3  ba:	f240 0300 	movw	r3, #0			ba: R_ARM_THM_MOVW_ABS_NC	LerrDist  be:	f2c0 0300 	movt	r3, #0			be: R_ARM_THM_MOVT_ABS	LerrDist  c2:	601a      	str	r2, [r3, #0]		LerrDistRate = LerrDist - LolderrDist;  c4:	f240 0300 	movw	r3, #0			c4: R_ARM_THM_MOVW_ABS_NC	LerrDist  c8:	f2c0 0300 	movt	r3, #0			c8: R_ARM_THM_MOVT_ABS	LerrDist  cc:	681a      	ldr	r2, [r3, #0]  ce:	f240 0300 	movw	r3, #0			ce: R_ARM_THM_MOVW_ABS_NC	LolderrDist  d2:	f2c0 0300 	movt	r3, #0			d2: R_ARM_THM_MOVT_ABS	LolderrDist  d6:	681b      	ldr	r3, [r3, #0]  d8:	1ad2      	subs	r2, r2, r3  da:	f240 0300 	movw	r3, #0			da: R_ARM_THM_MOVW_ABS_NC	LerrDistRate  de:	f2c0 0300 	movt	r3, #0			de: R_ARM_THM_MOVT_ABS	LerrDistRate  e2:	601a      	str	r2, [r3, #0]	LolderrDist = LerrDist;  e4:	f240 0300 	movw	r3, #0			e4: R_ARM_THM_MOVW_ABS_NC	LerrDist  e8:	f2c0 0300 	movt	r3, #0			e8: R_ARM_THM_MOVT_ABS	LerrDist  ec:	681a      	ldr	r2, [r3, #0]  ee:	f240 0300 	movw	r3, #0			ee: R_ARM_THM_MOVW_ABS_NC	LolderrDist  f2:	f2c0 0300 	movt	r3, #0			f2: R_ARM_THM_MOVT_ABS	LolderrDist  f6:	601a      	str	r2, [r3, #0]		LsumErrDist = LsumErrDist + LerrDist;  f8:	f240 0300 	movw	r3, #0			f8: R_ARM_THM_MOVW_ABS_NC	LsumErrDist  fc:	f2c0 0300 	movt	r3, #0			fc: R_ARM_THM_MOVT_ABS	LsumErrDist 100:	681a      	ldr	r2, [r3, #0] 102:	f240 0300 	movw	r3, #0			102: R_ARM_THM_MOVW_ABS_NC	LerrDist 106:	f2c0 0300 	movt	r3, #0			106: R_ARM_THM_MOVT_ABS	LerrDist 10a:	681b      	ldr	r3, [r3, #0] 10c:	18d2      	adds	r2, r2, r3 10e:	f240 0300 	movw	r3, #0			10e: R_ARM_THM_MOVW_ABS_NC	LsumErrDist 112:	f2c0 0300 	movt	r3, #0			112: R_ARM_THM_MOVT_ABS	LsumErrDist 116:	601a      	str	r2, [r3, #0]		LDistOut = LKp*LerrDist + LKd*LerrDistRate + LKi*LsumErrDist; 118:	f240 0300 	movw	r3, #0			118: R_ARM_THM_MOVW_ABS_NC	LKp 11c:	f2c0 0300 	movt	r3, #0			11c: R_ARM_THM_MOVT_ABS	LKp 120:	881b      	ldrh	r3, [r3, #0] 122:	b29b      	uxth	r3, r3 124:	b21a      	sxth	r2, r3 126:	f240 0300 	movw	r3, #0			126: R_ARM_THM_MOVW_ABS_NC	LerrDist 12a:	f2c0 0300 	movt	r3, #0			12a: R_ARM_THM_MOVT_ABS	LerrDist 12e:	681b      	ldr	r3, [r3, #0] 130:	fb03 f202 	mul.w	r2, r3, r2 134:	f240 0300 	movw	r3, #0			134: R_ARM_THM_MOVW_ABS_NC	LKd 138:	f2c0 0300 	movt	r3, #0			138: R_ARM_THM_MOVT_ABS	LKd 13c:	881b      	ldrh	r3, [r3, #0] 13e:	b29b      	uxth	r3, r3 140:	b219      	sxth	r1, r3 142:	f240 0300 	movw	r3, #0			142: R_ARM_THM_MOVW_ABS_NC	LerrDistRate 146:	f2c0 0300 	movt	r3, #0			146: R_ARM_THM_MOVT_ABS	LerrDistRate 14a:	681b      	ldr	r3, [r3, #0] 14c:	fb03 f301 	mul.w	r3, r3, r1 150:	18d2      	adds	r2, r2, r3 152:	f240 0300 	movw	r3, #0			152: R_ARM_THM_MOVW_ABS_NC	LKi 156:	f2c0 0300 	movt	r3, #0			156: R_ARM_THM_MOVT_ABS	LKi 15a:	881b      	ldrh	r3, [r3, #0] 15c:	b29b      	uxth	r3, r3 15e:	b219      	sxth	r1, r3 160:	f240 0300 	movw	r3, #0			160: R_ARM_THM_MOVW_ABS_NC	LsumErrDist 164:	f2c0 0300 	movt	r3, #0			164: R_ARM_THM_MOVT_ABS	LsumErrDist 168:	681b      	ldr	r3, [r3, #0] 16a:	fb03 f301 	mul.w	r3, r3, r1 16e:	18d2      	adds	r2, r2, r3 170:	f240 0300 	movw	r3, #0			170: R_ARM_THM_MOVW_ABS_NC	LDistOut 174:	f2c0 0300 	movt	r3, #0			174: R_ARM_THM_MOVT_ABS	LDistOut 178:	601a      	str	r2, [r3, #0]	//	LsumErrSpeed = LsumErrSpeed + LerrSpeed;			//	LspeedOut = LKp*LerrSpeed + LKd*LerrSpeedRate + LKi*LsumErrSpeed;				if(LDistOut > 999) 17a:	f240 0300 	movw	r3, #0			17a: R_ARM_THM_MOVW_ABS_NC	LDistOut 17e:	f2c0 0300 	movt	r3, #0			17e: R_ARM_THM_MOVT_ABS	LDistOut 182:	681a      	ldr	r2, [r3, #0] 184:	f240 33e7 	movw	r3, #999	; 0x3e7 188:	429a      	cmp	r2, r3 18a:	dd07      	ble.n	19c <wheelmotor+0x19c>	{		LDistOut = 999; 18c:	f240 0300 	movw	r3, #0			18c: R_ARM_THM_MOVW_ABS_NC	LDistOut 190:	f2c0 0300 	movt	r3, #0			190: R_ARM_THM_MOVT_ABS	LDistOut 194:	f240 32e7 	movw	r2, #999	; 0x3e7 198:	601a      	str	r2, [r3, #0] 19a:	e013      	b.n	1c4 <wheelmotor+0x1c4>	}	else if (LDistOut < -999) 19c:	f240 0300 	movw	r3, #0			19c: R_ARM_THM_MOVW_ABS_NC	LDistOut 1a0:	f2c0 0300 	movt	r3, #0			1a0: R_ARM_THM_MOVT_ABS	LDistOut 1a4:	681a      	ldr	r2, [r3, #0] 1a6:	f64f 4319 	movw	r3, #64537	; 0xfc19 1aa:	f6cf 73ff 	movt	r3, #65535	; 0xffff 1ae:	429a      	cmp	r2, r3 1b0:	da08      	bge.n	1c4 <wheelmotor+0x1c4>	{		LDistOut = -999; 1b2:	f240 0300 	movw	r3, #0			1b2: R_ARM_THM_MOVW_ABS_NC	LDistOut 1b6:	f2c0 0300 	movt	r3, #0			1b6: R_ARM_THM_MOVT_ABS	LDistOut 1ba:	f64f 4219 	movw	r2, #64537	; 0xfc19 1be:	f6cf 72ff 	movt	r2, #65535	; 0xffff 1c2:	601a      	str	r2, [r3, #0]	}		if(LDistOut<0) 1c4:	f240 0300 	movw	r3, #0			1c4: R_ARM_THM_MOVW_ABS_NC	LDistOut 1c8:	f2c0 0300 	movt	r3, #0			1c8: R_ARM_THM_MOVT_ABS	LDistOut 1cc:	681b      	ldr	r3, [r3, #0] 1ce:	2b00      	cmp	r3, #0 1d0:	da1d      	bge.n	20e <wheelmotor+0x20e>	{		LDistOut = -LDistOut; 1d2:	f240 0300 	movw	r3, #0			1d2: R_ARM_THM_MOVW_ABS_NC	LDistOut 1d6:	f2c0 0300 	movt	r3, #0			1d6: R_ARM_THM_MOVT_ABS	LDistOut 1da:	681b      	ldr	r3, [r3, #0] 1dc:	f1c3 0200 	rsb	r2, r3, #0 1e0:	f240 0300 	movw	r3, #0			1e0: R_ARM_THM_MOVW_ABS_NC	LDistOut 1e4:	f2c0 0300 	movt	r3, #0			1e4: R_ARM_THM_MOVT_ABS	LDistOut 1e8:	601a      	str	r2, [r3, #0]		FTM0_C4V = 0; 1ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000 1ee:	f2c4 0303 	movt	r3, #16387	; 0x4003 1f2:	f04f 0200 	mov.w	r2, #0 1f6:	631a      	str	r2, [r3, #48]	; 0x30		FTM0_C5V = LDistOut; 1f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000 1fc:	f2c4 0303 	movt	r3, #16387	; 0x4003 200:	f240 0200 	movw	r2, #0			200: R_ARM_THM_MOVW_ABS_NC	LDistOut 204:	f2c0 0200 	movt	r2, #0			204: R_ARM_THM_MOVT_ABS	LDistOut 208:	6812      	ldr	r2, [r2, #0] 20a:	639a      	str	r2, [r3, #56]	; 0x38 20c:	e010      	b.n	230 <wheelmotor+0x230>	}	else	{		FTM0_C4V = LDistOut; 20e:	f44f 4300 	mov.w	r3, #32768	; 0x8000 212:	f2c4 0303 	movt	r3, #16387	; 0x4003 216:	f240 0200 	movw	r2, #0			216: R_ARM_THM_MOVW_ABS_NC	LDistOut 21a:	f2c0 0200 	movt	r2, #0			21a: R_ARM_THM_MOVT_ABS	LDistOut 21e:	6812      	ldr	r2, [r2, #0] 220:	631a      	str	r2, [r3, #48]	; 0x30		FTM0_C5V = 0; 222:	f44f 4300 	mov.w	r3, #32768	; 0x8000 226:	f2c4 0303 	movt	r3, #16387	; 0x4003 22a:	f04f 0200 	mov.w	r2, #0 22e:	639a      	str	r2, [r3, #56]	; 0x38	}	RnewCount = -FTM1_CNT; //This will change the count value to positive 230:	f44f 4310 	mov.w	r3, #36864	; 0x9000 234:	f2c4 0303 	movt	r3, #16387	; 0x4003 238:	685b      	ldr	r3, [r3, #4] 23a:	b29b      	uxth	r3, r3 23c:	f1c3 0300 	rsb	r3, r3, #0 240:	b29b      	uxth	r3, r3 242:	b29a      	uxth	r2, r3 244:	f240 0300 	movw	r3, #0			244: R_ARM_THM_MOVW_ABS_NC	RnewCount 248:	f2c0 0300 	movt	r3, #0			248: R_ARM_THM_MOVT_ABS	RnewCount 24c:	801a      	strh	r2, [r3, #0]		Rspeed = RnewCount - RoldCount; 24e:	f240 0300 	movw	r3, #0			24e: R_ARM_THM_MOVW_ABS_NC	RnewCount 252:	f2c0 0300 	movt	r3, #0			252: R_ARM_THM_MOVT_ABS	RnewCount 256:	881b      	ldrh	r3, [r3, #0] 258:	b29b      	uxth	r3, r3 25a:	b29a      	uxth	r2, r3 25c:	f240 0300 	movw	r3, #0			25c: R_ARM_THM_MOVW_ABS_NC	RoldCount 260:	f2c0 0300 	movt	r3, #0			260: R_ARM_THM_MOVT_ABS	RoldCount 264:	881b      	ldrh	r3, [r3, #0] 266:	b29b      	uxth	r3, r3 268:	b29b      	uxth	r3, r3 26a:	1ad3      	subs	r3, r2, r3 26c:	b29b      	uxth	r3, r3 26e:	b29a      	uxth	r2, r3 270:	f240 0300 	movw	r3, #0			270: R_ARM_THM_MOVW_ABS_NC	Rspeed 274:	f2c0 0300 	movt	r3, #0			274: R_ARM_THM_MOVT_ABS	Rspeed 278:	801a      	strh	r2, [r3, #0]		RoldCount = RnewCount; 27a:	f240 0300 	movw	r3, #0			27a: R_ARM_THM_MOVW_ABS_NC	RnewCount 27e:	f2c0 0300 	movt	r3, #0			27e: R_ARM_THM_MOVT_ABS	RnewCount 282:	881b      	ldrh	r3, [r3, #0] 284:	b29a      	uxth	r2, r3 286:	f240 0300 	movw	r3, #0			286: R_ARM_THM_MOVW_ABS_NC	RoldCount 28a:	f2c0 0300 	movt	r3, #0			28a: R_ARM_THM_MOVT_ABS	RoldCount 28e:	801a      	strh	r2, [r3, #0]		RDist = RDist + Rspeed; 290:	f240 0300 	movw	r3, #0			290: R_ARM_THM_MOVW_ABS_NC	Rspeed 294:	f2c0 0300 	movt	r3, #0			294: R_ARM_THM_MOVT_ABS	Rspeed 298:	881b      	ldrh	r3, [r3, #0] 29a:	b29b      	uxth	r3, r3 29c:	b21a      	sxth	r2, r3 29e:	f240 0300 	movw	r3, #0			29e: R_ARM_THM_MOVW_ABS_NC	RDist 2a2:	f2c0 0300 	movt	r3, #0			2a2: R_ARM_THM_MOVT_ABS	RDist 2a6:	681b      	ldr	r3, [r3, #0] 2a8:	18d2      	adds	r2, r2, r3 2aa:	f240 0300 	movw	r3, #0			2aa: R_ARM_THM_MOVW_ABS_NC	RDist 2ae:	f2c0 0300 	movt	r3, #0			2ae: R_ARM_THM_MOVT_ABS	RDist 2b2:	601a      	str	r2, [r3, #0]	RsetDist = RsetDist + RsetSpeed; 2b4:	f240 0300 	movw	r3, #0			2b4: R_ARM_THM_MOVW_ABS_NC	RsetSpeed 2b8:	f2c0 0300 	movt	r3, #0			2b8: R_ARM_THM_MOVT_ABS	RsetSpeed 2bc:	881b      	ldrh	r3, [r3, #0] 2be:	b29b      	uxth	r3, r3 2c0:	b21a      	sxth	r2, r3 2c2:	f240 0300 	movw	r3, #0			2c2: R_ARM_THM_MOVW_ABS_NC	RsetDist 2c6:	f2c0 0300 	movt	r3, #0			2c6: R_ARM_THM_MOVT_ABS	RsetDist 2ca:	681b      	ldr	r3, [r3, #0] 2cc:	18d2      	adds	r2, r2, r3 2ce:	f240 0300 	movw	r3, #0			2ce: R_ARM_THM_MOVW_ABS_NC	RsetDist 2d2:	f2c0 0300 	movt	r3, #0			2d2: R_ARM_THM_MOVT_ABS	RsetDist 2d6:	601a      	str	r2, [r3, #0]		RerrDist = RsetDist - RDist; 2d8:	f240 0300 	movw	r3, #0			2d8: R_ARM_THM_MOVW_ABS_NC	RsetDist 2dc:	f2c0 0300 	movt	r3, #0			2dc: R_ARM_THM_MOVT_ABS	RsetDist 2e0:	681a      	ldr	r2, [r3, #0] 2e2:	f240 0300 	movw	r3, #0			2e2: R_ARM_THM_MOVW_ABS_NC	RDist 2e6:	f2c0 0300 	movt	r3, #0			2e6: R_ARM_THM_MOVT_ABS	RDist 2ea:	681b      	ldr	r3, [r3, #0] 2ec:	1ad2      	subs	r2, r2, r3 2ee:	f240 0300 	movw	r3, #0			2ee: R_ARM_THM_MOVW_ABS_NC	RerrDist 2f2:	f2c0 0300 	movt	r3, #0			2f2: R_ARM_THM_MOVT_ABS	RerrDist 2f6:	601a      	str	r2, [r3, #0]		RerrDistRate = RerrDist - RolderrDist; 2f8:	f240 0300 	movw	r3, #0			2f8: R_ARM_THM_MOVW_ABS_NC	RerrDist 2fc:	f2c0 0300 	movt	r3, #0			2fc: R_ARM_THM_MOVT_ABS	RerrDist 300:	681a      	ldr	r2, [r3, #0] 302:	f240 0300 	movw	r3, #0			302: R_ARM_THM_MOVW_ABS_NC	RolderrDist 306:	f2c0 0300 	movt	r3, #0			306: R_ARM_THM_MOVT_ABS	RolderrDist 30a:	681b      	ldr	r3, [r3, #0] 30c:	1ad2      	subs	r2, r2, r3 30e:	f240 0300 	movw	r3, #0			30e: R_ARM_THM_MOVW_ABS_NC	RerrDistRate 312:	f2c0 0300 	movt	r3, #0			312: R_ARM_THM_MOVT_ABS	RerrDistRate 316:	601a      	str	r2, [r3, #0]	RolderrDist = RerrDist; 318:	f240 0300 	movw	r3, #0			318: R_ARM_THM_MOVW_ABS_NC	RerrDist 31c:	f2c0 0300 	movt	r3, #0			31c: R_ARM_THM_MOVT_ABS	RerrDist 320:	681a      	ldr	r2, [r3, #0] 322:	f240 0300 	movw	r3, #0			322: R_ARM_THM_MOVW_ABS_NC	RolderrDist 326:	f2c0 0300 	movt	r3, #0			326: R_ARM_THM_MOVT_ABS	RolderrDist 32a:	601a      	str	r2, [r3, #0]		RsumErrDist = RsumErrDist + RerrDist; 32c:	f240 0300 	movw	r3, #0			32c: R_ARM_THM_MOVW_ABS_NC	RsumErrDist 330:	f2c0 0300 	movt	r3, #0			330: R_ARM_THM_MOVT_ABS	RsumErrDist 334:	681a      	ldr	r2, [r3, #0] 336:	f240 0300 	movw	r3, #0			336: R_ARM_THM_MOVW_ABS_NC	RerrDist 33a:	f2c0 0300 	movt	r3, #0			33a: R_ARM_THM_MOVT_ABS	RerrDist 33e:	681b      	ldr	r3, [r3, #0] 340:	18d2      	adds	r2, r2, r3 342:	f240 0300 	movw	r3, #0			342: R_ARM_THM_MOVW_ABS_NC	RsumErrDist 346:	f2c0 0300 	movt	r3, #0			346: R_ARM_THM_MOVT_ABS	RsumErrDist 34a:	601a      	str	r2, [r3, #0]		RDistOut = RKp*RerrDist + RKd*RerrDistRate + RKi*RsumErrDist; 34c:	f240 0300 	movw	r3, #0			34c: R_ARM_THM_MOVW_ABS_NC	RKp 350:	f2c0 0300 	movt	r3, #0			350: R_ARM_THM_MOVT_ABS	RKp 354:	881b      	ldrh	r3, [r3, #0] 356:	b29b      	uxth	r3, r3 358:	b21a      	sxth	r2, r3 35a:	f240 0300 	movw	r3, #0			35a: R_ARM_THM_MOVW_ABS_NC	RerrDist 35e:	f2c0 0300 	movt	r3, #0			35e: R_ARM_THM_MOVT_ABS	RerrDist 362:	681b      	ldr	r3, [r3, #0] 364:	fb03 f202 	mul.w	r2, r3, r2 368:	f240 0300 	movw	r3, #0			368: R_ARM_THM_MOVW_ABS_NC	RKd 36c:	f2c0 0300 	movt	r3, #0			36c: R_ARM_THM_MOVT_ABS	RKd 370:	881b      	ldrh	r3, [r3, #0] 372:	b29b      	uxth	r3, r3 374:	b219      	sxth	r1, r3 376:	f240 0300 	movw	r3, #0			376: R_ARM_THM_MOVW_ABS_NC	RerrDistRate 37a:	f2c0 0300 	movt	r3, #0			37a: R_ARM_THM_MOVT_ABS	RerrDistRate 37e:	681b      	ldr	r3, [r3, #0] 380:	fb03 f301 	mul.w	r3, r3, r1 384:	18d2      	adds	r2, r2, r3 386:	f240 0300 	movw	r3, #0			386: R_ARM_THM_MOVW_ABS_NC	RKi 38a:	f2c0 0300 	movt	r3, #0			38a: R_ARM_THM_MOVT_ABS	RKi 38e:	881b      	ldrh	r3, [r3, #0] 390:	b29b      	uxth	r3, r3 392:	b219      	sxth	r1, r3 394:	f240 0300 	movw	r3, #0			394: R_ARM_THM_MOVW_ABS_NC	RsumErrDist 398:	f2c0 0300 	movt	r3, #0			398: R_ARM_THM_MOVT_ABS	RsumErrDist 39c:	681b      	ldr	r3, [r3, #0] 39e:	fb03 f301 	mul.w	r3, r3, r1 3a2:	18d2      	adds	r2, r2, r3 3a4:	f240 0300 	movw	r3, #0			3a4: R_ARM_THM_MOVW_ABS_NC	RDistOut 3a8:	f2c0 0300 	movt	r3, #0			3a8: R_ARM_THM_MOVT_ABS	RDistOut 3ac:	601a      	str	r2, [r3, #0]		if(RDistOut>999) 3ae:	f240 0300 	movw	r3, #0			3ae: R_ARM_THM_MOVW_ABS_NC	RDistOut 3b2:	f2c0 0300 	movt	r3, #0			3b2: R_ARM_THM_MOVT_ABS	RDistOut 3b6:	681a      	ldr	r2, [r3, #0] 3b8:	f240 33e7 	movw	r3, #999	; 0x3e7 3bc:	429a      	cmp	r2, r3 3be:	dd07      	ble.n	3d0 <wheelmotor+0x3d0>	{		RDistOut = 999; 3c0:	f240 0300 	movw	r3, #0			3c0: R_ARM_THM_MOVW_ABS_NC	RDistOut 3c4:	f2c0 0300 	movt	r3, #0			3c4: R_ARM_THM_MOVT_ABS	RDistOut 3c8:	f240 32e7 	movw	r2, #999	; 0x3e7 3cc:	601a      	str	r2, [r3, #0] 3ce:	e013      	b.n	3f8 <wheelmotor+0x3f8>	}	else if (RDistOut<-999) 3d0:	f240 0300 	movw	r3, #0			3d0: R_ARM_THM_MOVW_ABS_NC	RDistOut 3d4:	f2c0 0300 	movt	r3, #0			3d4: R_ARM_THM_MOVT_ABS	RDistOut 3d8:	681a      	ldr	r2, [r3, #0] 3da:	f64f 4319 	movw	r3, #64537	; 0xfc19 3de:	f6cf 73ff 	movt	r3, #65535	; 0xffff 3e2:	429a      	cmp	r2, r3 3e4:	da08      	bge.n	3f8 <wheelmotor+0x3f8>	{		RDistOut = -999; 3e6:	f240 0300 	movw	r3, #0			3e6: R_ARM_THM_MOVW_ABS_NC	RDistOut 3ea:	f2c0 0300 	movt	r3, #0			3ea: R_ARM_THM_MOVT_ABS	RDistOut 3ee:	f64f 4219 	movw	r2, #64537	; 0xfc19 3f2:	f6cf 72ff 	movt	r2, #65535	; 0xffff 3f6:	601a      	str	r2, [r3, #0]	}		if(RDistOut < 0) 3f8:	f240 0300 	movw	r3, #0			3f8: R_ARM_THM_MOVW_ABS_NC	RDistOut 3fc:	f2c0 0300 	movt	r3, #0			3fc: R_ARM_THM_MOVT_ABS	RDistOut 400:	681b      	ldr	r3, [r3, #0] 402:	2b00      	cmp	r3, #0 404:	da1d      	bge.n	442 <wheelmotor+0x442>	{		RDistOut = -RDistOut; 406:	f240 0300 	movw	r3, #0			406: R_ARM_THM_MOVW_ABS_NC	RDistOut 40a:	f2c0 0300 	movt	r3, #0			40a: R_ARM_THM_MOVT_ABS	RDistOut 40e:	681b      	ldr	r3, [r3, #0] 410:	f1c3 0200 	rsb	r2, r3, #0 414:	f240 0300 	movw	r3, #0			414: R_ARM_THM_MOVW_ABS_NC	RDistOut 418:	f2c0 0300 	movt	r3, #0			418: R_ARM_THM_MOVT_ABS	RDistOut 41c:	601a      	str	r2, [r3, #0]		FTM0_C6V = 0; 41e:	f44f 4300 	mov.w	r3, #32768	; 0x8000 422:	f2c4 0303 	movt	r3, #16387	; 0x4003 426:	f04f 0200 	mov.w	r2, #0 42a:	641a      	str	r2, [r3, #64]	; 0x40		FTM0_C7V = RDistOut; 42c:	f44f 4300 	mov.w	r3, #32768	; 0x8000 430:	f2c4 0303 	movt	r3, #16387	; 0x4003 434:	f240 0200 	movw	r2, #0			434: R_ARM_THM_MOVW_ABS_NC	RDistOut 438:	f2c0 0200 	movt	r2, #0			438: R_ARM_THM_MOVT_ABS	RDistOut 43c:	6812      	ldr	r2, [r2, #0] 43e:	649a      	str	r2, [r3, #72]	; 0x48 440:	e010      	b.n	464 <wheelmotor+0x464>	}	else	{		FTM0_C6V = RDistOut; 442:	f44f 4300 	mov.w	r3, #32768	; 0x8000 446:	f2c4 0303 	movt	r3, #16387	; 0x4003 44a:	f240 0200 	movw	r2, #0			44a: R_ARM_THM_MOVW_ABS_NC	RDistOut 44e:	f2c0 0200 	movt	r2, #0			44e: R_ARM_THM_MOVT_ABS	RDistOut 452:	6812      	ldr	r2, [r2, #0] 454:	641a      	str	r2, [r3, #64]	; 0x40		FTM0_C7V =  0; 456:	f44f 4300 	mov.w	r3, #32768	; 0x8000 45a:	f2c4 0303 	movt	r3, #16387	; 0x4003 45e:	f04f 0200 	mov.w	r2, #0 462:	649a      	str	r2, [r3, #72]	; 0x48	}	}// end of wheel motor 464:	46bd      	mov	sp, r7 466:	bc80      	pop	{r7} 468:	4770      	bx	lr 46a:	bf00      	nopDisassembly of section .text.Forward:00000000 <Forward>:void Forward(int distance, int speed){   0:	b480      	push	{r7}   2:	b083      	sub	sp, #12   4:	af00      	add	r7, sp, #0   6:	6078      	str	r0, [r7, #4]   8:	6039      	str	r1, [r7, #0]	if(saveForward == 0)   a:	f240 0300 	movw	r3, #0			a: R_ARM_THM_MOVW_ABS_NC	saveForward   e:	f2c0 0300 	movt	r3, #0			e: R_ARM_THM_MOVT_ABS	saveForward  12:	881b      	ldrh	r3, [r3, #0]  14:	b29b      	uxth	r3, r3  16:	2b00      	cmp	r3, #0  18:	d11a      	bne.n	50 <Forward+0x50>	{		LoldDist = LDist;  1a:	f240 0300 	movw	r3, #0			1a: R_ARM_THM_MOVW_ABS_NC	LDist  1e:	f2c0 0300 	movt	r3, #0			1e: R_ARM_THM_MOVT_ABS	LDist  22:	681a      	ldr	r2, [r3, #0]  24:	f240 0300 	movw	r3, #0			24: R_ARM_THM_MOVW_ABS_NC	LoldDist  28:	f2c0 0300 	movt	r3, #0			28: R_ARM_THM_MOVT_ABS	LoldDist  2c:	601a      	str	r2, [r3, #0]		RoldDist = RDist;  2e:	f240 0300 	movw	r3, #0			2e: R_ARM_THM_MOVW_ABS_NC	RDist  32:	f2c0 0300 	movt	r3, #0			32: R_ARM_THM_MOVT_ABS	RDist  36:	681a      	ldr	r2, [r3, #0]  38:	f240 0300 	movw	r3, #0			38: R_ARM_THM_MOVW_ABS_NC	RoldDist  3c:	f2c0 0300 	movt	r3, #0			3c: R_ARM_THM_MOVT_ABS	RoldDist  40:	601a      	str	r2, [r3, #0]		saveForward = 1;  42:	f240 0300 	movw	r3, #0			42: R_ARM_THM_MOVW_ABS_NC	saveForward  46:	f2c0 0300 	movt	r3, #0			46: R_ARM_THM_MOVT_ABS	saveForward  4a:	f04f 0201 	mov.w	r2, #1  4e:	801a      	strh	r2, [r3, #0]	}		difForwardLeft = LDist - LoldDist;  50:	f240 0300 	movw	r3, #0			50: R_ARM_THM_MOVW_ABS_NC	LDist  54:	f2c0 0300 	movt	r3, #0			54: R_ARM_THM_MOVT_ABS	LDist  58:	681a      	ldr	r2, [r3, #0]  5a:	f240 0300 	movw	r3, #0			5a: R_ARM_THM_MOVW_ABS_NC	LoldDist  5e:	f2c0 0300 	movt	r3, #0			5e: R_ARM_THM_MOVT_ABS	LoldDist  62:	681b      	ldr	r3, [r3, #0]  64:	1ad2      	subs	r2, r2, r3  66:	f240 0300 	movw	r3, #0			66: R_ARM_THM_MOVW_ABS_NC	difForwardLeft  6a:	f2c0 0300 	movt	r3, #0			6a: R_ARM_THM_MOVT_ABS	difForwardLeft  6e:	601a      	str	r2, [r3, #0]	difForwardRight = RDist - RoldDist;  70:	f240 0300 	movw	r3, #0			70: R_ARM_THM_MOVW_ABS_NC	RDist  74:	f2c0 0300 	movt	r3, #0			74: R_ARM_THM_MOVT_ABS	RDist  78:	681a      	ldr	r2, [r3, #0]  7a:	f240 0300 	movw	r3, #0			7a: R_ARM_THM_MOVW_ABS_NC	RoldDist  7e:	f2c0 0300 	movt	r3, #0			7e: R_ARM_THM_MOVT_ABS	RoldDist  82:	681b      	ldr	r3, [r3, #0]  84:	1ad2      	subs	r2, r2, r3  86:	f240 0300 	movw	r3, #0			86: R_ARM_THM_MOVW_ABS_NC	difForwardRight  8a:	f2c0 0300 	movt	r3, #0			8a: R_ARM_THM_MOVT_ABS	difForwardRight  8e:	601a      	str	r2, [r3, #0]				if(LsetDist - LoldDist < (distance*714) || RsetDist - RoldDist > -(distance*714))  90:	f240 0300 	movw	r3, #0			90: R_ARM_THM_MOVW_ABS_NC	LsetDist  94:	f2c0 0300 	movt	r3, #0			94: R_ARM_THM_MOVT_ABS	LsetDist  98:	681a      	ldr	r2, [r3, #0]  9a:	f240 0300 	movw	r3, #0			9a: R_ARM_THM_MOVW_ABS_NC	LoldDist  9e:	f2c0 0300 	movt	r3, #0			9e: R_ARM_THM_MOVT_ABS	LoldDist  a2:	681b      	ldr	r3, [r3, #0]  a4:	1ad2      	subs	r2, r2, r3  a6:	687b      	ldr	r3, [r7, #4]  a8:	f240 21ca 	movw	r1, #714	; 0x2ca  ac:	fb01 f303 	mul.w	r3, r1, r3  b0:	429a      	cmp	r2, r3  b2:	db14      	blt.n	de <Forward+0xde>  b4:	f240 0300 	movw	r3, #0			b4: R_ARM_THM_MOVW_ABS_NC	RsetDist  b8:	f2c0 0300 	movt	r3, #0			b8: R_ARM_THM_MOVT_ABS	RsetDist  bc:	681a      	ldr	r2, [r3, #0]  be:	f240 0300 	movw	r3, #0			be: R_ARM_THM_MOVW_ABS_NC	RoldDist  c2:	f2c0 0300 	movt	r3, #0			c2: R_ARM_THM_MOVT_ABS	RoldDist  c6:	681b      	ldr	r3, [r3, #0]  c8:	1ad2      	subs	r2, r2, r3  ca:	6879      	ldr	r1, [r7, #4]  cc:	f64f 5336 	movw	r3, #64822	; 0xfd36  d0:	f6cf 73ff 	movt	r3, #65535	; 0xffff  d4:	fb03 f301 	mul.w	r3, r3, r1  d8:	429a      	cmp	r2, r3  da:	f340 8133 	ble.w	344 <Forward+0x344>	{       					if(speed > 5)  de:	683b      	ldr	r3, [r7, #0]  e0:	2b05      	cmp	r3, #5  e2:	f340 8115 	ble.w	310 <Forward+0x310>			{				while(x < speed)  e6:	e04b      	b.n	9c <Forward+0x9c>				{					x = x+2;  e8:	f240 0300 	movw	r3, #0			e8: R_ARM_THM_MOVW_ABS_NC	x  ec:	f2c0 0300 	movt	r3, #0			ec: R_ARM_THM_MOVT_ABS	x  f0:	881b      	ldrh	r3, [r3, #0]  f2:	b29b      	uxth	r3, r3  f4:	b29b      	uxth	r3, r3  f6:	f103 0302 	add.w	r3, r3, #2  fa:	b29b      	uxth	r3, r3  fc:	b29a      	uxth	r2, r3  fe:	f240 0300 	movw	r3, #0			fe: R_ARM_THM_MOVW_ABS_NC	x 102:	f2c0 0300 	movt	r3, #0			102: R_ARM_THM_MOVT_ABS	x 106:	801a      	strh	r2, [r3, #0]					for(g = 0 ; g < 5000; g++); 108:	f240 0300 	movw	r3, #0			108: R_ARM_THM_MOVW_ABS_NC	g 10c:	f2c0 0300 	movt	r3, #0			10c: R_ARM_THM_MOVT_ABS	g 110:	f04f 0200 	mov.w	r2, #0 114:	801a      	strh	r2, [r3, #0] 116:	e00d      	b.n	134 <Forward+0x134> 118:	f240 0300 	movw	r3, #0			118: R_ARM_THM_MOVW_ABS_NC	g 11c:	f2c0 0300 	movt	r3, #0			11c: R_ARM_THM_MOVT_ABS	g 120:	881b      	ldrh	r3, [r3, #0] 122:	b29b      	uxth	r3, r3 124:	f103 0301 	add.w	r3, r3, #1 128:	b29a      	uxth	r2, r3 12a:	f240 0300 	movw	r3, #0			12a: R_ARM_THM_MOVW_ABS_NC	g 12e:	f2c0 0300 	movt	r3, #0			12e: R_ARM_THM_MOVT_ABS	g 132:	801a      	strh	r2, [r3, #0] 134:	f240 0300 	movw	r3, #0			134: R_ARM_THM_MOVW_ABS_NC	g 138:	f2c0 0300 	movt	r3, #0			138: R_ARM_THM_MOVT_ABS	g 13c:	881b      	ldrh	r3, [r3, #0] 13e:	b29b      	uxth	r3, r3 140:	b21a      	sxth	r2, r3 142:	f241 3387 	movw	r3, #4999	; 0x1387 146:	429a      	cmp	r2, r3 148:	dde6      	ble.n	118 <Forward+0x118>					LsetSpeed = x; 14a:	f240 0300 	movw	r3, #0			14a: R_ARM_THM_MOVW_ABS_NC	x 14e:	f2c0 0300 	movt	r3, #0			14e: R_ARM_THM_MOVT_ABS	x 152:	881b      	ldrh	r3, [r3, #0] 154:	b29a      	uxth	r2, r3 156:	f240 0300 	movw	r3, #0			156: R_ARM_THM_MOVW_ABS_NC	LsetSpeed 15a:	f2c0 0300 	movt	r3, #0			15a: R_ARM_THM_MOVT_ABS	LsetSpeed 15e:	801a      	strh	r2, [r3, #0]					RsetSpeed = -x; 160:	f240 0300 	movw	r3, #0			160: R_ARM_THM_MOVW_ABS_NC	x 164:	f2c0 0300 	movt	r3, #0			164: R_ARM_THM_MOVT_ABS	x 168:	881b      	ldrh	r3, [r3, #0] 16a:	b29b      	uxth	r3, r3 16c:	b29b      	uxth	r3, r3 16e:	f1c3 0300 	rsb	r3, r3, #0 172:	b29b      	uxth	r3, r3 174:	b29a      	uxth	r2, r3 176:	f240 0300 	movw	r3, #0			176: R_ARM_THM_MOVW_ABS_NC	RsetSpeed 17a:	f2c0 0300 	movt	r3, #0			17a: R_ARM_THM_MOVT_ABS	RsetSpeed 17e:	801a      	strh	r2, [r3, #0]	if(LsetDist - LoldDist < (distance*714) || RsetDist - RoldDist > -(distance*714))	{       					if(speed > 5)			{				while(x < speed) 180:	f240 0300 	movw	r3, #0			180: R_ARM_THM_MOVW_ABS_NC	x 184:	f2c0 0300 	movt	r3, #0			184: R_ARM_THM_MOVT_ABS	x 188:	881b      	ldrh	r3, [r3, #0] 18a:	b29b      	uxth	r3, r3 18c:	b21a      	sxth	r2, r3 18e:	683b      	ldr	r3, [r7, #0] 190:	429a      	cmp	r2, r3 192:	dba9      	blt.n	e8 <Forward+0xe8>					for(g = 0 ; g < 5000; g++);					LsetSpeed = x;					RsetSpeed = -x;									}				LsetSpeed = x; 194:	f240 0300 	movw	r3, #0			194: R_ARM_THM_MOVW_ABS_NC	x 198:	f2c0 0300 	movt	r3, #0			198: R_ARM_THM_MOVT_ABS	x 19c:	881b      	ldrh	r3, [r3, #0] 19e:	b29a      	uxth	r2, r3 1a0:	f240 0300 	movw	r3, #0			1a0: R_ARM_THM_MOVW_ABS_NC	LsetSpeed 1a4:	f2c0 0300 	movt	r3, #0			1a4: R_ARM_THM_MOVT_ABS	LsetSpeed 1a8:	801a      	strh	r2, [r3, #0]				RsetSpeed = -x; 1aa:	f240 0300 	movw	r3, #0			1aa: R_ARM_THM_MOVW_ABS_NC	x 1ae:	f2c0 0300 	movt	r3, #0			1ae: R_ARM_THM_MOVT_ABS	x 1b2:	881b      	ldrh	r3, [r3, #0] 1b4:	b29b      	uxth	r3, r3 1b6:	b29b      	uxth	r3, r3 1b8:	f1c3 0300 	rsb	r3, r3, #0 1bc:	b29b      	uxth	r3, r3 1be:	b29a      	uxth	r2, r3 1c0:	f240 0300 	movw	r3, #0			1c0: R_ARM_THM_MOVW_ABS_NC	RsetSpeed 1c4:	f2c0 0300 	movt	r3, #0			1c4: R_ARM_THM_MOVT_ABS	RsetSpeed 1c8:	801a      	strh	r2, [r3, #0]								if(x > 10) 1ca:	f240 0300 	movw	r3, #0			1ca: R_ARM_THM_MOVW_ABS_NC	x 1ce:	f2c0 0300 	movt	r3, #0			1ce: R_ARM_THM_MOVT_ABS	x 1d2:	881b      	ldrh	r3, [r3, #0] 1d4:	b29b      	uxth	r3, r3 1d6:	b21b      	sxth	r3, r3 1d8:	2b0a      	cmp	r3, #10 1da:	f340 80c9 	ble.w	370 <Forward+0x370>				{									if(LsetDist - LoldDist > ((distance*714)-1500) || RsetDist - RoldDist < -((distance*714)-1500)) 1de:	f240 0300 	movw	r3, #0			1de: R_ARM_THM_MOVW_ABS_NC	LsetDist 1e2:	f2c0 0300 	movt	r3, #0			1e2: R_ARM_THM_MOVT_ABS	LsetDist 1e6:	681a      	ldr	r2, [r3, #0] 1e8:	f240 0300 	movw	r3, #0			1e8: R_ARM_THM_MOVW_ABS_NC	LoldDist 1ec:	f2c0 0300 	movt	r3, #0			1ec: R_ARM_THM_MOVT_ABS	LoldDist 1f0:	681b      	ldr	r3, [r3, #0] 1f2:	1ad2      	subs	r2, r2, r3 1f4:	687b      	ldr	r3, [r7, #4] 1f6:	f240 21ca 	movw	r1, #714	; 0x2ca 1fa:	fb01 f303 	mul.w	r3, r1, r3 1fe:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc 202:	429a      	cmp	r2, r3 204:	dc64      	bgt.n	2d0 <Forward+0x2d0> 206:	f240 0300 	movw	r3, #0			206: R_ARM_THM_MOVW_ABS_NC	RsetDist 20a:	f2c0 0300 	movt	r3, #0			20a: R_ARM_THM_MOVT_ABS	RsetDist 20e:	681a      	ldr	r2, [r3, #0] 210:	f240 0300 	movw	r3, #0			210: R_ARM_THM_MOVW_ABS_NC	RoldDist 214:	f2c0 0300 	movt	r3, #0			214: R_ARM_THM_MOVT_ABS	RoldDist 218:	681b      	ldr	r3, [r3, #0] 21a:	1ad2      	subs	r2, r2, r3 21c:	6879      	ldr	r1, [r7, #4] 21e:	f64f 5336 	movw	r3, #64822	; 0xfd36 222:	f6cf 73ff 	movt	r3, #65535	; 0xffff 226:	fb03 f301 	mul.w	r3, r3, r1 22a:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc 22e:	429a      	cmp	r2, r3 230:	f280 809e 	bge.w	370 <Forward+0x370>									{					while(x>0) 234:	e04c      	b.n	9e <Forward+0x9e>					{						x = x-2; 236:	f240 0300 	movw	r3, #0			236: R_ARM_THM_MOVW_ABS_NC	x 23a:	f2c0 0300 	movt	r3, #0			23a: R_ARM_THM_MOVT_ABS	x 23e:	881b      	ldrh	r3, [r3, #0] 240:	b29b      	uxth	r3, r3 242:	b29b      	uxth	r3, r3 244:	f1a3 0302 	sub.w	r3, r3, #2 248:	b29b      	uxth	r3, r3 24a:	b29a      	uxth	r2, r3 24c:	f240 0300 	movw	r3, #0			24c: R_ARM_THM_MOVW_ABS_NC	x 250:	f2c0 0300 	movt	r3, #0			250: R_ARM_THM_MOVT_ABS	x 254:	801a      	strh	r2, [r3, #0]						for(g = 0 ; g < 5000; g++); 256:	f240 0300 	movw	r3, #0			256: R_ARM_THM_MOVW_ABS_NC	g 25a:	f2c0 0300 	movt	r3, #0			25a: R_ARM_THM_MOVT_ABS	g 25e:	f04f 0200 	mov.w	r2, #0 262:	801a      	strh	r2, [r3, #0] 264:	e00d      	b.n	282 <Forward+0x282> 266:	f240 0300 	movw	r3, #0			266: R_ARM_THM_MOVW_ABS_NC	g 26a:	f2c0 0300 	movt	r3, #0			26a: R_ARM_THM_MOVT_ABS	g 26e:	881b      	ldrh	r3, [r3, #0] 270:	b29b      	uxth	r3, r3 272:	f103 0301 	add.w	r3, r3, #1 276:	b29a      	uxth	r2, r3 278:	f240 0300 	movw	r3, #0			278: R_ARM_THM_MOVW_ABS_NC	g 27c:	f2c0 0300 	movt	r3, #0			27c: R_ARM_THM_MOVT_ABS	g 280:	801a      	strh	r2, [r3, #0] 282:	f240 0300 	movw	r3, #0			282: R_ARM_THM_MOVW_ABS_NC	g 286:	f2c0 0300 	movt	r3, #0			286: R_ARM_THM_MOVT_ABS	g 28a:	881b      	ldrh	r3, [r3, #0] 28c:	b29b      	uxth	r3, r3 28e:	b21a      	sxth	r2, r3 290:	f241 3387 	movw	r3, #4999	; 0x1387 294:	429a      	cmp	r2, r3 296:	dde6      	ble.n	266 <Forward+0x266>					    LsetSpeed = x; 298:	f240 0300 	movw	r3, #0			298: R_ARM_THM_MOVW_ABS_NC	x 29c:	f2c0 0300 	movt	r3, #0			29c: R_ARM_THM_MOVT_ABS	x 2a0:	881b      	ldrh	r3, [r3, #0] 2a2:	b29a      	uxth	r2, r3 2a4:	f240 0300 	movw	r3, #0			2a4: R_ARM_THM_MOVW_ABS_NC	LsetSpeed 2a8:	f2c0 0300 	movt	r3, #0			2a8: R_ARM_THM_MOVT_ABS	LsetSpeed 2ac:	801a      	strh	r2, [r3, #0]						RsetSpeed = -x; 2ae:	f240 0300 	movw	r3, #0			2ae: R_ARM_THM_MOVW_ABS_NC	x 2b2:	f2c0 0300 	movt	r3, #0			2b2: R_ARM_THM_MOVT_ABS	x 2b6:	881b      	ldrh	r3, [r3, #0] 2b8:	b29b      	uxth	r3, r3 2ba:	b29b      	uxth	r3, r3 2bc:	f1c3 0300 	rsb	r3, r3, #0 2c0:	b29b      	uxth	r3, r3 2c2:	b29a      	uxth	r2, r3 2c4:	f240 0300 	movw	r3, #0			2c4: R_ARM_THM_MOVW_ABS_NC	RsetSpeed 2c8:	f2c0 0300 	movt	r3, #0			2c8: R_ARM_THM_MOVT_ABS	RsetSpeed 2cc:	801a      	strh	r2, [r3, #0] 2ce:	e000      	b.n	2d2 <Forward+0x2d2>				{									if(LsetDist - LoldDist > ((distance*714)-1500) || RsetDist - RoldDist < -((distance*714)-1500))									{					while(x>0) 2d0:	bf00      	nop 2d2:	f240 0300 	movw	r3, #0			2d2: R_ARM_THM_MOVW_ABS_NC	x 2d6:	f2c0 0300 	movt	r3, #0			2d6: R_ARM_THM_MOVT_ABS	x 2da:	881b      	ldrh	r3, [r3, #0] 2dc:	b29b      	uxth	r3, r3 2de:	b21b      	sxth	r3, r3 2e0:	2b00      	cmp	r3, #0 2e2:	dca8      	bgt.n	236 <Forward+0x236>						for(g = 0 ; g < 5000; g++);					    LsetSpeed = x;						RsetSpeed = -x;					}										LsetSpeed = 0; 2e4:	f240 0300 	movw	r3, #0			2e4: R_ARM_THM_MOVW_ABS_NC	LsetSpeed 2e8:	f2c0 0300 	movt	r3, #0			2e8: R_ARM_THM_MOVT_ABS	LsetSpeed 2ec:	f04f 0200 	mov.w	r2, #0 2f0:	801a      	strh	r2, [r3, #0]					RsetSpeed = 0; 2f2:	f240 0300 	movw	r3, #0			2f2: R_ARM_THM_MOVW_ABS_NC	RsetSpeed 2f6:	f2c0 0300 	movt	r3, #0			2f6: R_ARM_THM_MOVT_ABS	RsetSpeed 2fa:	f04f 0200 	mov.w	r2, #0 2fe:	801a      	strh	r2, [r3, #0]					fin1 = 1; 300:	f240 0300 	movw	r3, #0			300: R_ARM_THM_MOVW_ABS_NC	fin1 304:	f2c0 0300 	movt	r3, #0			304: R_ARM_THM_MOVT_ABS	fin1 308:	f04f 0201 	mov.w	r2, #1 30c:	801a      	strh	r2, [r3, #0]			if(LsetDist - LoldDist < (distance*714) || RsetDist - RoldDist > -(distance*714))	{       					if(speed > 5) 30e:	e02f      	b.n	370 <Forward+0x370>					}				}					}			else {				LsetSpeed = speed; 310:	683b      	ldr	r3, [r7, #0] 312:	b29a      	uxth	r2, r3 314:	f240 0300 	movw	r3, #0			314: R_ARM_THM_MOVW_ABS_NC	LsetSpeed 318:	f2c0 0300 	movt	r3, #0			318: R_ARM_THM_MOVT_ABS	LsetSpeed 31c:	801a      	strh	r2, [r3, #0]				RsetSpeed = -speed; 31e:	683b      	ldr	r3, [r7, #0] 320:	b29b      	uxth	r3, r3 322:	f1c3 0300 	rsb	r3, r3, #0 326:	b29b      	uxth	r3, r3 328:	b29a      	uxth	r2, r3 32a:	f240 0300 	movw	r3, #0			32a: R_ARM_THM_MOVW_ABS_NC	RsetSpeed 32e:	f2c0 0300 	movt	r3, #0			32e: R_ARM_THM_MOVT_ABS	RsetSpeed 332:	801a      	strh	r2, [r3, #0]				fin1 = 1; 334:	f240 0300 	movw	r3, #0			334: R_ARM_THM_MOVW_ABS_NC	fin1 338:	f2c0 0300 	movt	r3, #0			338: R_ARM_THM_MOVT_ABS	fin1 33c:	f04f 0201 	mov.w	r2, #1 340:	801a      	strh	r2, [r3, #0]			if(LsetDist - LoldDist < (distance*714) || RsetDist - RoldDist > -(distance*714))	{       					if(speed > 5) 342:	e015      	b.n	370 <Forward+0x370>							}	else 			{				LsetSpeed = 0; 344:	f240 0300 	movw	r3, #0			344: R_ARM_THM_MOVW_ABS_NC	LsetSpeed 348:	f2c0 0300 	movt	r3, #0			348: R_ARM_THM_MOVT_ABS	LsetSpeed 34c:	f04f 0200 	mov.w	r2, #0 350:	801a      	strh	r2, [r3, #0]				RsetSpeed = 0; 352:	f240 0300 	movw	r3, #0			352: R_ARM_THM_MOVW_ABS_NC	RsetSpeed 356:	f2c0 0300 	movt	r3, #0			356: R_ARM_THM_MOVT_ABS	RsetSpeed 35a:	f04f 0200 	mov.w	r2, #0 35e:	801a      	strh	r2, [r3, #0]				fin1 = 1; 360:	f240 0300 	movw	r3, #0			360: R_ARM_THM_MOVW_ABS_NC	fin1 364:	f2c0 0300 	movt	r3, #0			364: R_ARM_THM_MOVT_ABS	fin1 368:	f04f 0201 	mov.w	r2, #1 36c:	801a      	strh	r2, [r3, #0] 36e:	e000      	b.n	372 <Forward+0x372>			if(LsetDist - LoldDist < (distance*714) || RsetDist - RoldDist > -(distance*714))	{       					if(speed > 5) 370:	bf00      	nop	}			} 372:	f107 070c 	add.w	r7, r7, #12 376:	46bd      	mov	sp, r7 378:	bc80      	pop	{r7} 37a:	4770      	bx	lrDisassembly of section .text.BackWard:00000000 <BackWard>:void BackWard(int distance, int speed){   0:	b480      	push	{r7}   2:	b083      	sub	sp, #12   4:	af00      	add	r7, sp, #0   6:	6078      	str	r0, [r7, #4]   8:	6039      	str	r1, [r7, #0]		if(saveBackward == 0)   a:	f240 0300 	movw	r3, #0			a: R_ARM_THM_MOVW_ABS_NC	saveBackward   e:	f2c0 0300 	movt	r3, #0			e: R_ARM_THM_MOVT_ABS	saveBackward  12:	881b      	ldrh	r3, [r3, #0]  14:	b29b      	uxth	r3, r3  16:	2b00      	cmp	r3, #0  18:	d11a      	bne.n	50 <BackWard+0x50>		{			LoldDist = LDist;  1a:	f240 0300 	movw	r3, #0			1a: R_ARM_THM_MOVW_ABS_NC	LDist  1e:	f2c0 0300 	movt	r3, #0			1e: R_ARM_THM_MOVT_ABS	LDist  22:	681a      	ldr	r2, [r3, #0]  24:	f240 0300 	movw	r3, #0			24: R_ARM_THM_MOVW_ABS_NC	LoldDist  28:	f2c0 0300 	movt	r3, #0			28: R_ARM_THM_MOVT_ABS	LoldDist  2c:	601a      	str	r2, [r3, #0]			RoldDist = RDist;  2e:	f240 0300 	movw	r3, #0			2e: R_ARM_THM_MOVW_ABS_NC	RDist  32:	f2c0 0300 	movt	r3, #0			32: R_ARM_THM_MOVT_ABS	RDist  36:	681a      	ldr	r2, [r3, #0]  38:	f240 0300 	movw	r3, #0			38: R_ARM_THM_MOVW_ABS_NC	RoldDist  3c:	f2c0 0300 	movt	r3, #0			3c: R_ARM_THM_MOVT_ABS	RoldDist  40:	601a      	str	r2, [r3, #0]			saveBackward = 1;  42:	f240 0300 	movw	r3, #0			42: R_ARM_THM_MOVW_ABS_NC	saveBackward  46:	f2c0 0300 	movt	r3, #0			46: R_ARM_THM_MOVT_ABS	saveBackward  4a:	f04f 0201 	mov.w	r2, #1  4e:	801a      	strh	r2, [r3, #0]		}				difBackwardLeft = LDist - LoldDist;  50:	f240 0300 	movw	r3, #0			50: R_ARM_THM_MOVW_ABS_NC	LDist  54:	f2c0 0300 	movt	r3, #0			54: R_ARM_THM_MOVT_ABS	LDist  58:	681a      	ldr	r2, [r3, #0]  5a:	f240 0300 	movw	r3, #0			5a: R_ARM_THM_MOVW_ABS_NC	LoldDist  5e:	f2c0 0300 	movt	r3, #0			5e: R_ARM_THM_MOVT_ABS	LoldDist  62:	681b      	ldr	r3, [r3, #0]  64:	1ad2      	subs	r2, r2, r3  66:	f240 0300 	movw	r3, #0			66: R_ARM_THM_MOVW_ABS_NC	difBackwardLeft  6a:	f2c0 0300 	movt	r3, #0			6a: R_ARM_THM_MOVT_ABS	difBackwardLeft  6e:	601a      	str	r2, [r3, #0]		difBackwardRight = RDist - RoldDist;  70:	f240 0300 	movw	r3, #0			70: R_ARM_THM_MOVW_ABS_NC	RDist  74:	f2c0 0300 	movt	r3, #0			74: R_ARM_THM_MOVT_ABS	RDist  78:	681a      	ldr	r2, [r3, #0]  7a:	f240 0300 	movw	r3, #0			7a: R_ARM_THM_MOVW_ABS_NC	RoldDist  7e:	f2c0 0300 	movt	r3, #0			7e: R_ARM_THM_MOVT_ABS	RoldDist  82:	681b      	ldr	r3, [r3, #0]  84:	1ad2      	subs	r2, r2, r3  86:	f240 0300 	movw	r3, #0			86: R_ARM_THM_MOVW_ABS_NC	difBackwardRight  8a:	f2c0 0300 	movt	r3, #0			8a: R_ARM_THM_MOVT_ABS	difBackwardRight  8e:	601a      	str	r2, [r3, #0]		if(LsetDist - LoldDist > (distance*713) || RsetDist - RoldDist < -(distance*713) )  90:	f240 0300 	movw	r3, #0			90: R_ARM_THM_MOVW_ABS_NC	LsetDist  94:	f2c0 0300 	movt	r3, #0			94: R_ARM_THM_MOVT_ABS	LsetDist  98:	681a      	ldr	r2, [r3, #0]  9a:	f240 0300 	movw	r3, #0			9a: R_ARM_THM_MOVW_ABS_NC	LoldDist  9e:	f2c0 0300 	movt	r3, #0			9e: R_ARM_THM_MOVT_ABS	LoldDist  a2:	681b      	ldr	r3, [r3, #0]  a4:	1ad2      	subs	r2, r2, r3  a6:	687b      	ldr	r3, [r7, #4]  a8:	f240 21c9 	movw	r1, #713	; 0x2c9  ac:	fb01 f303 	mul.w	r3, r1, r3  b0:	429a      	cmp	r2, r3  b2:	dc11      	bgt.n	d8 <BackWard+0xd8>  b4:	f240 0300 	movw	r3, #0			b4: R_ARM_THM_MOVW_ABS_NC	RsetDist  b8:	f2c0 0300 	movt	r3, #0			b8: R_ARM_THM_MOVT_ABS	RsetDist  bc:	681a      	ldr	r2, [r3, #0]  be:	f240 0300 	movw	r3, #0			be: R_ARM_THM_MOVW_ABS_NC	RoldDist  c2:	f2c0 0300 	movt	r3, #0			c2: R_ARM_THM_MOVT_ABS	RoldDist  c6:	681b      	ldr	r3, [r3, #0]  c8:	1ad2      	subs	r2, r2, r3  ca:	687b      	ldr	r3, [r7, #4]  cc:	f46f 7132 	mvn.w	r1, #712	; 0x2c8  d0:	fb01 f303 	mul.w	r3, r1, r3  d4:	429a      	cmp	r2, r3  d6:	da12      	bge.n	fe <BackWard+0xfe>	{       						LsetSpeed = -speed;  d8:	683b      	ldr	r3, [r7, #0]  da:	b29b      	uxth	r3, r3  dc:	f1c3 0300 	rsb	r3, r3, #0  e0:	b29b      	uxth	r3, r3  e2:	b29a      	uxth	r2, r3  e4:	f240 0300 	movw	r3, #0			e4: R_ARM_THM_MOVW_ABS_NC	LsetSpeed  e8:	f2c0 0300 	movt	r3, #0			e8: R_ARM_THM_MOVT_ABS	LsetSpeed  ec:	801a      	strh	r2, [r3, #0]				RsetSpeed =  speed;  ee:	683b      	ldr	r3, [r7, #0]  f0:	b29a      	uxth	r2, r3  f2:	f240 0300 	movw	r3, #0			f2: R_ARM_THM_MOVW_ABS_NC	RsetSpeed  f6:	f2c0 0300 	movt	r3, #0			f6: R_ARM_THM_MOVT_ABS	RsetSpeed  fa:	801a      	strh	r2, [r3, #0]  fc:	e014      	b.n	128 <BackWard+0x128>					}	else 	{				LsetSpeed = 0;  fe:	f240 0300 	movw	r3, #0			fe: R_ARM_THM_MOVW_ABS_NC	LsetSpeed 102:	f2c0 0300 	movt	r3, #0			102: R_ARM_THM_MOVT_ABS	LsetSpeed 106:	f04f 0200 	mov.w	r2, #0 10a:	801a      	strh	r2, [r3, #0]				RsetSpeed = 0; 10c:	f240 0300 	movw	r3, #0			10c: R_ARM_THM_MOVW_ABS_NC	RsetSpeed 110:	f2c0 0300 	movt	r3, #0			110: R_ARM_THM_MOVT_ABS	RsetSpeed 114:	f04f 0200 	mov.w	r2, #0 118:	801a      	strh	r2, [r3, #0]				fin2 = 1; 11a:	f240 0300 	movw	r3, #0			11a: R_ARM_THM_MOVW_ABS_NC	fin2 11e:	f2c0 0300 	movt	r3, #0			11e: R_ARM_THM_MOVT_ABS	fin2 122:	f04f 0201 	mov.w	r2, #1 126:	801a      	strh	r2, [r3, #0]					}} 128:	f107 070c 	add.w	r7, r7, #12 12c:	46bd      	mov	sp, r7 12e:	bc80      	pop	{r7} 130:	4770      	bx	lr 132:	bf00      	nopDisassembly of section .text.goForWard:00000000 <goForWard>:	void goForWard(void)	{   0:	b480      	push	{r7}   2:	af00      	add	r7, sp, #0			LsetSpeed = 10;   4:	f240 0300 	movw	r3, #0			4: R_ARM_THM_MOVW_ABS_NC	LsetSpeed   8:	f2c0 0300 	movt	r3, #0			8: R_ARM_THM_MOVT_ABS	LsetSpeed   c:	f04f 020a 	mov.w	r2, #10  10:	801a      	strh	r2, [r3, #0]		    RsetSpeed = -10;  12:	f240 0300 	movw	r3, #0			12: R_ARM_THM_MOVW_ABS_NC	RsetSpeed  16:	f2c0 0300 	movt	r3, #0			16: R_ARM_THM_MOVT_ABS	RsetSpeed  1a:	f64f 72f6 	movw	r2, #65526	; 0xfff6  1e:	801a      	strh	r2, [r3, #0]		    	}  20:	46bd      	mov	sp, r7  22:	bc80      	pop	{r7}  24:	4770      	bx	lr  26:	bf00      	nopDisassembly of section .text.goBackWard:00000000 <goBackWard>:	void goBackWard(void)	{   0:	b480      	push	{r7}   2:	af00      	add	r7, sp, #0		LsetSpeed = -10;   4:	f240 0300 	movw	r3, #0			4: R_ARM_THM_MOVW_ABS_NC	LsetSpeed   8:	f2c0 0300 	movt	r3, #0			8: R_ARM_THM_MOVT_ABS	LsetSpeed   c:	f64f 72f6 	movw	r2, #65526	; 0xfff6  10:	801a      	strh	r2, [r3, #0]		RsetSpeed = 10;  12:	f240 0300 	movw	r3, #0			12: R_ARM_THM_MOVW_ABS_NC	RsetSpeed  16:	f2c0 0300 	movt	r3, #0			16: R_ARM_THM_MOVT_ABS	RsetSpeed  1a:	f04f 020a 	mov.w	r2, #10  1e:	801a      	strh	r2, [r3, #0]	}  20:	46bd      	mov	sp, r7  22:	bc80      	pop	{r7}  24:	4770      	bx	lr  26:	bf00      	nopDisassembly of section .text.stop:00000000 <stop>:	void stop(void)	{   0:	b480      	push	{r7}   2:	af00      	add	r7, sp, #0		LsetSpeed = 0;   4:	f240 0300 	movw	r3, #0			4: R_ARM_THM_MOVW_ABS_NC	LsetSpeed   8:	f2c0 0300 	movt	r3, #0			8: R_ARM_THM_MOVT_ABS	LsetSpeed   c:	f04f 0200 	mov.w	r2, #0  10:	801a      	strh	r2, [r3, #0]		RsetSpeed = 0;  12:	f240 0300 	movw	r3, #0			12: R_ARM_THM_MOVW_ABS_NC	RsetSpeed  16:	f2c0 0300 	movt	r3, #0			16: R_ARM_THM_MOVT_ABS	RsetSpeed  1a:	f04f 0200 	mov.w	r2, #0  1e:	801a      	strh	r2, [r3, #0]	}  20:	46bd      	mov	sp, r7  22:	bc80      	pop	{r7}  24:	4770      	bx	lr  26:	bf00      	nopDisassembly of section .text.LnsSensor:00000000 <LnsSensor>:			void LnsSensor(void){   0:	b480      	push	{r7}   2:	af00      	add	r7, sp, #0	ADC1_CFG2 = ADC1_CFG2 | 0x010; // select multiplexer b   4:	f44f 4330 	mov.w	r3, #45056	; 0xb000   8:	f2c4 030b 	movt	r3, #16395	; 0x400b   c:	f44f 4230 	mov.w	r2, #45056	; 0xb000  10:	f2c4 020b 	movt	r2, #16395	; 0x400b  14:	68d2      	ldr	r2, [r2, #12]  16:	f042 0210 	orr.w	r2, r2, #16  1a:	60da      	str	r2, [r3, #12]		//Ambient reading for front line sensor	scADC1_SE6;  1c:	f44f 4330 	mov.w	r3, #45056	; 0xb000  20:	f2c4 030b 	movt	r3, #16395	; 0x400b  24:	f04f 0206 	mov.w	r2, #6  28:	601a      	str	r2, [r3, #0]	while (ADC1_COCO != 1);  2a:	bf00      	nop  2c:	f44f 4330 	mov.w	r3, #45056	; 0xb000  30:	f2c4 030b 	movt	r3, #16395	; 0x400b  34:	681b      	ldr	r3, [r3, #0]  36:	f003 0380 	and.w	r3, r3, #128	; 0x80  3a:	ea4f 13d3 	mov.w	r3, r3, lsr #7  3e:	2b01      	cmp	r3, #1  40:	d1f4      	bne.n	2c <LnsSensor+0x2c>	ambientreading6 = ADC1_RA;  42:	f44f 4330 	mov.w	r3, #45056	; 0xb000  46:	f2c4 030b 	movt	r3, #16395	; 0x400b  4a:	691b      	ldr	r3, [r3, #16]  4c:	b29a      	uxth	r2, r3  4e:	f240 0300 	movw	r3, #0			4e: R_ARM_THM_MOVW_ABS_NC	ambientreading6  52:	f2c0 0300 	movt	r3, #0			52: R_ARM_THM_MOVT_ABS	ambientreading6  56:	801a      	strh	r2, [r3, #0]		scADC1_SE7;  58:	f44f 4330 	mov.w	r3, #45056	; 0xb000  5c:	f2c4 030b 	movt	r3, #16395	; 0x400b  60:	f04f 0207 	mov.w	r2, #7  64:	601a      	str	r2, [r3, #0]	while (ADC1_COCO != 1);  66:	bf00      	nop  68:	f44f 4330 	mov.w	r3, #45056	; 0xb000  6c:	f2c4 030b 	movt	r3, #16395	; 0x400b  70:	681b      	ldr	r3, [r3, #0]  72:	f003 0380 	and.w	r3, r3, #128	; 0x80  76:	ea4f 13d3 	mov.w	r3, r3, lsr #7  7a:	2b01      	cmp	r3, #1  7c:	d1f4      	bne.n	68 <LnsSensor+0x68>	ambientreading7 = ADC1_RA;  7e:	f44f 4330 	mov.w	r3, #45056	; 0xb000  82:	f2c4 030b 	movt	r3, #16395	; 0x400b  86:	691b      	ldr	r3, [r3, #16]  88:	b29a      	uxth	r2, r3  8a:	f240 0300 	movw	r3, #0			8a: R_ARM_THM_MOVW_ABS_NC	ambientreading7  8e:	f2c0 0300 	movt	r3, #0			8e: R_ARM_THM_MOVT_ABS	ambientreading7  92:	801a      	strh	r2, [r3, #0]			scADC1_SE14;  94:	f44f 4330 	mov.w	r3, #45056	; 0xb000  98:	f2c4 030b 	movt	r3, #16395	; 0x400b  9c:	f04f 020e 	mov.w	r2, #14  a0:	601a      	str	r2, [r3, #0]	while (ADC1_COCO != 1);  a2:	bf00      	nop  a4:	f44f 4330 	mov.w	r3, #45056	; 0xb000  a8:	f2c4 030b 	movt	r3, #16395	; 0x400b  ac:	681b      	ldr	r3, [r3, #0]  ae:	f003 0380 	and.w	r3, r3, #128	; 0x80  b2:	ea4f 13d3 	mov.w	r3, r3, lsr #7  b6:	2b01      	cmp	r3, #1  b8:	d1f4      	bne.n	a4 <LnsSensor+0xa4>	ambientreading14 = ADC1_RA;  ba:	f44f 4330 	mov.w	r3, #45056	; 0xb000  be:	f2c4 030b 	movt	r3, #16395	; 0x400b  c2:	691b      	ldr	r3, [r3, #16]  c4:	b29a      	uxth	r2, r3  c6:	f240 0300 	movw	r3, #0			c6: R_ARM_THM_MOVW_ABS_NC	ambientreading14  ca:	f2c0 0300 	movt	r3, #0			ca: R_ARM_THM_MOVT_ABS	ambientreading14  ce:	801a      	strh	r2, [r3, #0]			scADC1_SE15;  d0:	f44f 4330 	mov.w	r3, #45056	; 0xb000  d4:	f2c4 030b 	movt	r3, #16395	; 0x400b  d8:	f04f 020f 	mov.w	r2, #15  dc:	601a      	str	r2, [r3, #0]	while (ADC1_COCO != 1);  de:	bf00      	nop  e0:	f44f 4330 	mov.w	r3, #45056	; 0xb000  e4:	f2c4 030b 	movt	r3, #16395	; 0x400b  e8:	681b      	ldr	r3, [r3, #0]  ea:	f003 0380 	and.w	r3, r3, #128	; 0x80  ee:	ea4f 13d3 	mov.w	r3, r3, lsr #7  f2:	2b01      	cmp	r3, #1  f4:	d1f4      	bne.n	e0 <LnsSensor+0xe0>	ambientreading15 = ADC1_RA;  f6:	f44f 4330 	mov.w	r3, #45056	; 0xb000  fa:	f2c4 030b 	movt	r3, #16395	; 0x400b  fe:	691b      	ldr	r3, [r3, #16] 100:	b29a      	uxth	r2, r3 102:	f240 0300 	movw	r3, #0			102: R_ARM_THM_MOVW_ABS_NC	ambientreading15 106:	f2c0 0300 	movt	r3, #0			106: R_ARM_THM_MOVT_ABS	ambientreading15 10a:	801a      	strh	r2, [r3, #0]		PTC6o = 1; // turn on the transmitter 10c:	f24f 0380 	movw	r3, #61568	; 0xf080 110:	f2c4 030f 	movt	r3, #16399	; 0x400f 114:	681a      	ldr	r2, [r3, #0] 116:	f042 0240 	orr.w	r2, r2, #64	; 0x40 11a:	601a      	str	r2, [r3, #0]		for(delay = 0; delay < 100 ; delay ++); 11c:	f240 0300 	movw	r3, #0			11c: R_ARM_THM_MOVW_ABS_NC	delay 120:	f2c0 0300 	movt	r3, #0			120: R_ARM_THM_MOVT_ABS	delay 124:	f04f 0200 	mov.w	r2, #0 128:	801a      	strh	r2, [r3, #0] 12a:	e00d      	b.n	148 <LnsSensor+0x148> 12c:	f240 0300 	movw	r3, #0			12c: R_ARM_THM_MOVW_ABS_NC	delay 130:	f2c0 0300 	movt	r3, #0			130: R_ARM_THM_MOVT_ABS	delay 134:	881b      	ldrh	r3, [r3, #0] 136:	b29b      	uxth	r3, r3 138:	f103 0301 	add.w	r3, r3, #1 13c:	b29a      	uxth	r2, r3 13e:	f240 0300 	movw	r3, #0			13e: R_ARM_THM_MOVW_ABS_NC	delay 142:	f2c0 0300 	movt	r3, #0			142: R_ARM_THM_MOVT_ABS	delay 146:	801a      	strh	r2, [r3, #0] 148:	f240 0300 	movw	r3, #0			148: R_ARM_THM_MOVW_ABS_NC	delay 14c:	f2c0 0300 	movt	r3, #0			14c: R_ARM_THM_MOVT_ABS	delay 150:	881b      	ldrh	r3, [r3, #0] 152:	b29b      	uxth	r3, r3 154:	b21b      	sxth	r3, r3 156:	2b63      	cmp	r3, #99	; 0x63 158:	dde8      	ble.n	12c <LnsSensor+0x12c>		scADC1_SE6; 15a:	f44f 4330 	mov.w	r3, #45056	; 0xb000 15e:	f2c4 030b 	movt	r3, #16395	; 0x400b 162:	f04f 0206 	mov.w	r2, #6 166:	601a      	str	r2, [r3, #0]	while (ADC1_COCO != 1); 168:	bf00      	nop 16a:	f44f 4330 	mov.w	r3, #45056	; 0xb000 16e:	f2c4 030b 	movt	r3, #16395	; 0x400b 172:	681b      	ldr	r3, [r3, #0] 174:	f003 0380 	and.w	r3, r3, #128	; 0x80 178:	ea4f 13d3 	mov.w	r3, r3, lsr #7 17c:	2b01      	cmp	r3, #1 17e:	d1f4      	bne.n	16a <LnsSensor+0x16a>	mixreading6 = ADC1_RA; 180:	f44f 4330 	mov.w	r3, #45056	; 0xb000 184:	f2c4 030b 	movt	r3, #16395	; 0x400b 188:	691b      	ldr	r3, [r3, #16] 18a:	b29a      	uxth	r2, r3 18c:	f240 0300 	movw	r3, #0			18c: R_ARM_THM_MOVW_ABS_NC	mixreading6 190:	f2c0 0300 	movt	r3, #0			190: R_ARM_THM_MOVT_ABS	mixreading6 194:	801a      	strh	r2, [r3, #0]		scADC1_SE7; 196:	f44f 4330 	mov.w	r3, #45056	; 0xb000 19a:	f2c4 030b 	movt	r3, #16395	; 0x400b 19e:	f04f 0207 	mov.w	r2, #7 1a2:	601a      	str	r2, [r3, #0]	while (ADC1_COCO != 1); 1a4:	bf00      	nop 1a6:	f44f 4330 	mov.w	r3, #45056	; 0xb000 1aa:	f2c4 030b 	movt	r3, #16395	; 0x400b 1ae:	681b      	ldr	r3, [r3, #0] 1b0:	f003 0380 	and.w	r3, r3, #128	; 0x80 1b4:	ea4f 13d3 	mov.w	r3, r3, lsr #7 1b8:	2b01      	cmp	r3, #1 1ba:	d1f4      	bne.n	1a6 <LnsSensor+0x1a6>	mixreading7 = ADC1_RA; 1bc:	f44f 4330 	mov.w	r3, #45056	; 0xb000 1c0:	f2c4 030b 	movt	r3, #16395	; 0x400b 1c4:	691b      	ldr	r3, [r3, #16] 1c6:	b29a      	uxth	r2, r3 1c8:	f240 0300 	movw	r3, #0			1c8: R_ARM_THM_MOVW_ABS_NC	mixreading7 1cc:	f2c0 0300 	movt	r3, #0			1cc: R_ARM_THM_MOVT_ABS	mixreading7 1d0:	801a      	strh	r2, [r3, #0]			scADC1_SE14; 1d2:	f44f 4330 	mov.w	r3, #45056	; 0xb000 1d6:	f2c4 030b 	movt	r3, #16395	; 0x400b 1da:	f04f 020e 	mov.w	r2, #14 1de:	601a      	str	r2, [r3, #0]	while (ADC1_COCO != 1); 1e0:	bf00      	nop 1e2:	f44f 4330 	mov.w	r3, #45056	; 0xb000 1e6:	f2c4 030b 	movt	r3, #16395	; 0x400b 1ea:	681b      	ldr	r3, [r3, #0] 1ec:	f003 0380 	and.w	r3, r3, #128	; 0x80 1f0:	ea4f 13d3 	mov.w	r3, r3, lsr #7 1f4:	2b01      	cmp	r3, #1 1f6:	d1f4      	bne.n	1e2 <LnsSensor+0x1e2>	mixreading14 = ADC1_RA; 1f8:	f44f 4330 	mov.w	r3, #45056	; 0xb000 1fc:	f2c4 030b 	movt	r3, #16395	; 0x400b 200:	691b      	ldr	r3, [r3, #16] 202:	b29a      	uxth	r2, r3 204:	f240 0300 	movw	r3, #0			204: R_ARM_THM_MOVW_ABS_NC	mixreading14 208:	f2c0 0300 	movt	r3, #0			208: R_ARM_THM_MOVT_ABS	mixreading14 20c:	801a      	strh	r2, [r3, #0]			scADC1_SE15; 20e:	f44f 4330 	mov.w	r3, #45056	; 0xb000 212:	f2c4 030b 	movt	r3, #16395	; 0x400b 216:	f04f 020f 	mov.w	r2, #15 21a:	601a      	str	r2, [r3, #0]	while (ADC1_COCO != 1); 21c:	bf00      	nop 21e:	f44f 4330 	mov.w	r3, #45056	; 0xb000 222:	f2c4 030b 	movt	r3, #16395	; 0x400b 226:	681b      	ldr	r3, [r3, #0] 228:	f003 0380 	and.w	r3, r3, #128	; 0x80 22c:	ea4f 13d3 	mov.w	r3, r3, lsr #7 230:	2b01      	cmp	r3, #1 232:	d1f4      	bne.n	21e <LnsSensor+0x21e>	mixreading15 = ADC1_RA; 234:	f44f 4330 	mov.w	r3, #45056	; 0xb000 238:	f2c4 030b 	movt	r3, #16395	; 0x400b 23c:	691b      	ldr	r3, [r3, #16] 23e:	b29a      	uxth	r2, r3 240:	f240 0300 	movw	r3, #0			240: R_ARM_THM_MOVW_ABS_NC	mixreading15 244:	f2c0 0300 	movt	r3, #0			244: R_ARM_THM_MOVT_ABS	mixreading15 248:	801a      	strh	r2, [r3, #0]		PTC6o = 0;// turn off the transmitter 24a:	f24f 0380 	movw	r3, #61568	; 0xf080 24e:	f2c4 030f 	movt	r3, #16399	; 0x400f 252:	681a      	ldr	r2, [r3, #0] 254:	f36f 1286 	bfc	r2, #6, #1 258:	601a      	str	r2, [r3, #0]		clearreadingL1 = mixreading14 - ambientreading14; 25a:	f240 0300 	movw	r3, #0			25a: R_ARM_THM_MOVW_ABS_NC	mixreading14 25e:	f2c0 0300 	movt	r3, #0			25e: R_ARM_THM_MOVT_ABS	mixreading14 262:	881b      	ldrh	r3, [r3, #0] 264:	b29b      	uxth	r3, r3 266:	b29a      	uxth	r2, r3 268:	f240 0300 	movw	r3, #0			268: R_ARM_THM_MOVW_ABS_NC	ambientreading14 26c:	f2c0 0300 	movt	r3, #0			26c: R_ARM_THM_MOVT_ABS	ambientreading14 270:	881b      	ldrh	r3, [r3, #0] 272:	b29b      	uxth	r3, r3 274:	b29b      	uxth	r3, r3 276:	1ad3      	subs	r3, r2, r3 278:	b29b      	uxth	r3, r3 27a:	b29a      	uxth	r2, r3 27c:	f240 0300 	movw	r3, #0			27c: R_ARM_THM_MOVW_ABS_NC	clearreadingL1 280:	f2c0 0300 	movt	r3, #0			280: R_ARM_THM_MOVT_ABS	clearreadingL1 284:	801a      	strh	r2, [r3, #0]	clearreadingL2 = mixreading15 - ambientreading15; 286:	f240 0300 	movw	r3, #0			286: R_ARM_THM_MOVW_ABS_NC	mixreading15 28a:	f2c0 0300 	movt	r3, #0			28a: R_ARM_THM_MOVT_ABS	mixreading15 28e:	881b      	ldrh	r3, [r3, #0] 290:	b29b      	uxth	r3, r3 292:	b29a      	uxth	r2, r3 294:	f240 0300 	movw	r3, #0			294: R_ARM_THM_MOVW_ABS_NC	ambientreading15 298:	f2c0 0300 	movt	r3, #0			298: R_ARM_THM_MOVT_ABS	ambientreading15 29c:	881b      	ldrh	r3, [r3, #0] 29e:	b29b      	uxth	r3, r3 2a0:	b29b      	uxth	r3, r3 2a2:	1ad3      	subs	r3, r2, r3 2a4:	b29b      	uxth	r3, r3 2a6:	b29a      	uxth	r2, r3 2a8:	f240 0300 	movw	r3, #0			2a8: R_ARM_THM_MOVW_ABS_NC	clearreadingL2 2ac:	f2c0 0300 	movt	r3, #0			2ac: R_ARM_THM_MOVT_ABS	clearreadingL2 2b0:	801a      	strh	r2, [r3, #0]	clearreadingR2 = mixreading6 - ambientreading6; 2b2:	f240 0300 	movw	r3, #0			2b2: R_ARM_THM_MOVW_ABS_NC	mixreading6 2b6:	f2c0 0300 	movt	r3, #0			2b6: R_ARM_THM_MOVT_ABS	mixreading6 2ba:	881b      	ldrh	r3, [r3, #0] 2bc:	b29b      	uxth	r3, r3 2be:	b29a      	uxth	r2, r3 2c0:	f240 0300 	movw	r3, #0			2c0: R_ARM_THM_MOVW_ABS_NC	ambientreading6 2c4:	f2c0 0300 	movt	r3, #0			2c4: R_ARM_THM_MOVT_ABS	ambientreading6 2c8:	881b      	ldrh	r3, [r3, #0] 2ca:	b29b      	uxth	r3, r3 2cc:	b29b      	uxth	r3, r3 2ce:	1ad3      	subs	r3, r2, r3 2d0:	b29b      	uxth	r3, r3 2d2:	b29a      	uxth	r2, r3 2d4:	f240 0300 	movw	r3, #0			2d4: R_ARM_THM_MOVW_ABS_NC	clearreadingR2 2d8:	f2c0 0300 	movt	r3, #0			2d8: R_ARM_THM_MOVT_ABS	clearreadingR2 2dc:	801a      	strh	r2, [r3, #0]	clearreadingR1 = mixreading7 - ambientreading7; 2de:	f240 0300 	movw	r3, #0			2de: R_ARM_THM_MOVW_ABS_NC	mixreading7 2e2:	f2c0 0300 	movt	r3, #0			2e2: R_ARM_THM_MOVT_ABS	mixreading7 2e6:	881b      	ldrh	r3, [r3, #0] 2e8:	b29b      	uxth	r3, r3 2ea:	b29a      	uxth	r2, r3 2ec:	f240 0300 	movw	r3, #0			2ec: R_ARM_THM_MOVW_ABS_NC	ambientreading7 2f0:	f2c0 0300 	movt	r3, #0			2f0: R_ARM_THM_MOVT_ABS	ambientreading7 2f4:	881b      	ldrh	r3, [r3, #0] 2f6:	b29b      	uxth	r3, r3 2f8:	b29b      	uxth	r3, r3 2fa:	1ad3      	subs	r3, r2, r3 2fc:	b29b      	uxth	r3, r3 2fe:	b29a      	uxth	r2, r3 300:	f240 0300 	movw	r3, #0			300: R_ARM_THM_MOVW_ABS_NC	clearreadingR1 304:	f2c0 0300 	movt	r3, #0			304: R_ARM_THM_MOVT_ABS	clearreadingR1 308:	801a      	strh	r2, [r3, #0]		for(delay =0; delay < 100 ; delay++); 30a:	f240 0300 	movw	r3, #0			30a: R_ARM_THM_MOVW_ABS_NC	delay 30e:	f2c0 0300 	movt	r3, #0			30e: R_ARM_THM_MOVT_ABS	delay 312:	f04f 0200 	mov.w	r2, #0 316:	801a      	strh	r2, [r3, #0] 318:	e00d      	b.n	336 <LnsSensor+0x336> 31a:	f240 0300 	movw	r3, #0			31a: R_ARM_THM_MOVW_ABS_NC	delay 31e:	f2c0 0300 	movt	r3, #0			31e: R_ARM_THM_MOVT_ABS	delay 322:	881b      	ldrh	r3, [r3, #0] 324:	b29b      	uxth	r3, r3 326:	f103 0301 	add.w	r3, r3, #1 32a:	b29a      	uxth	r2, r3 32c:	f240 0300 	movw	r3, #0			32c: R_ARM_THM_MOVW_ABS_NC	delay 330:	f2c0 0300 	movt	r3, #0			330: R_ARM_THM_MOVT_ABS	delay 334:	801a      	strh	r2, [r3, #0] 336:	f240 0300 	movw	r3, #0			336: R_ARM_THM_MOVW_ABS_NC	delay 33a:	f2c0 0300 	movt	r3, #0			33a: R_ARM_THM_MOVT_ABS	delay 33e:	881b      	ldrh	r3, [r3, #0] 340:	b29b      	uxth	r3, r3 342:	b21b      	sxth	r3, r3 344:	2b63      	cmp	r3, #99	; 0x63 346:	dde8      	ble.n	31a <LnsSensor+0x31a>			ADC1_CFG2 = ADC1_CFG2 & 0xFFEF; //select multiplexer a 348:	f44f 4330 	mov.w	r3, #45056	; 0xb000 34c:	f2c4 030b 	movt	r3, #16395	; 0x400b 350:	f44f 4230 	mov.w	r2, #45056	; 0xb000 354:	f2c4 020b 	movt	r2, #16395	; 0x400b 358:	68d1      	ldr	r1, [r2, #12] 35a:	f64f 72ef 	movw	r2, #65519	; 0xffef 35e:	400a      	ands	r2, r1 360:	60da      	str	r2, [r3, #12]		// ambientreading for the back-line sensor			    scADC1_SE4; 362:	f44f 4330 	mov.w	r3, #45056	; 0xb000 366:	f2c4 030b 	movt	r3, #16395	; 0x400b 36a:	f04f 0204 	mov.w	r2, #4 36e:	601a      	str	r2, [r3, #0]		while (ADC1_COCO != 1); 370:	bf00      	nop 372:	f44f 4330 	mov.w	r3, #45056	; 0xb000 376:	f2c4 030b 	movt	r3, #16395	; 0x400b 37a:	681b      	ldr	r3, [r3, #0] 37c:	f003 0380 	and.w	r3, r3, #128	; 0x80 380:	ea4f 13d3 	mov.w	r3, r3, lsr #7 384:	2b01      	cmp	r3, #1 386:	d1f4      	bne.n	372 <LnsSensor+0x372>		ambientreading4 = ADC1_RA; 388:	f44f 4330 	mov.w	r3, #45056	; 0xb000 38c:	f2c4 030b 	movt	r3, #16395	; 0x400b 390:	691b      	ldr	r3, [r3, #16] 392:	b29a      	uxth	r2, r3 394:	f240 0300 	movw	r3, #0			394: R_ARM_THM_MOVW_ABS_NC	ambientreading4 398:	f2c0 0300 	movt	r3, #0			398: R_ARM_THM_MOVT_ABS	ambientreading4 39c:	801a      	strh	r2, [r3, #0]				scADC1_SE5; 39e:	f44f 4330 	mov.w	r3, #45056	; 0xb000 3a2:	f2c4 030b 	movt	r3, #16395	; 0x400b 3a6:	f04f 0205 	mov.w	r2, #5 3aa:	601a      	str	r2, [r3, #0]		while (ADC1_COCO != 1); 3ac:	bf00      	nop 3ae:	f44f 4330 	mov.w	r3, #45056	; 0xb000 3b2:	f2c4 030b 	movt	r3, #16395	; 0x400b 3b6:	681b      	ldr	r3, [r3, #0] 3b8:	f003 0380 	and.w	r3, r3, #128	; 0x80 3bc:	ea4f 13d3 	mov.w	r3, r3, lsr #7 3c0:	2b01      	cmp	r3, #1 3c2:	d1f4      	bne.n	3ae <LnsSensor+0x3ae>		ambientreading5 = ADC1_RA; 3c4:	f44f 4330 	mov.w	r3, #45056	; 0xb000 3c8:	f2c4 030b 	movt	r3, #16395	; 0x400b 3cc:	691b      	ldr	r3, [r3, #16] 3ce:	b29a      	uxth	r2, r3 3d0:	f240 0300 	movw	r3, #0			3d0: R_ARM_THM_MOVW_ABS_NC	ambientreading5 3d4:	f2c0 0300 	movt	r3, #0			3d4: R_ARM_THM_MOVT_ABS	ambientreading5 3d8:	801a      	strh	r2, [r3, #0]				PTC7o = 1; 3da:	f24f 0380 	movw	r3, #61568	; 0xf080 3de:	f2c4 030f 	movt	r3, #16399	; 0x400f 3e2:	681a      	ldr	r2, [r3, #0] 3e4:	f042 0280 	orr.w	r2, r2, #128	; 0x80 3e8:	601a      	str	r2, [r3, #0]				for (delay = 0; delay< 100; delay++); 3ea:	f240 0300 	movw	r3, #0			3ea: R_ARM_THM_MOVW_ABS_NC	delay 3ee:	f2c0 0300 	movt	r3, #0			3ee: R_ARM_THM_MOVT_ABS	delay 3f2:	f04f 0200 	mov.w	r2, #0 3f6:	801a      	strh	r2, [r3, #0] 3f8:	e00d      	b.n	416 <LnsSensor+0x416> 3fa:	f240 0300 	movw	r3, #0			3fa: R_ARM_THM_MOVW_ABS_NC	delay 3fe:	f2c0 0300 	movt	r3, #0			3fe: R_ARM_THM_MOVT_ABS	delay 402:	881b      	ldrh	r3, [r3, #0] 404:	b29b      	uxth	r3, r3 406:	f103 0301 	add.w	r3, r3, #1 40a:	b29a      	uxth	r2, r3 40c:	f240 0300 	movw	r3, #0			40c: R_ARM_THM_MOVW_ABS_NC	delay 410:	f2c0 0300 	movt	r3, #0			410: R_ARM_THM_MOVT_ABS	delay 414:	801a      	strh	r2, [r3, #0] 416:	f240 0300 	movw	r3, #0			416: R_ARM_THM_MOVW_ABS_NC	delay 41a:	f2c0 0300 	movt	r3, #0			41a: R_ARM_THM_MOVT_ABS	delay 41e:	881b      	ldrh	r3, [r3, #0] 420:	b29b      	uxth	r3, r3 422:	b21b      	sxth	r3, r3 424:	2b63      	cmp	r3, #99	; 0x63 426:	dde8      	ble.n	3fa <LnsSensor+0x3fa>				scADC1_SE4; 428:	f44f 4330 	mov.w	r3, #45056	; 0xb000 42c:	f2c4 030b 	movt	r3, #16395	; 0x400b 430:	f04f 0204 	mov.w	r2, #4 434:	601a      	str	r2, [r3, #0]		while (ADC1_COCO != 1); 436:	bf00      	nop 438:	f44f 4330 	mov.w	r3, #45056	; 0xb000 43c:	f2c4 030b 	movt	r3, #16395	; 0x400b 440:	681b      	ldr	r3, [r3, #0] 442:	f003 0380 	and.w	r3, r3, #128	; 0x80 446:	ea4f 13d3 	mov.w	r3, r3, lsr #7 44a:	2b01      	cmp	r3, #1 44c:	d1f4      	bne.n	438 <LnsSensor+0x438>		mixreading4 = ADC1_RA; 44e:	f44f 4330 	mov.w	r3, #45056	; 0xb000 452:	f2c4 030b 	movt	r3, #16395	; 0x400b 456:	691b      	ldr	r3, [r3, #16] 458:	b29a      	uxth	r2, r3 45a:	f240 0300 	movw	r3, #0			45a: R_ARM_THM_MOVW_ABS_NC	mixreading4 45e:	f2c0 0300 	movt	r3, #0			45e: R_ARM_THM_MOVT_ABS	mixreading4 462:	801a      	strh	r2, [r3, #0]				scADC1_SE5; 464:	f44f 4330 	mov.w	r3, #45056	; 0xb000 468:	f2c4 030b 	movt	r3, #16395	; 0x400b 46c:	f04f 0205 	mov.w	r2, #5 470:	601a      	str	r2, [r3, #0]		while (ADC1_COCO != 1); 472:	bf00      	nop 474:	f44f 4330 	mov.w	r3, #45056	; 0xb000 478:	f2c4 030b 	movt	r3, #16395	; 0x400b 47c:	681b      	ldr	r3, [r3, #0] 47e:	f003 0380 	and.w	r3, r3, #128	; 0x80 482:	ea4f 13d3 	mov.w	r3, r3, lsr #7 486:	2b01      	cmp	r3, #1 488:	d1f4      	bne.n	474 <LnsSensor+0x474>		mixreading5 = ADC1_RA; 48a:	f44f 4330 	mov.w	r3, #45056	; 0xb000 48e:	f2c4 030b 	movt	r3, #16395	; 0x400b 492:	691b      	ldr	r3, [r3, #16] 494:	b29a      	uxth	r2, r3 496:	f240 0300 	movw	r3, #0			496: R_ARM_THM_MOVW_ABS_NC	mixreading5 49a:	f2c0 0300 	movt	r3, #0			49a: R_ARM_THM_MOVT_ABS	mixreading5 49e:	801a      	strh	r2, [r3, #0]				PTC7o = 0; 4a0:	f24f 0380 	movw	r3, #61568	; 0xf080 4a4:	f2c4 030f 	movt	r3, #16399	; 0x400f 4a8:	681a      	ldr	r2, [r3, #0] 4aa:	f36f 12c7 	bfc	r2, #7, #1 4ae:	601a      	str	r2, [r3, #0]				clearreadingLB = mixreading4 - ambientreading4; 4b0:	f240 0300 	movw	r3, #0			4b0: R_ARM_THM_MOVW_ABS_NC	mixreading4 4b4:	f2c0 0300 	movt	r3, #0			4b4: R_ARM_THM_MOVT_ABS	mixreading4 4b8:	881b      	ldrh	r3, [r3, #0] 4ba:	b29b      	uxth	r3, r3 4bc:	b29a      	uxth	r2, r3 4be:	f240 0300 	movw	r3, #0			4be: R_ARM_THM_MOVW_ABS_NC	ambientreading4 4c2:	f2c0 0300 	movt	r3, #0			4c2: R_ARM_THM_MOVT_ABS	ambientreading4 4c6:	881b      	ldrh	r3, [r3, #0] 4c8:	b29b      	uxth	r3, r3 4ca:	b29b      	uxth	r3, r3 4cc:	1ad3      	subs	r3, r2, r3 4ce:	b29b      	uxth	r3, r3 4d0:	b29a      	uxth	r2, r3 4d2:	f240 0300 	movw	r3, #0			4d2: R_ARM_THM_MOVW_ABS_NC	clearreadingLB 4d6:	f2c0 0300 	movt	r3, #0			4d6: R_ARM_THM_MOVT_ABS	clearreadingLB 4da:	801a      	strh	r2, [r3, #0]		clearreadingRB = mixreading5 - ambientreading5; 4dc:	f240 0300 	movw	r3, #0			4dc: R_ARM_THM_MOVW_ABS_NC	mixreading5 4e0:	f2c0 0300 	movt	r3, #0			4e0: R_ARM_THM_MOVT_ABS	mixreading5 4e4:	881b      	ldrh	r3, [r3, #0] 4e6:	b29b      	uxth	r3, r3 4e8:	b29a      	uxth	r2, r3 4ea:	f240 0300 	movw	r3, #0			4ea: R_ARM_THM_MOVW_ABS_NC	ambientreading5 4ee:	f2c0 0300 	movt	r3, #0			4ee: R_ARM_THM_MOVT_ABS	ambientreading5 4f2:	881b      	ldrh	r3, [r3, #0] 4f4:	b29b      	uxth	r3, r3 4f6:	b29b      	uxth	r3, r3 4f8:	1ad3      	subs	r3, r2, r3 4fa:	b29b      	uxth	r3, r3 4fc:	b29a      	uxth	r2, r3 4fe:	f240 0300 	movw	r3, #0			4fe: R_ARM_THM_MOVW_ABS_NC	clearreadingRB 502:	f2c0 0300 	movt	r3, #0			502: R_ARM_THM_MOVT_ABS	clearreadingRB 506:	801a      	strh	r2, [r3, #0]				for (delay = 0; delay < 100; delay++); 508:	f240 0300 	movw	r3, #0			508: R_ARM_THM_MOVW_ABS_NC	delay 50c:	f2c0 0300 	movt	r3, #0			50c: R_ARM_THM_MOVT_ABS	delay 510:	f04f 0200 	mov.w	r2, #0 514:	801a      	strh	r2, [r3, #0] 516:	e00d      	b.n	534 <LnsSensor+0x534> 518:	f240 0300 	movw	r3, #0			518: R_ARM_THM_MOVW_ABS_NC	delay 51c:	f2c0 0300 	movt	r3, #0			51c: R_ARM_THM_MOVT_ABS	delay 520:	881b      	ldrh	r3, [r3, #0] 522:	b29b      	uxth	r3, r3 524:	f103 0301 	add.w	r3, r3, #1 528:	b29a      	uxth	r2, r3 52a:	f240 0300 	movw	r3, #0			52a: R_ARM_THM_MOVW_ABS_NC	delay 52e:	f2c0 0300 	movt	r3, #0			52e: R_ARM_THM_MOVT_ABS	delay 532:	801a      	strh	r2, [r3, #0] 534:	f240 0300 	movw	r3, #0			534: R_ARM_THM_MOVW_ABS_NC	delay 538:	f2c0 0300 	movt	r3, #0			538: R_ARM_THM_MOVT_ABS	delay 53c:	881b      	ldrh	r3, [r3, #0] 53e:	b29b      	uxth	r3, r3 540:	b21b      	sxth	r3, r3 542:	2b63      	cmp	r3, #99	; 0x63 544:	dde8      	ble.n	518 <LnsSensor+0x518>	} 546:	46bd      	mov	sp, r7 548:	bc80      	pop	{r7} 54a:	4770      	bx	lrDisassembly of section .text.rollerMotor:00000000 <rollerMotor>:void rollerMotor(void){   0:	b480      	push	{r7}   2:	af00      	add	r7, sp, #0	}   4:	46bd      	mov	sp, r7   6:	bc80      	pop	{r7}   8:	4770      	bx	lr   a:	bf00      	nopDisassembly of section .text.Systickpwm:00000000 <Systickpwm>:void Systickpwm(void){   0:	4668      	mov	r0, sp   2:	f020 0107 	bic.w	r1, r0, #7   6:	468d      	mov	sp, r1   8:	b589      	push	{r0, r3, r7, lr}   a:	af00      	add	r7, sp, #0	tick++;   c:	f240 0300 	movw	r3, #0			c: R_ARM_THM_MOVW_ABS_NC	tick  10:	f2c0 0300 	movt	r3, #0			10: R_ARM_THM_MOVT_ABS	tick  14:	881b      	ldrh	r3, [r3, #0]  16:	b29b      	uxth	r3, r3  18:	f103 0301 	add.w	r3, r3, #1  1c:	b29a      	uxth	r2, r3  1e:	f240 0300 	movw	r3, #0			1e: R_ARM_THM_MOVW_ABS_NC	tick  22:	f2c0 0300 	movt	r3, #0			22: R_ARM_THM_MOVT_ABS	tick  26:	801a      	strh	r2, [r3, #0]	wheelmotor();  28:	f7ff fffe 	bl	0 <Systickpwm>			28: R_ARM_THM_CALL	wheelmotor	LnsSensor();  2c:	f7ff fffe 	bl	0 <Systickpwm>			2c: R_ARM_THM_CALL	LnsSensor			}  30:	46bd      	mov	sp, r7  32:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}  36:	4685      	mov	sp, r0  38:	4770      	bx	lr  3a:	bf00      	nopDisassembly of section .text.Sensor:00000000 <Sensor>:int Sensor(void){   0:	b480      	push	{r7}   2:	af00      	add	r7, sp, #0	//distCatch =0;    if(clearreadingL1>200 || clearreadingL2 >200 || clearreadingR1 > 200 || clearreadingR2 > 200)   4:	f240 0300 	movw	r3, #0			4: R_ARM_THM_MOVW_ABS_NC	clearreadingL1   8:	f2c0 0300 	movt	r3, #0			8: R_ARM_THM_MOVT_ABS	clearreadingL1   c:	881b      	ldrh	r3, [r3, #0]   e:	b29b      	uxth	r3, r3  10:	b21b      	sxth	r3, r3  12:	2bc8      	cmp	r3, #200	; 0xc8  14:	dc1a      	bgt.n	4c <Sensor+0x4c>  16:	f240 0300 	movw	r3, #0			16: R_ARM_THM_MOVW_ABS_NC	clearreadingL2  1a:	f2c0 0300 	movt	r3, #0			1a: R_ARM_THM_MOVT_ABS	clearreadingL2  1e:	881b      	ldrh	r3, [r3, #0]  20:	b29b      	uxth	r3, r3  22:	b21b      	sxth	r3, r3  24:	2bc8      	cmp	r3, #200	; 0xc8  26:	dc11      	bgt.n	4c <Sensor+0x4c>  28:	f240 0300 	movw	r3, #0			28: R_ARM_THM_MOVW_ABS_NC	clearreadingR1  2c:	f2c0 0300 	movt	r3, #0			2c: R_ARM_THM_MOVT_ABS	clearreadingR1  30:	881b      	ldrh	r3, [r3, #0]  32:	b29b      	uxth	r3, r3  34:	b21b      	sxth	r3, r3  36:	2bc8      	cmp	r3, #200	; 0xc8  38:	dc08      	bgt.n	4c <Sensor+0x4c>  3a:	f240 0300 	movw	r3, #0			3a: R_ARM_THM_MOVW_ABS_NC	clearreadingR2  3e:	f2c0 0300 	movt	r3, #0			3e: R_ARM_THM_MOVT_ABS	clearreadingR2  42:	881b      	ldrh	r3, [r3, #0]  44:	b29b      	uxth	r3, r3  46:	b21b      	sxth	r3, r3  48:	2bc8      	cmp	r3, #200	; 0xc8  4a:	dd02      	ble.n	52 <Sensor+0x52>    {	//distCatch = 1;    	return 1;  4c:	f04f 0301 	mov.w	r3, #1  50:	e001      	b.n	56 <Sensor+0x56>    }    else{    	return 0;  52:	f04f 0300 	mov.w	r3, #0    }}  56:	4618      	mov	r0, r3  58:	46bd      	mov	sp, r7  5a:	bc80      	pop	{r7}  5c:	4770      	bx	lr  5e:	bf00      	nopDisassembly of section .text.goPass:00000000 <goPass>:void goPass(void){   0:	b580      	push	{r7, lr}   2:	af00      	add	r7, sp, #0	//goStraight();	for(delay = 0; delay<900;delay++);   4:	f240 0300 	movw	r3, #0			4: R_ARM_THM_MOVW_ABS_NC	delay   8:	f2c0 0300 	movt	r3, #0			8: R_ARM_THM_MOVT_ABS	delay   c:	f04f 0200 	mov.w	r2, #0  10:	801a      	strh	r2, [r3, #0]  12:	e00d      	b.n	30 <goPass+0x30>  14:	f240 0300 	movw	r3, #0			14: R_ARM_THM_MOVW_ABS_NC	delay  18:	f2c0 0300 	movt	r3, #0			18: R_ARM_THM_MOVT_ABS	delay  1c:	881b      	ldrh	r3, [r3, #0]  1e:	b29b      	uxth	r3, r3  20:	f103 0301 	add.w	r3, r3, #1  24:	b29a      	uxth	r2, r3  26:	f240 0300 	movw	r3, #0			26: R_ARM_THM_MOVW_ABS_NC	delay  2a:	f2c0 0300 	movt	r3, #0			2a: R_ARM_THM_MOVT_ABS	delay  2e:	801a      	strh	r2, [r3, #0]  30:	f240 0300 	movw	r3, #0			30: R_ARM_THM_MOVW_ABS_NC	delay  34:	f2c0 0300 	movt	r3, #0			34: R_ARM_THM_MOVT_ABS	delay  38:	881b      	ldrh	r3, [r3, #0]  3a:	b29b      	uxth	r3, r3  3c:	b21a      	sxth	r2, r3  3e:	f240 3383 	movw	r3, #899	; 0x383  42:	429a      	cmp	r2, r3  44:	dde6      	ble.n	14 <goPass+0x14>	if(Sensor() == 1)  46:	f7ff fffe 	bl	0 <goPass>			46: R_ARM_THM_CALL	Sensor  4a:	4603      	mov	r3, r0  4c:	2b01      	cmp	r3, #1  4e:	d102      	bne.n	56 <goPass+0x56>	{		stop();  50:	f7ff fffe 	bl	0 <goPass>			50: R_ARM_THM_CALL	stop  54:	e001      	b.n	6 <goStraight+0x6>	}	else{		goStraight();  56:	f7ff fffe 	bl	0 <goStraight>			56: R_ARM_THM_CALL	goStraight	}}  5a:	bd80      	pop	{r7, pc}Disassembly of section .text.TurnRight:00000000 <TurnRight>:void TurnRight(int value2, int x2, int y2)	{   0:	b480      	push	{r7}   2:	b085      	sub	sp, #20   4:	af00      	add	r7, sp, #0   6:	60f8      	str	r0, [r7, #12]   8:	60b9      	str	r1, [r7, #8]   a:	607a      	str	r2, [r7, #4]		saveForward = 0;   c:	f240 0300 	movw	r3, #0			c: R_ARM_THM_MOVW_ABS_NC	saveForward  10:	f2c0 0300 	movt	r3, #0			10: R_ARM_THM_MOVT_ABS	saveForward  14:	f04f 0200 	mov.w	r2, #0  18:	801a      	strh	r2, [r3, #0]		saveBackward = 0;  1a:	f240 0300 	movw	r3, #0			1a: R_ARM_THM_MOVW_ABS_NC	saveBackward  1e:	f2c0 0300 	movt	r3, #0			1e: R_ARM_THM_MOVT_ABS	saveBackward  22:	f04f 0200 	mov.w	r2, #0  26:	801a      	strh	r2, [r3, #0]		 if(saveRight == 0)  28:	f240 0300 	movw	r3, #0			28: R_ARM_THM_MOVW_ABS_NC	saveRight  2c:	f2c0 0300 	movt	r3, #0			2c: R_ARM_THM_MOVT_ABS	saveRight  30:	881b      	ldrh	r3, [r3, #0]  32:	b29b      	uxth	r3, r3  34:	2b00      	cmp	r3, #0  36:	d110      	bne.n	5a <TurnRight+0x5a>		 {			 LoldDist = LDist;  38:	f240 0300 	movw	r3, #0			38: R_ARM_THM_MOVW_ABS_NC	LDist  3c:	f2c0 0300 	movt	r3, #0			3c: R_ARM_THM_MOVT_ABS	LDist  40:	681a      	ldr	r2, [r3, #0]  42:	f240 0300 	movw	r3, #0			42: R_ARM_THM_MOVW_ABS_NC	LoldDist  46:	f2c0 0300 	movt	r3, #0			46: R_ARM_THM_MOVT_ABS	LoldDist  4a:	601a      	str	r2, [r3, #0]			 saveRight = 1;  4c:	f240 0300 	movw	r3, #0			4c: R_ARM_THM_MOVW_ABS_NC	saveRight  50:	f2c0 0300 	movt	r3, #0			50: R_ARM_THM_MOVT_ABS	saveRight  54:	f04f 0201 	mov.w	r2, #1  58:	801a      	strh	r2, [r3, #0]		 }		 		 difRight = LDist - LoldDist;  5a:	f240 0300 	movw	r3, #0			5a: R_ARM_THM_MOVW_ABS_NC	LDist  5e:	f2c0 0300 	movt	r3, #0			5e: R_ARM_THM_MOVT_ABS	LDist  62:	681a      	ldr	r2, [r3, #0]  64:	f240 0300 	movw	r3, #0			64: R_ARM_THM_MOVW_ABS_NC	LoldDist  68:	f2c0 0300 	movt	r3, #0			68: R_ARM_THM_MOVT_ABS	LoldDist  6c:	681b      	ldr	r3, [r3, #0]  6e:	1ad2      	subs	r2, r2, r3  70:	f240 0300 	movw	r3, #0			70: R_ARM_THM_MOVW_ABS_NC	difRight  74:	f2c0 0300 	movt	r3, #0			74: R_ARM_THM_MOVT_ABS	difRight  78:	601a      	str	r2, [r3, #0]		 if(difRight < value2)  7a:	f240 0300 	movw	r3, #0			7a: R_ARM_THM_MOVW_ABS_NC	difRight  7e:	f2c0 0300 	movt	r3, #0			7e: R_ARM_THM_MOVT_ABS	difRight  82:	681a      	ldr	r2, [r3, #0]  84:	68fb      	ldr	r3, [r7, #12]  86:	429a      	cmp	r2, r3  88:	da0e      	bge.n	a8 <TurnRight+0xa8>		 {		    LsetSpeed = x2;  8a:	68bb      	ldr	r3, [r7, #8]  8c:	b29a      	uxth	r2, r3  8e:	f240 0300 	movw	r3, #0			8e: R_ARM_THM_MOVW_ABS_NC	LsetSpeed  92:	f2c0 0300 	movt	r3, #0			92: R_ARM_THM_MOVT_ABS	LsetSpeed  96:	801a      	strh	r2, [r3, #0]		 	RsetSpeed = y2;  98:	687b      	ldr	r3, [r7, #4]  9a:	b29a      	uxth	r2, r3  9c:	f240 0300 	movw	r3, #0			9c: R_ARM_THM_MOVW_ABS_NC	RsetSpeed  a0:	f2c0 0300 	movt	r3, #0			a0: R_ARM_THM_MOVT_ABS	RsetSpeed  a4:	801a      	strh	r2, [r3, #0]  a6:	e014      	b.n	d2 <TurnRight+0xd2>		  }	  	  	  		 else		{			LsetSpeed = 0;  a8:	f240 0300 	movw	r3, #0			a8: R_ARM_THM_MOVW_ABS_NC	LsetSpeed  ac:	f2c0 0300 	movt	r3, #0			ac: R_ARM_THM_MOVT_ABS	LsetSpeed  b0:	f04f 0200 	mov.w	r2, #0  b4:	801a      	strh	r2, [r3, #0]			RsetSpeed = 0;  b6:	f240 0300 	movw	r3, #0			b6: R_ARM_THM_MOVW_ABS_NC	RsetSpeed  ba:	f2c0 0300 	movt	r3, #0			ba: R_ARM_THM_MOVT_ABS	RsetSpeed  be:	f04f 0200 	mov.w	r2, #0  c2:	801a      	strh	r2, [r3, #0]			fin3 = 1;  c4:	f240 0300 	movw	r3, #0			c4: R_ARM_THM_MOVW_ABS_NC	fin3  c8:	f2c0 0300 	movt	r3, #0			c8: R_ARM_THM_MOVT_ABS	fin3  cc:	f04f 0201 	mov.w	r2, #1  d0:	801a      	strh	r2, [r3, #0]		}			}	  d2:	f107 0714 	add.w	r7, r7, #20  d6:	46bd      	mov	sp, r7  d8:	bc80      	pop	{r7}  da:	4770      	bx	lrDisassembly of section .text.TurnLeft:00000000 <TurnLeft>:void TurnLeft(int value1 , int x1 , int y1)	{       0:	b480      	push	{r7}   2:	b085      	sub	sp, #20   4:	af00      	add	r7, sp, #0   6:	60f8      	str	r0, [r7, #12]   8:	60b9      	str	r1, [r7, #8]   a:	607a      	str	r2, [r7, #4]		saveForward = 0;   c:	f240 0300 	movw	r3, #0			c: R_ARM_THM_MOVW_ABS_NC	saveForward  10:	f2c0 0300 	movt	r3, #0			10: R_ARM_THM_MOVT_ABS	saveForward  14:	f04f 0200 	mov.w	r2, #0  18:	801a      	strh	r2, [r3, #0]		saveBackward = 0;  1a:	f240 0300 	movw	r3, #0			1a: R_ARM_THM_MOVW_ABS_NC	saveBackward  1e:	f2c0 0300 	movt	r3, #0			1e: R_ARM_THM_MOVT_ABS	saveBackward  22:	f04f 0200 	mov.w	r2, #0  26:	801a      	strh	r2, [r3, #0]	 	 if(saveLeft == 0)  28:	f240 0300 	movw	r3, #0			28: R_ARM_THM_MOVW_ABS_NC	saveLeft  2c:	f2c0 0300 	movt	r3, #0			2c: R_ARM_THM_MOVT_ABS	saveLeft  30:	881b      	ldrh	r3, [r3, #0]  32:	b29b      	uxth	r3, r3  34:	2b00      	cmp	r3, #0  36:	d110      	bne.n	5a <TurnLeft+0x5a>	 	 {	 		 RoldDist = RDist;  38:	f240 0300 	movw	r3, #0			38: R_ARM_THM_MOVW_ABS_NC	RDist  3c:	f2c0 0300 	movt	r3, #0			3c: R_ARM_THM_MOVT_ABS	RDist  40:	681a      	ldr	r2, [r3, #0]  42:	f240 0300 	movw	r3, #0			42: R_ARM_THM_MOVW_ABS_NC	RoldDist  46:	f2c0 0300 	movt	r3, #0			46: R_ARM_THM_MOVT_ABS	RoldDist  4a:	601a      	str	r2, [r3, #0]	 		 saveLeft = 1;  4c:	f240 0300 	movw	r3, #0			4c: R_ARM_THM_MOVW_ABS_NC	saveLeft  50:	f2c0 0300 	movt	r3, #0			50: R_ARM_THM_MOVT_ABS	saveLeft  54:	f04f 0201 	mov.w	r2, #1  58:	801a      	strh	r2, [r3, #0]	 	 }	 	 	 	 difLeft = RDist - RoldDist;  5a:	f240 0300 	movw	r3, #0			5a: R_ARM_THM_MOVW_ABS_NC	RDist  5e:	f2c0 0300 	movt	r3, #0			5e: R_ARM_THM_MOVT_ABS	RDist  62:	681a      	ldr	r2, [r3, #0]  64:	f240 0300 	movw	r3, #0			64: R_ARM_THM_MOVW_ABS_NC	RoldDist  68:	f2c0 0300 	movt	r3, #0			68: R_ARM_THM_MOVT_ABS	RoldDist  6c:	681b      	ldr	r3, [r3, #0]  6e:	1ad2      	subs	r2, r2, r3  70:	f240 0300 	movw	r3, #0			70: R_ARM_THM_MOVW_ABS_NC	difLeft  74:	f2c0 0300 	movt	r3, #0			74: R_ARM_THM_MOVT_ABS	difLeft  78:	601a      	str	r2, [r3, #0]		 if(-difLeft <= value1)  7a:	f240 0300 	movw	r3, #0			7a: R_ARM_THM_MOVW_ABS_NC	difLeft  7e:	f2c0 0300 	movt	r3, #0			7e: R_ARM_THM_MOVT_ABS	difLeft  82:	681b      	ldr	r3, [r3, #0]  84:	f1c3 0200 	rsb	r2, r3, #0  88:	68fb      	ldr	r3, [r7, #12]  8a:	429a      	cmp	r2, r3  8c:	dc0e      	bgt.n	ac <TurnLeft+0xac>		 {		    LsetSpeed = x1;  8e:	68bb      	ldr	r3, [r7, #8]  90:	b29a      	uxth	r2, r3  92:	f240 0300 	movw	r3, #0			92: R_ARM_THM_MOVW_ABS_NC	LsetSpeed  96:	f2c0 0300 	movt	r3, #0			96: R_ARM_THM_MOVT_ABS	LsetSpeed  9a:	801a      	strh	r2, [r3, #0]		 	RsetSpeed = y1;  9c:	687b      	ldr	r3, [r7, #4]  9e:	b29a      	uxth	r2, r3  a0:	f240 0300 	movw	r3, #0			a0: R_ARM_THM_MOVW_ABS_NC	RsetSpeed  a4:	f2c0 0300 	movt	r3, #0			a4: R_ARM_THM_MOVT_ABS	RsetSpeed  a8:	801a      	strh	r2, [r3, #0]  aa:	e014      	b.n	d6 <TurnLeft+0xd6>		  }	  	  	  		 else		{			LsetSpeed = 0;  ac:	f240 0300 	movw	r3, #0			ac: R_ARM_THM_MOVW_ABS_NC	LsetSpeed  b0:	f2c0 0300 	movt	r3, #0			b0: R_ARM_THM_MOVT_ABS	LsetSpeed  b4:	f04f 0200 	mov.w	r2, #0  b8:	801a      	strh	r2, [r3, #0]			RsetSpeed = 0;  ba:	f240 0300 	movw	r3, #0			ba: R_ARM_THM_MOVW_ABS_NC	RsetSpeed  be:	f2c0 0300 	movt	r3, #0			be: R_ARM_THM_MOVT_ABS	RsetSpeed  c2:	f04f 0200 	mov.w	r2, #0  c6:	801a      	strh	r2, [r3, #0]			fin4 = 1;  c8:	f240 0300 	movw	r3, #0			c8: R_ARM_THM_MOVW_ABS_NC	fin4  cc:	f2c0 0300 	movt	r3, #0			cc: R_ARM_THM_MOVT_ABS	fin4  d0:	f04f 0201 	mov.w	r2, #1  d4:	801a      	strh	r2, [r3, #0]					}		 			}  d6:	f107 0714 	add.w	r7, r7, #20  da:	46bd      	mov	sp, r7  dc:	bc80      	pop	{r7}  de:	4770      	bx	lrDisassembly of section .text.Turn:00000000 <Turn>:void Turn(void)// Testing of Wheel{   0:	b480      	push	{r7}   2:	af00      	add	r7, sp, #0	//if(LDist<8000)			//{				if(tick <= 1000)   4:	f240 0300 	movw	r3, #0			4: R_ARM_THM_MOVW_ABS_NC	tick   8:	f2c0 0300 	movt	r3, #0			8: R_ARM_THM_MOVT_ABS	tick   c:	881b      	ldrh	r3, [r3, #0]   e:	b29b      	uxth	r3, r3  10:	b21b      	sxth	r3, r3  12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8  16:	dc34      	bgt.n	6e <Turn+0x6e>				{				LsetSpeed = -tick/50;  18:	f240 0300 	movw	r3, #0			18: R_ARM_THM_MOVW_ABS_NC	tick  1c:	f2c0 0300 	movt	r3, #0			1c: R_ARM_THM_MOVT_ABS	tick  20:	881b      	ldrh	r3, [r3, #0]  22:	b29b      	uxth	r3, r3  24:	b21b      	sxth	r3, r3  26:	f1c3 0200 	rsb	r2, r3, #0  2a:	f248 531f 	movw	r3, #34079	; 0x851f  2e:	f2c5 13eb 	movt	r3, #20971	; 0x51eb  32:	fb83 1302 	smull	r1, r3, r3, r2  36:	ea4f 1123 	mov.w	r1, r3, asr #4  3a:	ea4f 73e2 	mov.w	r3, r2, asr #31  3e:	1acb      	subs	r3, r1, r3  40:	b29a      	uxth	r2, r3  42:	f240 0300 	movw	r3, #0			42: R_ARM_THM_MOVW_ABS_NC	LsetSpeed  46:	f2c0 0300 	movt	r3, #0			46: R_ARM_THM_MOVT_ABS	LsetSpeed  4a:	801a      	strh	r2, [r3, #0]				RsetSpeed = -tick/50;  4c:	f240 0300 	movw	r3, #0			4c: R_ARM_THM_MOVW_ABS_NC	tick  50:	f2c0 0300 	movt	r3, #0			50: R_ARM_THM_MOVT_ABS	tick  54:	881b      	ldrh	r3, [r3, #0]  56:	b29b      	uxth	r3, r3  58:	b21b      	sxth	r3, r3  5a:	f1c3 0200 	rsb	r2, r3, #0  5e:	f248 531f 	movw	r3, #34079	; 0x851f  62:	f2c5 13eb 	movt	r3, #20971	; 0x51eb  66:	fb83 1302 	smull	r1, r3, r3, r2  6a:	ea4f 1123 	mov.w	r1, r3, asr #4  6e:	ea4f 73e2 	mov.w	r3, r2, asr #31  72:	1acb      	subs	r3, r1, r3  74:	b29a      	uxth	r2, r3  76:	f240 0300 	movw	r3, #0			76: R_ARM_THM_MOVW_ABS_NC	RsetSpeed  7a:	f2c0 0300 	movt	r3, #0			7a: R_ARM_THM_MOVT_ABS	RsetSpeed  7e:	801a      	strh	r2, [r3, #0]  80:	e054      	b.n	12c <Turn+0x12c>				}				else				{					LsetSpeed = - 20 + (tick-1000)/50;  82:	f240 0300 	movw	r3, #0			82: R_ARM_THM_MOVW_ABS_NC	tick  86:	f2c0 0300 	movt	r3, #0			86: R_ARM_THM_MOVT_ABS	tick  8a:	881b      	ldrh	r3, [r3, #0]  8c:	b29b      	uxth	r3, r3  8e:	b21b      	sxth	r3, r3  90:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8  94:	f248 531f 	movw	r3, #34079	; 0x851f  98:	f2c5 13eb 	movt	r3, #20971	; 0x51eb  9c:	fb83 1302 	smull	r1, r3, r3, r2  a0:	ea4f 1123 	mov.w	r1, r3, asr #4  a4:	ea4f 73e2 	mov.w	r3, r2, asr #31  a8:	1acb      	subs	r3, r1, r3  aa:	b29b      	uxth	r3, r3  ac:	f1a3 0314 	sub.w	r3, r3, #20  b0:	b29b      	uxth	r3, r3  b2:	b29a      	uxth	r2, r3  b4:	f240 0300 	movw	r3, #0			b4: R_ARM_THM_MOVW_ABS_NC	LsetSpeed  b8:	f2c0 0300 	movt	r3, #0			b8: R_ARM_THM_MOVT_ABS	LsetSpeed  bc:	801a      	strh	r2, [r3, #0]					RsetSpeed = - 20 + (tick-1000)/50;  be:	f240 0300 	movw	r3, #0			be: R_ARM_THM_MOVW_ABS_NC	tick  c2:	f2c0 0300 	movt	r3, #0			c2: R_ARM_THM_MOVT_ABS	tick  c6:	881b      	ldrh	r3, [r3, #0]  c8:	b29b      	uxth	r3, r3  ca:	b21b      	sxth	r3, r3  cc:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8  d0:	f248 531f 	movw	r3, #34079	; 0x851f  d4:	f2c5 13eb 	movt	r3, #20971	; 0x51eb  d8:	fb83 1302 	smull	r1, r3, r3, r2  dc:	ea4f 1123 	mov.w	r1, r3, asr #4  e0:	ea4f 73e2 	mov.w	r3, r2, asr #31  e4:	1acb      	subs	r3, r1, r3  e6:	b29b      	uxth	r3, r3  e8:	f1a3 0314 	sub.w	r3, r3, #20  ec:	b29b      	uxth	r3, r3  ee:	b29a      	uxth	r2, r3  f0:	f240 0300 	movw	r3, #0			f0: R_ARM_THM_MOVW_ABS_NC	RsetSpeed  f4:	f2c0 0300 	movt	r3, #0			f4: R_ARM_THM_MOVT_ABS	RsetSpeed  f8:	801a      	strh	r2, [r3, #0]										if(tick >= 2000)  fa:	f240 0300 	movw	r3, #0			fa: R_ARM_THM_MOVW_ABS_NC	tick  fe:	f2c0 0300 	movt	r3, #0			fe: R_ARM_THM_MOVT_ABS	tick 102:	881b      	ldrh	r3, [r3, #0] 104:	b29b      	uxth	r3, r3 106:	b21a      	sxth	r2, r3 108:	f240 73cf 	movw	r3, #1999	; 0x7cf 10c:	429a      	cmp	r2, r3 10e:	dd0d      	ble.n	12c <Turn+0x12c>					{						LsetSpeed = 0; 110:	f240 0300 	movw	r3, #0			110: R_ARM_THM_MOVW_ABS_NC	LsetSpeed 114:	f2c0 0300 	movt	r3, #0			114: R_ARM_THM_MOVT_ABS	LsetSpeed 118:	f04f 0200 	mov.w	r2, #0 11c:	801a      	strh	r2, [r3, #0]						RsetSpeed = 0; 11e:	f240 0300 	movw	r3, #0			11e: R_ARM_THM_MOVW_ABS_NC	RsetSpeed 122:	f2c0 0300 	movt	r3, #0			122: R_ARM_THM_MOVT_ABS	RsetSpeed 126:	f04f 0200 	mov.w	r2, #0 12a:	801a      	strh	r2, [r3, #0]					}				}			//}} 12c:	46bd      	mov	sp, r7 12e:	bc80      	pop	{r7} 130:	4770      	bx	lr 132:	bf00      	nopDisassembly of section .text.Reset:00000000 <Reset>:void Reset(void){					   0:	b480      	push	{r7}   2:	af00      	add	r7, sp, #0	                 LsetDist = 0;   4:	f240 0300 	movw	r3, #0			4: R_ARM_THM_MOVW_ABS_NC	LsetDist   8:	f2c0 0300 	movt	r3, #0			8: R_ARM_THM_MOVT_ABS	LsetDist   c:	f04f 0200 	mov.w	r2, #0  10:	601a      	str	r2, [r3, #0]				 	 LDist = 0;  12:	f240 0300 	movw	r3, #0			12: R_ARM_THM_MOVW_ABS_NC	LDist  16:	f2c0 0300 	movt	r3, #0			16: R_ARM_THM_MOVT_ABS	LDist  1a:	f04f 0200 	mov.w	r2, #0  1e:	601a      	str	r2, [r3, #0]				 	 RsetDist = 0;  20:	f240 0300 	movw	r3, #0			20: R_ARM_THM_MOVW_ABS_NC	RsetDist  24:	f2c0 0300 	movt	r3, #0			24: R_ARM_THM_MOVT_ABS	RsetDist  28:	f04f 0200 	mov.w	r2, #0  2c:	601a      	str	r2, [r3, #0]				 	 RDist = 0;  2e:	f240 0300 	movw	r3, #0			2e: R_ARM_THM_MOVW_ABS_NC	RDist  32:	f2c0 0300 	movt	r3, #0			32: R_ARM_THM_MOVT_ABS	RDist  36:	f04f 0200 	mov.w	r2, #0  3a:	601a      	str	r2, [r3, #0]				 	 difLeft = 0;  3c:	f240 0300 	movw	r3, #0			3c: R_ARM_THM_MOVW_ABS_NC	difLeft  40:	f2c0 0300 	movt	r3, #0			40: R_ARM_THM_MOVT_ABS	difLeft  44:	f04f 0200 	mov.w	r2, #0  48:	601a      	str	r2, [r3, #0]				 	 difRight = 0;  4a:	f240 0300 	movw	r3, #0			4a: R_ARM_THM_MOVW_ABS_NC	difRight  4e:	f2c0 0300 	movt	r3, #0			4e: R_ARM_THM_MOVT_ABS	difRight  52:	f04f 0200 	mov.w	r2, #0  56:	601a      	str	r2, [r3, #0]				 	 difForwardLeft = 0;  58:	f240 0300 	movw	r3, #0			58: R_ARM_THM_MOVW_ABS_NC	difForwardLeft  5c:	f2c0 0300 	movt	r3, #0			5c: R_ARM_THM_MOVT_ABS	difForwardLeft  60:	f04f 0200 	mov.w	r2, #0  64:	601a      	str	r2, [r3, #0]				 	 difForwardRight = 0;  66:	f240 0300 	movw	r3, #0			66: R_ARM_THM_MOVW_ABS_NC	difForwardRight  6a:	f2c0 0300 	movt	r3, #0			6a: R_ARM_THM_MOVT_ABS	difForwardRight  6e:	f04f 0200 	mov.w	r2, #0  72:	601a      	str	r2, [r3, #0]				 	 difBackwardLeft = 0;  74:	f240 0300 	movw	r3, #0			74: R_ARM_THM_MOVW_ABS_NC	difBackwardLeft  78:	f2c0 0300 	movt	r3, #0			78: R_ARM_THM_MOVT_ABS	difBackwardLeft  7c:	f04f 0200 	mov.w	r2, #0  80:	601a      	str	r2, [r3, #0]				 	 difBackwardRight = 0;  82:	f240 0300 	movw	r3, #0			82: R_ARM_THM_MOVW_ABS_NC	difBackwardRight  86:	f2c0 0300 	movt	r3, #0			86: R_ARM_THM_MOVT_ABS	difBackwardRight  8a:	f04f 0200 	mov.w	r2, #0  8e:	601a      	str	r2, [r3, #0]}  90:	46bd      	mov	sp, r7  92:	bc80      	pop	{r7}  94:	4770      	bx	lr  96:	bf00      	nopDisassembly of section .text.detectPellet:00000000 <detectPellet>:void detectPellet(int cse){   0:	b580      	push	{r7, lr}   2:	b082      	sub	sp, #8   4:	af00      	add	r7, sp, #0   6:	6078      	str	r0, [r7, #4]	  while(cse != 5)   8:	e21b      	b.n	442 <detectPellet+0x442>		    	{			   switch(cse)   a:	687b      	ldr	r3, [r7, #4]   c:	f103 33ff 	add.w	r3, r3, #4294967295  10:	2b04      	cmp	r3, #4  12:	f200 8216 	bhi.w	442 <detectPellet+0x442>  16:	a201      	add	r2, pc, #4	; (adr r2, 1c <detectPellet+0x1c>)  18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]  1c:	00000031 	.word	0x00000031			1c: R_ARM_ABS32	.text.detectPellet  20:	00000151 	.word	0x00000151			20: R_ARM_ABS32	.text.detectPellet  24:	0000019b 	.word	0x0000019b			24: R_ARM_ABS32	.text.detectPellet  28:	00000231 	.word	0x00000231			28: R_ARM_ABS32	.text.detectPellet  2c:	00000405 	.word	0x00000405			2c: R_ARM_ABS32	.text.detectPellet		    				  	  {		    	//case 0: break;		    				  	  	  case 1: countLineThree = 1;  30:	f240 0300 	movw	r3, #0			30: R_ARM_THM_MOVW_ABS_NC	countLineThree  34:	f2c0 0300 	movt	r3, #0			34: R_ARM_THM_MOVT_ABS	countLineThree  38:	f04f 0201 	mov.w	r2, #1  3c:	801a      	strh	r2, [r3, #0]		    				  	  	  	  	  stop();  3e:	f7ff fffe 	bl	0 <detectPellet>			3e: R_ARM_THM_CALL	stop		    				  	  		  	  TurnRight(8000,10,10);  42:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40  46:	f04f 010a 	mov.w	r1, #10  4a:	f04f 020a 	mov.w	r2, #10  4e:	f7ff fffe 	bl	0 <detectPellet>			4e: R_ARM_THM_CALL	TurnRight		    				  	  	  	  	  if(fin3 == 1)  52:	f240 0300 	movw	r3, #0			52: R_ARM_THM_MOVW_ABS_NC	fin3  56:	f2c0 0300 	movt	r3, #0			56: R_ARM_THM_MOVT_ABS	fin3  5a:	881b      	ldrh	r3, [r3, #0]  5c:	b29b      	uxth	r3, r3  5e:	b21b      	sxth	r3, r3  60:	2b01      	cmp	r3, #1  62:	f040 81e9 	bne.w	438 <detectPellet+0x438>		    				  	  	  	  	  {		    				  	  	  	  	  	 while(clearreadingLB < 230 && clearreadingRB <230)  66:	e001      	b.n	6 <detectPellet+0x6>		    							  	  	 {		    							  	  	  	   goBackWard();  68:	f7ff fffe 	bl	0 <detectPellet>			68: R_ARM_THM_CALL	goBackWard		    				  	  	  case 1: countLineThree = 1;		    				  	  	  	  	  stop();		    				  	  		  	  TurnRight(8000,10,10);		    				  	  	  	  	  if(fin3 == 1)		    				  	  	  	  	  {		    				  	  	  	  	  	 while(clearreadingLB < 230 && clearreadingRB <230)  6c:	f240 0300 	movw	r3, #0			6c: R_ARM_THM_MOVW_ABS_NC	clearreadingLB  70:	f2c0 0300 	movt	r3, #0			70: R_ARM_THM_MOVT_ABS	clearreadingLB  74:	881b      	ldrh	r3, [r3, #0]  76:	b29b      	uxth	r3, r3  78:	b21b      	sxth	r3, r3  7a:	2be5      	cmp	r3, #229	; 0xe5  7c:	dc18      	bgt.n	b0 <detectPellet+0xb0>  7e:	f240 0300 	movw	r3, #0			7e: R_ARM_THM_MOVW_ABS_NC	clearreadingRB  82:	f2c0 0300 	movt	r3, #0			82: R_ARM_THM_MOVT_ABS	clearreadingRB  86:	881b      	ldrh	r3, [r3, #0]  88:	b29b      	uxth	r3, r3  8a:	b21b      	sxth	r3, r3  8c:	2be5      	cmp	r3, #229	; 0xe5  8e:	ddeb      	ble.n	68 <detectPellet+0x68>		    							  	  	 {		    							  	  	  	   goBackWard();		    							  	  	 }		    							  	  	 while(clearreadingLB < 240)  90:	e00e      	b.n	b0 <detectPellet+0xb0>		    							  	  	 {		    							  	  	  	  	LsetSpeed = -10;  92:	f240 0300 	movw	r3, #0			92: R_ARM_THM_MOVW_ABS_NC	LsetSpeed  96:	f2c0 0300 	movt	r3, #0			96: R_ARM_THM_MOVT_ABS	LsetSpeed  9a:	f64f 72f6 	movw	r2, #65526	; 0xfff6  9e:	801a      	strh	r2, [r3, #0]		    							  	  	  	  	RsetSpeed = 0;  a0:	f240 0300 	movw	r3, #0			a0: R_ARM_THM_MOVW_ABS_NC	RsetSpeed  a4:	f2c0 0300 	movt	r3, #0			a4: R_ARM_THM_MOVT_ABS	RsetSpeed  a8:	f04f 0200 	mov.w	r2, #0  ac:	801a      	strh	r2, [r3, #0]  ae:	e000      	b.n	b2 <detectPellet+0xb2>		    				  	  	  	  	  {		    				  	  	  	  	  	 while(clearreadingLB < 230 && clearreadingRB <230)		    							  	  	 {		    							  	  	  	   goBackWard();		    							  	  	 }		    							  	  	 while(clearreadingLB < 240)  b0:	bf00      	nop  b2:	f240 0300 	movw	r3, #0			b2: R_ARM_THM_MOVW_ABS_NC	clearreadingLB  b6:	f2c0 0300 	movt	r3, #0			b6: R_ARM_THM_MOVT_ABS	clearreadingLB  ba:	881b      	ldrh	r3, [r3, #0]  bc:	b29b      	uxth	r3, r3  be:	b21b      	sxth	r3, r3  c0:	2bef      	cmp	r3, #239	; 0xef  c2:	dde6      	ble.n	92 <detectPellet+0x92>		    							  	  	 {		    							  	  	  	  	LsetSpeed = -10;		    							  	  	  	  	RsetSpeed = 0;		    							  	  	 }		    							  	  	 while(clearreadingRB <240)  c4:	e00d      	b.n	e2 <detectPellet+0xe2>		    							  	  	 {		    							  	  	  	  	 LsetSpeed = 0;  c6:	f240 0300 	movw	r3, #0			c6: R_ARM_THM_MOVW_ABS_NC	LsetSpeed  ca:	f2c0 0300 	movt	r3, #0			ca: R_ARM_THM_MOVT_ABS	LsetSpeed  ce:	f04f 0200 	mov.w	r2, #0  d2:	801a      	strh	r2, [r3, #0]		    							  	  	  	  	 RsetSpeed = 10;  d4:	f240 0300 	movw	r3, #0			d4: R_ARM_THM_MOVW_ABS_NC	RsetSpeed  d8:	f2c0 0300 	movt	r3, #0			d8: R_ARM_THM_MOVT_ABS	RsetSpeed  dc:	f04f 020a 	mov.w	r2, #10  e0:	801a      	strh	r2, [r3, #0]		    							  	  	 while(clearreadingLB < 240)		    							  	  	 {		    							  	  	  	  	LsetSpeed = -10;		    							  	  	  	  	RsetSpeed = 0;		    							  	  	 }		    							  	  	 while(clearreadingRB <240)  e2:	f240 0300 	movw	r3, #0			e2: R_ARM_THM_MOVW_ABS_NC	clearreadingRB  e6:	f2c0 0300 	movt	r3, #0			e6: R_ARM_THM_MOVT_ABS	clearreadingRB  ea:	881b      	ldrh	r3, [r3, #0]  ec:	b29b      	uxth	r3, r3  ee:	b21b      	sxth	r3, r3  f0:	2bef      	cmp	r3, #239	; 0xef  f2:	dde8      	ble.n	c6 <detectPellet+0xc6>		    							  	  	 {		    							  	  	  	  	 LsetSpeed = 0;		    							  	  	  	  	 RsetSpeed = 10;		    							  	  	 }		    							  	  	  stop();   	  f4:	f7ff fffe 	bl	0 <detectPellet>			f4: R_ARM_THM_CALL	stop		    							  	  	  for(xx = 0; xx < 1000 ; xx++);	  	      f8:	f240 0300 	movw	r3, #0			f8: R_ARM_THM_MOVW_ABS_NC	xx  fc:	f2c0 0300 	movt	r3, #0			fc: R_ARM_THM_MOVT_ABS	xx 100:	f04f 0200 	mov.w	r2, #0 104:	801a      	strh	r2, [r3, #0] 106:	e00d      	b.n	124 <detectPellet+0x124> 108:	f240 0300 	movw	r3, #0			108: R_ARM_THM_MOVW_ABS_NC	xx 10c:	f2c0 0300 	movt	r3, #0			10c: R_ARM_THM_MOVT_ABS	xx 110:	881b      	ldrh	r3, [r3, #0] 112:	b29b      	uxth	r3, r3 114:	f103 0301 	add.w	r3, r3, #1 118:	b29a      	uxth	r2, r3 11a:	f240 0300 	movw	r3, #0			11a: R_ARM_THM_MOVW_ABS_NC	xx 11e:	f2c0 0300 	movt	r3, #0			11e: R_ARM_THM_MOVT_ABS	xx 122:	801a      	strh	r2, [r3, #0] 124:	f240 0300 	movw	r3, #0			124: R_ARM_THM_MOVW_ABS_NC	xx 128:	f2c0 0300 	movt	r3, #0			128: R_ARM_THM_MOVT_ABS	xx 12c:	881b      	ldrh	r3, [r3, #0] 12e:	b29b      	uxth	r3, r3 130:	b21a      	sxth	r2, r3 132:	f240 33e7 	movw	r3, #999	; 0x3e7 136:	429a      	cmp	r2, r3 138:	dde6      	ble.n	108 <detectPellet+0x108>		    				  	  	  	  		  cse = 2; 13a:	f04f 0302 	mov.w	r3, #2 13e:	607b      	str	r3, [r7, #4]		    				  	  	  	  		  fin3 = 0; 140:	f240 0300 	movw	r3, #0			140: R_ARM_THM_MOVW_ABS_NC	fin3 144:	f2c0 0300 	movt	r3, #0			144: R_ARM_THM_MOVT_ABS	fin3 148:	f04f 0200 	mov.w	r2, #0 14c:	801a      	strh	r2, [r3, #0]		    				  	  	  	  	  }		    				  	  	  	  	  break; 14e:	e173      	b.n	438 <detectPellet+0x438>		    				  	  	 case 2: saveRight = 0; 150:	f240 0300 	movw	r3, #0			150: R_ARM_THM_MOVW_ABS_NC	saveRight 154:	f2c0 0300 	movt	r3, #0			154: R_ARM_THM_MOVT_ABS	saveRight 158:	f04f 0200 	mov.w	r2, #0 15c:	801a      	strh	r2, [r3, #0]		    				  	  		 	  	  LsetSpeed = 0;		    				  	  		 	  	  RsetSpeed = -10;		    				  	  		 	 }	    				  	  	 		    				  	  		 	 stop();		    				  	  		 	 */		    				  	  	 	 	 Forward(84,10); 15e:	f04f 0054 	mov.w	r0, #84	; 0x54 162:	f04f 010a 	mov.w	r1, #10 166:	f7ff fffe 	bl	0 <detectPellet>			166: R_ARM_THM_CALL	Forward		    				  	  		 	 //for(xx = 0; xx< 1000 ; xx++);		    				  	  	 	 	 if(fin1 == 1) 16a:	f240 0300 	movw	r3, #0			16a: R_ARM_THM_MOVW_ABS_NC	fin1 16e:	f2c0 0300 	movt	r3, #0			16e: R_ARM_THM_MOVT_ABS	fin1 172:	881b      	ldrh	r3, [r3, #0] 174:	b29b      	uxth	r3, r3 176:	b21b      	sxth	r3, r3 178:	2b01      	cmp	r3, #1 17a:	f040 815f 	bne.w	43c <detectPellet+0x43c>		    				  	  	 	 	 {		    				  	  		  	 cse = 3; 17e:	f04f 0303 	mov.w	r3, #3 182:	607b      	str	r3, [r7, #4]		    				  	  		  	 fin1 = 0; 184:	f240 0300 	movw	r3, #0			184: R_ARM_THM_MOVW_ABS_NC	fin1 188:	f2c0 0300 	movt	r3, #0			188: R_ARM_THM_MOVT_ABS	fin1 18c:	f04f 0200 	mov.w	r2, #0 190:	801a      	strh	r2, [r3, #0]		    				  	  	 	 	 } 		    				  	  		  	 break; 192:	e153      	b.n	43c <detectPellet+0x43c>		    				  	  		  	  	  	  	  		    				  	  	 case 3: while(clearreadingLB < 230 && clearreadingRB <230)		    				  	            {		    				  	                   goBackWard(); 194:	f7ff fffe 	bl	0 <detectPellet>			194: R_ARM_THM_CALL	goBackWard 198:	e000      	b.n	19c <detectPellet+0x19c>		    				  	  		  	 cse = 3;		    				  	  		  	 fin1 = 0;		    				  	  	 	 	 } 		    				  	  		  	 break;		    				  	  		  	  	  	  	  		    				  	  	 case 3: while(clearreadingLB < 230 && clearreadingRB <230) 19a:	bf00      	nop 19c:	f240 0300 	movw	r3, #0			19c: R_ARM_THM_MOVW_ABS_NC	clearreadingLB 1a0:	f2c0 0300 	movt	r3, #0			1a0: R_ARM_THM_MOVT_ABS	clearreadingLB 1a4:	881b      	ldrh	r3, [r3, #0] 1a6:	b29b      	uxth	r3, r3 1a8:	b21b      	sxth	r3, r3 1aa:	2be5      	cmp	r3, #229	; 0xe5 1ac:	dc18      	bgt.n	1e0 <detectPellet+0x1e0> 1ae:	f240 0300 	movw	r3, #0			1ae: R_ARM_THM_MOVW_ABS_NC	clearreadingRB 1b2:	f2c0 0300 	movt	r3, #0			1b2: R_ARM_THM_MOVT_ABS	clearreadingRB 1b6:	881b      	ldrh	r3, [r3, #0] 1b8:	b29b      	uxth	r3, r3 1ba:	b21b      	sxth	r3, r3 1bc:	2be5      	cmp	r3, #229	; 0xe5 1be:	dde9      	ble.n	194 <detectPellet+0x194>		    				  	            {		    				  	                   goBackWard();		    				  	            }		    				  	  	 	 	while(clearreadingLB < 220) 1c0:	e00e      	b.n	1e0 <detectPellet+0x1e0>		    				  	  	 	 	{		    				  	  	 	 		LsetSpeed = -10; 1c2:	f240 0300 	movw	r3, #0			1c2: R_ARM_THM_MOVW_ABS_NC	LsetSpeed 1c6:	f2c0 0300 	movt	r3, #0			1c6: R_ARM_THM_MOVT_ABS	LsetSpeed 1ca:	f64f 72f6 	movw	r2, #65526	; 0xfff6 1ce:	801a      	strh	r2, [r3, #0]		    				  	  	 	 		RsetSpeed = 0; 1d0:	f240 0300 	movw	r3, #0			1d0: R_ARM_THM_MOVW_ABS_NC	RsetSpeed 1d4:	f2c0 0300 	movt	r3, #0			1d4: R_ARM_THM_MOVT_ABS	RsetSpeed 1d8:	f04f 0200 	mov.w	r2, #0 1dc:	801a      	strh	r2, [r3, #0] 1de:	e000      	b.n	1e2 <detectPellet+0x1e2>		    				  	  		  	  	  	  	  		    				  	  	 case 3: while(clearreadingLB < 230 && clearreadingRB <230)		    				  	            {		    				  	                   goBackWard();		    				  	            }		    				  	  	 	 	while(clearreadingLB < 220) 1e0:	bf00      	nop 1e2:	f240 0300 	movw	r3, #0			1e2: R_ARM_THM_MOVW_ABS_NC	clearreadingLB 1e6:	f2c0 0300 	movt	r3, #0			1e6: R_ARM_THM_MOVT_ABS	clearreadingLB 1ea:	881b      	ldrh	r3, [r3, #0] 1ec:	b29b      	uxth	r3, r3 1ee:	b21b      	sxth	r3, r3 1f0:	2bdb      	cmp	r3, #219	; 0xdb 1f2:	dde6      	ble.n	1c2 <detectPellet+0x1c2>		    				  	  	 	 	{		    				  	  	 	 		LsetSpeed = -10;		    				  	  	 	 		RsetSpeed = 0;		    				  	  	 	 	}		    				  	  	 	 	while(clearreadingRB <220) 1f4:	e00d      	b.n	212 <detectPellet+0x212>		    				  	  	 	 	{		    				  	  	 	 		LsetSpeed = 0; 1f6:	f240 0300 	movw	r3, #0			1f6: R_ARM_THM_MOVW_ABS_NC	LsetSpeed 1fa:	f2c0 0300 	movt	r3, #0			1fa: R_ARM_THM_MOVT_ABS	LsetSpeed 1fe:	f04f 0200 	mov.w	r2, #0 202:	801a      	strh	r2, [r3, #0]		    				  	  	 	 		RsetSpeed = 10; 204:	f240 0300 	movw	r3, #0			204: R_ARM_THM_MOVW_ABS_NC	RsetSpeed 208:	f2c0 0300 	movt	r3, #0			208: R_ARM_THM_MOVT_ABS	RsetSpeed 20c:	f04f 020a 	mov.w	r2, #10 210:	801a      	strh	r2, [r3, #0]		    				  	  	 	 	while(clearreadingLB < 220)		    				  	  	 	 	{		    				  	  	 	 		LsetSpeed = -10;		    				  	  	 	 		RsetSpeed = 0;		    				  	  	 	 	}		    				  	  	 	 	while(clearreadingRB <220) 212:	f240 0300 	movw	r3, #0			212: R_ARM_THM_MOVW_ABS_NC	clearreadingRB 216:	f2c0 0300 	movt	r3, #0			216: R_ARM_THM_MOVT_ABS	clearreadingRB 21a:	881b      	ldrh	r3, [r3, #0] 21c:	b29b      	uxth	r3, r3 21e:	b21b      	sxth	r3, r3 220:	2bdb      	cmp	r3, #219	; 0xdb 222:	dde8      	ble.n	1f6 <detectPellet+0x1f6>		    				  	  	 	 	{		    				  	  	 	 		LsetSpeed = 0;		    				  	  	 	 		RsetSpeed = 10;		    				  	  	 	 	}		    				  	  	 	 	stop(); 224:	f7ff fffe 	bl	0 <detectPellet>			224: R_ARM_THM_CALL	stop		    				  	  	 	 	//for(xx = 0; xx < 1000; xx++);		    				  	  		  	cse = 4;   228:	f04f 0304 	mov.w	r3, #4 22c:	607b      	str	r3, [r7, #4]		    				  	  		  	break; 22e:	e108      	b.n	442 <detectPellet+0x442>		    				  	  	 case 4: if(fin4 == 0) 230:	f240 0300 	movw	r3, #0			230: R_ARM_THM_MOVW_ABS_NC	fin4 234:	f2c0 0300 	movt	r3, #0			234: R_ARM_THM_MOVT_ABS	fin4 238:	881b      	ldrh	r3, [r3, #0] 23a:	b29b      	uxth	r3, r3 23c:	2b00      	cmp	r3, #0 23e:	d108      	bne.n	252 <detectPellet+0x252>		    				  	  	 	 	 {		    				  	  		 	 	 TurnLeft(8500,-10,-10); 240:	f242 1034 	movw	r0, #8500	; 0x2134 244:	f06f 0109 	mvn.w	r1, #9 248:	f06f 0209 	mvn.w	r2, #9 24c:	f7ff fffe 	bl	0 <detectPellet>			24c: R_ARM_THM_CALL	TurnLeft		    				  	  	 	 			 cse = 5;		    				  	  	 	 			 fin4 = 0;		    				  	  	 	 			 f5 = 0;		    				  	  	 	 		 }		    				  	  	 	 	 }		    				  	  	 	 	 break; 250:	e0f6      	b.n	1f2 <detectPellet+0x1f2>		    				  	  	 	 	 {		    				  	  		 	 	 TurnLeft(8500,-10,-10);		    				  	  	 	 	 }		    				  	  	 	 	 else		    				  	  	 	 	 {		    				  	  	 	 		 if(clearreadingL1 < 240 && f5 == 0) 252:	f240 0300 	movw	r3, #0			252: R_ARM_THM_MOVW_ABS_NC	clearreadingL1 256:	f2c0 0300 	movt	r3, #0			256: R_ARM_THM_MOVT_ABS	clearreadingL1 25a:	881b      	ldrh	r3, [r3, #0] 25c:	b29b      	uxth	r3, r3 25e:	b21b      	sxth	r3, r3 260:	2bef      	cmp	r3, #239	; 0xef 262:	dc16      	bgt.n	292 <detectPellet+0x292> 264:	f240 0300 	movw	r3, #0			264: R_ARM_THM_MOVW_ABS_NC	f5 268:	f2c0 0300 	movt	r3, #0			268: R_ARM_THM_MOVT_ABS	f5 26c:	881b      	ldrh	r3, [r3, #0] 26e:	b29b      	uxth	r3, r3 270:	2b00      	cmp	r3, #0 272:	d10e      	bne.n	292 <detectPellet+0x292>		    				  	  	 	 		 {		    				  	  	 	 			 LsetSpeed = 10; 274:	f240 0300 	movw	r3, #0			274: R_ARM_THM_MOVW_ABS_NC	LsetSpeed 278:	f2c0 0300 	movt	r3, #0			278: R_ARM_THM_MOVT_ABS	LsetSpeed 27c:	f04f 020a 	mov.w	r2, #10 280:	801a      	strh	r2, [r3, #0]		    				  	  	 	 			 RsetSpeed = 0; 282:	f240 0300 	movw	r3, #0			282: R_ARM_THM_MOVW_ABS_NC	RsetSpeed 286:	f2c0 0300 	movt	r3, #0			286: R_ARM_THM_MOVT_ABS	RsetSpeed 28a:	f04f 0200 	mov.w	r2, #0 28e:	801a      	strh	r2, [r3, #0] 290:	e017      	b.n	2c2 <detectPellet+0x2c2>		    				  	  	 	 		 }else if(clearreadingL1 >= 240 && f5 == 0) 292:	f240 0300 	movw	r3, #0			292: R_ARM_THM_MOVW_ABS_NC	clearreadingL1 296:	f2c0 0300 	movt	r3, #0			296: R_ARM_THM_MOVT_ABS	clearreadingL1 29a:	881b      	ldrh	r3, [r3, #0] 29c:	b29b      	uxth	r3, r3 29e:	b21b      	sxth	r3, r3 2a0:	2bef      	cmp	r3, #239	; 0xef 2a2:	dd0e      	ble.n	2c2 <detectPellet+0x2c2> 2a4:	f240 0300 	movw	r3, #0			2a4: R_ARM_THM_MOVW_ABS_NC	f5 2a8:	f2c0 0300 	movt	r3, #0			2a8: R_ARM_THM_MOVT_ABS	f5 2ac:	881b      	ldrh	r3, [r3, #0] 2ae:	b29b      	uxth	r3, r3 2b0:	2b00      	cmp	r3, #0 2b2:	d106      	bne.n	2c2 <detectPellet+0x2c2>		    				  	  	 	 		 {		    				  	  	 	 			f5 = 2; 2b4:	f240 0300 	movw	r3, #0			2b4: R_ARM_THM_MOVW_ABS_NC	f5 2b8:	f2c0 0300 	movt	r3, #0			2b8: R_ARM_THM_MOVT_ABS	f5 2bc:	f04f 0202 	mov.w	r2, #2 2c0:	801a      	strh	r2, [r3, #0]		    				  	  	 	 		 }		    				  	  	 	 		 if(clearreadingLB < 200 && f5 == 2) 2c2:	f240 0300 	movw	r3, #0			2c2: R_ARM_THM_MOVW_ABS_NC	clearreadingLB 2c6:	f2c0 0300 	movt	r3, #0			2c6: R_ARM_THM_MOVT_ABS	clearreadingLB 2ca:	881b      	ldrh	r3, [r3, #0] 2cc:	b29b      	uxth	r3, r3 2ce:	b21b      	sxth	r3, r3 2d0:	2bc7      	cmp	r3, #199	; 0xc7 2d2:	dc17      	bgt.n	304 <detectPellet+0x304> 2d4:	f240 0300 	movw	r3, #0			2d4: R_ARM_THM_MOVW_ABS_NC	f5 2d8:	f2c0 0300 	movt	r3, #0			2d8: R_ARM_THM_MOVT_ABS	f5 2dc:	881b      	ldrh	r3, [r3, #0] 2de:	b29b      	uxth	r3, r3 2e0:	b21b      	sxth	r3, r3 2e2:	2b02      	cmp	r3, #2 2e4:	d10e      	bne.n	304 <detectPellet+0x304>		    				  	  	 	 		 {		    				  	  	 	 			 LsetSpeed = 5; 2e6:	f240 0300 	movw	r3, #0			2e6: R_ARM_THM_MOVW_ABS_NC	LsetSpeed 2ea:	f2c0 0300 	movt	r3, #0			2ea: R_ARM_THM_MOVT_ABS	LsetSpeed 2ee:	f04f 0205 	mov.w	r2, #5 2f2:	801a      	strh	r2, [r3, #0]		    				  	  	 	 			 RsetSpeed = -5; 2f4:	f240 0300 	movw	r3, #0			2f4: R_ARM_THM_MOVW_ABS_NC	RsetSpeed 2f8:	f2c0 0300 	movt	r3, #0			2f8: R_ARM_THM_MOVT_ABS	RsetSpeed 2fc:	f64f 72fb 	movw	r2, #65531	; 0xfffb 300:	801a      	strh	r2, [r3, #0] 302:	e018      	b.n	336 <detectPellet+0x336>		    				  	  	 	 		 }		    				  	  	 	 		else if (clearreadingLB >= 200 && f5 == 2) 304:	f240 0300 	movw	r3, #0			304: R_ARM_THM_MOVW_ABS_NC	clearreadingLB 308:	f2c0 0300 	movt	r3, #0			308: R_ARM_THM_MOVT_ABS	clearreadingLB 30c:	881b      	ldrh	r3, [r3, #0] 30e:	b29b      	uxth	r3, r3 310:	b21b      	sxth	r3, r3 312:	2bc7      	cmp	r3, #199	; 0xc7 314:	dd0f      	ble.n	336 <detectPellet+0x336> 316:	f240 0300 	movw	r3, #0			316: R_ARM_THM_MOVW_ABS_NC	f5 31a:	f2c0 0300 	movt	r3, #0			31a: R_ARM_THM_MOVT_ABS	f5 31e:	881b      	ldrh	r3, [r3, #0] 320:	b29b      	uxth	r3, r3 322:	b21b      	sxth	r3, r3 324:	2b02      	cmp	r3, #2 326:	d106      	bne.n	336 <detectPellet+0x336>		    				  	  	 	 		{		    				  	  	 	 			f5 = 3; 328:	f240 0300 	movw	r3, #0			328: R_ARM_THM_MOVW_ABS_NC	f5 32c:	f2c0 0300 	movt	r3, #0			32c: R_ARM_THM_MOVT_ABS	f5 330:	f04f 0203 	mov.w	r2, #3 334:	801a      	strh	r2, [r3, #0]		    				  	  	 	 		}		    				  	  	 	 		 if(clearreadingL1 < 200 && f5 == 3) 336:	f240 0300 	movw	r3, #0			336: R_ARM_THM_MOVW_ABS_NC	clearreadingL1 33a:	f2c0 0300 	movt	r3, #0			33a: R_ARM_THM_MOVT_ABS	clearreadingL1 33e:	881b      	ldrh	r3, [r3, #0] 340:	b29b      	uxth	r3, r3 342:	b21b      	sxth	r3, r3 344:	2bc7      	cmp	r3, #199	; 0xc7 346:	dc17      	bgt.n	378 <detectPellet+0x378> 348:	f240 0300 	movw	r3, #0			348: R_ARM_THM_MOVW_ABS_NC	f5 34c:	f2c0 0300 	movt	r3, #0			34c: R_ARM_THM_MOVT_ABS	f5 350:	881b      	ldrh	r3, [r3, #0] 352:	b29b      	uxth	r3, r3 354:	b21b      	sxth	r3, r3 356:	2b03      	cmp	r3, #3 358:	d10e      	bne.n	378 <detectPellet+0x378>		    				  	  	 	 		 {		    				  	  	 	 			 LsetSpeed = 0; 35a:	f240 0300 	movw	r3, #0			35a: R_ARM_THM_MOVW_ABS_NC	LsetSpeed 35e:	f2c0 0300 	movt	r3, #0			35e: R_ARM_THM_MOVT_ABS	LsetSpeed 362:	f04f 0200 	mov.w	r2, #0 366:	801a      	strh	r2, [r3, #0]		    				  	  	 	 			 RsetSpeed = -5; 368:	f240 0300 	movw	r3, #0			368: R_ARM_THM_MOVW_ABS_NC	RsetSpeed 36c:	f2c0 0300 	movt	r3, #0			36c: R_ARM_THM_MOVT_ABS	RsetSpeed 370:	f64f 72fb 	movw	r2, #65531	; 0xfffb 374:	801a      	strh	r2, [r3, #0] 376:	e018      	b.n	3aa <detectPellet+0x3aa>		    				  	  	 	 		 }		    				  	  	 	 		 else if(clearreadingL1 >= 200 && f5 == 3) 378:	f240 0300 	movw	r3, #0			378: R_ARM_THM_MOVW_ABS_NC	clearreadingL1 37c:	f2c0 0300 	movt	r3, #0			37c: R_ARM_THM_MOVT_ABS	clearreadingL1 380:	881b      	ldrh	r3, [r3, #0] 382:	b29b      	uxth	r3, r3 384:	b21b      	sxth	r3, r3 386:	2bc7      	cmp	r3, #199	; 0xc7 388:	dd0f      	ble.n	3aa <detectPellet+0x3aa> 38a:	f240 0300 	movw	r3, #0			38a: R_ARM_THM_MOVW_ABS_NC	f5 38e:	f2c0 0300 	movt	r3, #0			38e: R_ARM_THM_MOVT_ABS	f5 392:	881b      	ldrh	r3, [r3, #0] 394:	b29b      	uxth	r3, r3 396:	b21b      	sxth	r3, r3 398:	2b03      	cmp	r3, #3 39a:	d106      	bne.n	3aa <detectPellet+0x3aa>		    				  	  	 	 		 {		    				  	  	 	 			 f5 = 4; 39c:	f240 0300 	movw	r3, #0			39c: R_ARM_THM_MOVW_ABS_NC	f5 3a0:	f2c0 0300 	movt	r3, #0			3a0: R_ARM_THM_MOVT_ABS	f5 3a4:	f04f 0204 	mov.w	r2, #4 3a8:	801a      	strh	r2, [r3, #0]		    				  	  	 	 		 }		    				  	  	 	 		 if(clearreadingL1> 240 && clearreadingLB > 150 && f5 == 4) 3aa:	f240 0300 	movw	r3, #0			3aa: R_ARM_THM_MOVW_ABS_NC	clearreadingL1 3ae:	f2c0 0300 	movt	r3, #0			3ae: R_ARM_THM_MOVT_ABS	clearreadingL1 3b2:	881b      	ldrh	r3, [r3, #0] 3b4:	b29b      	uxth	r3, r3 3b6:	b21b      	sxth	r3, r3 3b8:	2bf0      	cmp	r3, #240	; 0xf0 3ba:	dd41      	ble.n	440 <detectPellet+0x440> 3bc:	f240 0300 	movw	r3, #0			3bc: R_ARM_THM_MOVW_ABS_NC	clearreadingLB 3c0:	f2c0 0300 	movt	r3, #0			3c0: R_ARM_THM_MOVT_ABS	clearreadingLB 3c4:	881b      	ldrh	r3, [r3, #0] 3c6:	b29b      	uxth	r3, r3 3c8:	b21b      	sxth	r3, r3 3ca:	2b96      	cmp	r3, #150	; 0x96 3cc:	dd38      	ble.n	440 <detectPellet+0x440> 3ce:	f240 0300 	movw	r3, #0			3ce: R_ARM_THM_MOVW_ABS_NC	f5 3d2:	f2c0 0300 	movt	r3, #0			3d2: R_ARM_THM_MOVT_ABS	f5 3d6:	881b      	ldrh	r3, [r3, #0] 3d8:	b29b      	uxth	r3, r3 3da:	b21b      	sxth	r3, r3 3dc:	2b04      	cmp	r3, #4 3de:	d12f      	bne.n	440 <detectPellet+0x440>		    				  	  	 	 		 {		    				  	  	 	 			 cse = 5; 3e0:	f04f 0305 	mov.w	r3, #5 3e4:	607b      	str	r3, [r7, #4]		    				  	  	 	 			 fin4 = 0; 3e6:	f240 0300 	movw	r3, #0			3e6: R_ARM_THM_MOVW_ABS_NC	fin4 3ea:	f2c0 0300 	movt	r3, #0			3ea: R_ARM_THM_MOVT_ABS	fin4 3ee:	f04f 0200 	mov.w	r2, #0 3f2:	801a      	strh	r2, [r3, #0]		    				  	  	 	 			 f5 = 0; 3f4:	f240 0300 	movw	r3, #0			3f4: R_ARM_THM_MOVW_ABS_NC	f5 3f8:	f2c0 0300 	movt	r3, #0			3f8: R_ARM_THM_MOVT_ABS	f5 3fc:	f04f 0200 	mov.w	r2, #0 400:	801a      	strh	r2, [r3, #0]		    				  	  	 	 		 }		    				  	  	 	 	 }		    				  	  	 	 	 break; 402:	e01d      	b.n	440 <detectPellet+0x440>		    				  	  	 		    				  	  	  case 5: saveLeft = 0; 404:	f240 0300 	movw	r3, #0			404: R_ARM_THM_MOVW_ABS_NC	saveLeft 408:	f2c0 0300 	movt	r3, #0			408: R_ARM_THM_MOVT_ABS	saveLeft 40c:	f04f 0200 	mov.w	r2, #0 410:	801a      	strh	r2, [r3, #0]		    				  	  		  	  stop(); 412:	f7ff fffe 	bl	0 <detectPellet>			412: R_ARM_THM_CALL	stop		    				  	  		  	  Reset(); 416:	f7ff fffe 	bl	0 <detectPellet>			416: R_ARM_THM_CALL	Reset		    				  	  		  	  countLineThree = 0; 41a:	f240 0300 	movw	r3, #0			41a: R_ARM_THM_MOVW_ABS_NC	countLineThree 41e:	f2c0 0300 	movt	r3, #0			41e: R_ARM_THM_MOVT_ABS	countLineThree 422:	f04f 0200 	mov.w	r2, #0 426:	801a      	strh	r2, [r3, #0]		    				  	  		  	  pellet = 5; 428:	f240 0300 	movw	r3, #0			428: R_ARM_THM_MOVW_ABS_NC	pellet 42c:	f2c0 0300 	movt	r3, #0			42c: R_ARM_THM_MOVT_ABS	pellet 430:	f04f 0205 	mov.w	r2, #5 434:	801a      	strh	r2, [r3, #0]		    				  	  	  	  	  break; 436:	e004      	b.n	442 <detectPellet+0x442>		    							  	  	  stop();   			    							  	  	  for(xx = 0; xx < 1000 ; xx++);	  	    		    				  	  	  	  		  cse = 2;		    				  	  	  	  		  fin3 = 0;		    				  	  	  	  	  }		    				  	  	  	  	  break; 438:	bf00      	nop 43a:	e002      	b.n	442 <detectPellet+0x442>		    				  	  	 	 	 if(fin1 == 1)		    				  	  	 	 	 {		    				  	  		  	 cse = 3;		    				  	  		  	 fin1 = 0;		    				  	  	 	 	 } 		    				  	  		  	 break; 43c:	bf00      	nop 43e:	e000      	b.n	442 <detectPellet+0x442>		    				  	  	 	 			 cse = 5;		    				  	  	 	 			 fin4 = 0;		    				  	  	 	 			 f5 = 0;		    				  	  	 	 		 }		    				  	  	 	 	 }		    				  	  	 	 	 break; 440:	bf00      	nop				 	 difBackwardRight = 0;}void detectPellet(int cse){	  while(cse != 5) 442:	687b      	ldr	r3, [r7, #4] 444:	2b05      	cmp	r3, #5 446:	f47f ade0 	bne.w	a <detectPellet+0xa>		    				  	  		  	  pellet = 5;		    				  	  	  	  	  break;		    				  	  	  		    				  	  	  }		    	}} 44a:	f107 0708 	add.w	r7, r7, #8 44e:	46bd      	mov	sp, r7 450:	bd80      	pop	{r7, pc} 452:	bf00      	nopDisassembly of section .text.moveToMidLine:00000000 <moveToMidLine>:void moveToMidLine(){   0:	b580      	push	{r7, lr}   2:	af00      	add	r7, sp, #0	if(clearreadingL1 > 170  && clearreadingR1 > 170  && clearreadingLB > 150 && clearreadingRB > 150)   4:	f240 0300 	movw	r3, #0			4: R_ARM_THM_MOVW_ABS_NC	clearreadingL1   8:	f2c0 0300 	movt	r3, #0			8: R_ARM_THM_MOVT_ABS	clearreadingL1   c:	881b      	ldrh	r3, [r3, #0]   e:	b29b      	uxth	r3, r3  10:	b21b      	sxth	r3, r3  12:	2baa      	cmp	r3, #170	; 0xaa  14:	f340 80ad 	ble.w	172 <moveToMidLine+0x172>  18:	f240 0300 	movw	r3, #0			18: R_ARM_THM_MOVW_ABS_NC	clearreadingR1  1c:	f2c0 0300 	movt	r3, #0			1c: R_ARM_THM_MOVT_ABS	clearreadingR1  20:	881b      	ldrh	r3, [r3, #0]  22:	b29b      	uxth	r3, r3  24:	b21b      	sxth	r3, r3  26:	2baa      	cmp	r3, #170	; 0xaa  28:	f340 80a3 	ble.w	172 <moveToMidLine+0x172>  2c:	f240 0300 	movw	r3, #0			2c: R_ARM_THM_MOVW_ABS_NC	clearreadingLB  30:	f2c0 0300 	movt	r3, #0			30: R_ARM_THM_MOVT_ABS	clearreadingLB  34:	881b      	ldrh	r3, [r3, #0]  36:	b29b      	uxth	r3, r3  38:	b21b      	sxth	r3, r3  3a:	2b96      	cmp	r3, #150	; 0x96  3c:	f340 8099 	ble.w	172 <moveToMidLine+0x172>  40:	f240 0300 	movw	r3, #0			40: R_ARM_THM_MOVW_ABS_NC	clearreadingRB  44:	f2c0 0300 	movt	r3, #0			44: R_ARM_THM_MOVT_ABS	clearreadingRB  48:	881b      	ldrh	r3, [r3, #0]  4a:	b29b      	uxth	r3, r3  4c:	b21b      	sxth	r3, r3  4e:	2b96      	cmp	r3, #150	; 0x96  50:	f340 808f 	ble.w	172 <moveToMidLine+0x172>			{				if(flag == 0)  54:	f240 0300 	movw	r3, #0			54: R_ARM_THM_MOVW_ABS_NC	flag  58:	f2c0 0300 	movt	r3, #0			58: R_ARM_THM_MOVT_ABS	flag  5c:	881b      	ldrh	r3, [r3, #0]  5e:	b29b      	uxth	r3, r3  60:	2b00      	cmp	r3, #0  62:	d178      	bne.n	156 <moveToMidLine+0x156>				{				step = 1;  64:	f240 0300 	movw	r3, #0			64: R_ARM_THM_MOVW_ABS_NC	step  68:	f2c0 0300 	movt	r3, #0			68: R_ARM_THM_MOVT_ABS	step  6c:	f04f 0201 	mov.w	r2, #1  70:	801a      	strh	r2, [r3, #0]				}				while(step != 4)  72:	e070      	b.n	156 <moveToMidLine+0x156>				{			switch(step)  74:	f240 0300 	movw	r3, #0			74: R_ARM_THM_MOVW_ABS_NC	step  78:	f2c0 0300 	movt	r3, #0			78: R_ARM_THM_MOVT_ABS	step  7c:	881b      	ldrh	r3, [r3, #0]  7e:	b29b      	uxth	r3, r3  80:	b21b      	sxth	r3, r3  82:	2b02      	cmp	r3, #2  84:	d014      	beq.n	b0 <moveToMidLine+0xb0>  86:	2b03      	cmp	r3, #3  88:	d030      	beq.n	ec <moveToMidLine+0xec>  8a:	2b01      	cmp	r3, #1  8c:	d168      	bne.n	160 <moveToMidLine+0x160>							{								case 1: countLineThree = 1;  8e:	f240 0300 	movw	r3, #0			8e: R_ARM_THM_MOVW_ABS_NC	countLineThree  92:	f2c0 0300 	movt	r3, #0			92: R_ARM_THM_MOVT_ABS	countLineThree  96:	f04f 0201 	mov.w	r2, #1  9a:	801a      	strh	r2, [r3, #0]										stop();  9c:	f7ff fffe 	bl	0 <moveToMidLine>			9c: R_ARM_THM_CALL	stop										step = 2;  a0:	f240 0300 	movw	r3, #0			a0: R_ARM_THM_MOVW_ABS_NC	step  a4:	f2c0 0300 	movt	r3, #0			a4: R_ARM_THM_MOVT_ABS	step  a8:	f04f 0202 	mov.w	r2, #2  ac:	801a      	strh	r2, [r3, #0]										break;  ae:	e057      	b.n	160 <moveToMidLine+0x160>								case 2: Forward(3,10);  b0:	f04f 0003 	mov.w	r0, #3  b4:	f04f 010a 	mov.w	r1, #10  b8:	f7ff fffe 	bl	0 <moveToMidLine>			b8: R_ARM_THM_CALL	Forward										if(fin1 == 1)  bc:	f240 0300 	movw	r3, #0			bc: R_ARM_THM_MOVW_ABS_NC	fin1  c0:	f2c0 0300 	movt	r3, #0			c0: R_ARM_THM_MOVT_ABS	fin1  c4:	881b      	ldrh	r3, [r3, #0]  c6:	b29b      	uxth	r3, r3  c8:	b21b      	sxth	r3, r3  ca:	2b01      	cmp	r3, #1  cc:	d145      	bne.n	15a <moveToMidLine+0x15a>										{											step = 3;  ce:	f240 0300 	movw	r3, #0			ce: R_ARM_THM_MOVW_ABS_NC	step  d2:	f2c0 0300 	movt	r3, #0			d2: R_ARM_THM_MOVT_ABS	step  d6:	f04f 0203 	mov.w	r2, #3  da:	801a      	strh	r2, [r3, #0]											fin1 = 0;  dc:	f240 0300 	movw	r3, #0			dc: R_ARM_THM_MOVW_ABS_NC	fin1  e0:	f2c0 0300 	movt	r3, #0			e0: R_ARM_THM_MOVT_ABS	fin1  e4:	f04f 0200 	mov.w	r2, #0  e8:	801a      	strh	r2, [r3, #0]										}										break;  ea:	e036      	b.n	15a <moveToMidLine+0x15a>								case 3: TurnRight(9000,10,10);  ec:	f242 3028 	movw	r0, #9000	; 0x2328  f0:	f04f 010a 	mov.w	r1, #10  f4:	f04f 020a 	mov.w	r2, #10  f8:	f7ff fffe 	bl	0 <moveToMidLine>			f8: R_ARM_THM_CALL	TurnRight										if(fin3 == 1)  fc:	f240 0300 	movw	r3, #0			fc: R_ARM_THM_MOVW_ABS_NC	fin3 100:	f2c0 0300 	movt	r3, #0			100: R_ARM_THM_MOVT_ABS	fin3 104:	881b      	ldrh	r3, [r3, #0] 106:	b29b      	uxth	r3, r3 108:	b21b      	sxth	r3, r3 10a:	2b01      	cmp	r3, #1 10c:	d127      	bne.n	15e <moveToMidLine+0x15e>										{											step = 4; 10e:	f240 0300 	movw	r3, #0			10e: R_ARM_THM_MOVW_ABS_NC	step 112:	f2c0 0300 	movt	r3, #0			112: R_ARM_THM_MOVT_ABS	step 116:	f04f 0204 	mov.w	r2, #4 11a:	801a      	strh	r2, [r3, #0]											fin3 = 0; 11c:	f240 0300 	movw	r3, #0			11c: R_ARM_THM_MOVW_ABS_NC	fin3 120:	f2c0 0300 	movt	r3, #0			120: R_ARM_THM_MOVT_ABS	fin3 124:	f04f 0200 	mov.w	r2, #0 128:	801a      	strh	r2, [r3, #0]											flag = 1; 12a:	f240 0300 	movw	r3, #0			12a: R_ARM_THM_MOVW_ABS_NC	flag 12e:	f2c0 0300 	movt	r3, #0			12e: R_ARM_THM_MOVT_ABS	flag 132:	f04f 0201 	mov.w	r2, #1 136:	801a      	strh	r2, [r3, #0]											countLineThree = 0; 138:	f240 0300 	movw	r3, #0			138: R_ARM_THM_MOVW_ABS_NC	countLineThree 13c:	f2c0 0300 	movt	r3, #0			13c: R_ARM_THM_MOVT_ABS	countLineThree 140:	f04f 0200 	mov.w	r2, #0 144:	801a      	strh	r2, [r3, #0]											countLineOne = 1; 146:	f240 0300 	movw	r3, #0			146: R_ARM_THM_MOVW_ABS_NC	countLineOne 14a:	f2c0 0300 	movt	r3, #0			14a: R_ARM_THM_MOVT_ABS	countLineOne 14e:	f04f 0201 	mov.w	r2, #1 152:	801a      	strh	r2, [r3, #0]																					}										break; 154:	e003      	b.n	15e <moveToMidLine+0x15e>			{				if(flag == 0)				{				step = 1;				}				while(step != 4) 156:	bf00      	nop 158:	e002      	b.n	160 <moveToMidLine+0x160>										if(fin1 == 1)										{											step = 3;											fin1 = 0;										}										break; 15a:	bf00      	nop 15c:	e000      	b.n	160 <moveToMidLine+0x160>											flag = 1;											countLineThree = 0;											countLineOne = 1;																					}										break; 15e:	bf00      	nop			{				if(flag == 0)				{				step = 1;				}				while(step != 4) 160:	f240 0300 	movw	r3, #0			160: R_ARM_THM_MOVW_ABS_NC	step 164:	f2c0 0300 	movt	r3, #0			164: R_ARM_THM_MOVT_ABS	step 168:	881b      	ldrh	r3, [r3, #0] 16a:	b29b      	uxth	r3, r3 16c:	b21b      	sxth	r3, r3 16e:	2b04      	cmp	r3, #4 170:	d180      	bne.n	74 <moveToMidLine+0x74>												}			  			  			 if(clearreadingL1 > 180 && clearreadingR1 > 180  && countLineOne == 1) 172:	f240 0300 	movw	r3, #0			172: R_ARM_THM_MOVW_ABS_NC	clearreadingL1 176:	f2c0 0300 	movt	r3, #0			176: R_ARM_THM_MOVT_ABS	clearreadingL1 17a:	881b      	ldrh	r3, [r3, #0] 17c:	b29b      	uxth	r3, r3 17e:	b21b      	sxth	r3, r3 180:	2bb4      	cmp	r3, #180	; 0xb4 182:	dd18      	ble.n	1b6 <moveToMidLine+0x1b6> 184:	f240 0300 	movw	r3, #0			184: R_ARM_THM_MOVW_ABS_NC	clearreadingR1 188:	f2c0 0300 	movt	r3, #0			188: R_ARM_THM_MOVT_ABS	clearreadingR1 18c:	881b      	ldrh	r3, [r3, #0] 18e:	b29b      	uxth	r3, r3 190:	b21b      	sxth	r3, r3 192:	2bb4      	cmp	r3, #180	; 0xb4 194:	dd0f      	ble.n	1b6 <moveToMidLine+0x1b6> 196:	f240 0300 	movw	r3, #0			196: R_ARM_THM_MOVW_ABS_NC	countLineOne 19a:	f2c0 0300 	movt	r3, #0			19a: R_ARM_THM_MOVT_ABS	countLineOne 19e:	881b      	ldrh	r3, [r3, #0] 1a0:	b29b      	uxth	r3, r3 1a2:	b21b      	sxth	r3, r3 1a4:	2b01      	cmp	r3, #1 1a6:	d106      	bne.n	1b6 <moveToMidLine+0x1b6>			 {				 countLineOne = 2; 1a8:	f240 0300 	movw	r3, #0			1a8: R_ARM_THM_MOVW_ABS_NC	countLineOne 1ac:	f2c0 0300 	movt	r3, #0			1ac: R_ARM_THM_MOVT_ABS	countLineOne 1b0:	f04f 0202 	mov.w	r2, #2 1b4:	801a      	strh	r2, [r3, #0]			 }			 if(clearreadingL1 > 170  && clearreadingLB > 200 && clearreadingRB > 200 && countLineOne == 2) 1b6:	f240 0300 	movw	r3, #0			1b6: R_ARM_THM_MOVW_ABS_NC	clearreadingL1 1ba:	f2c0 0300 	movt	r3, #0			1ba: R_ARM_THM_MOVT_ABS	clearreadingL1 1be:	881b      	ldrh	r3, [r3, #0] 1c0:	b29b      	uxth	r3, r3 1c2:	b21b      	sxth	r3, r3 1c4:	2baa      	cmp	r3, #170	; 0xaa 1c6:	dd3f      	ble.n	248 <moveToMidLine+0x248> 1c8:	f240 0300 	movw	r3, #0			1c8: R_ARM_THM_MOVW_ABS_NC	clearreadingLB 1cc:	f2c0 0300 	movt	r3, #0			1cc: R_ARM_THM_MOVT_ABS	clearreadingLB 1d0:	881b      	ldrh	r3, [r3, #0] 1d2:	b29b      	uxth	r3, r3 1d4:	b21b      	sxth	r3, r3 1d6:	2bc8      	cmp	r3, #200	; 0xc8 1d8:	dd36      	ble.n	248 <moveToMidLine+0x248> 1da:	f240 0300 	movw	r3, #0			1da: R_ARM_THM_MOVW_ABS_NC	clearreadingRB 1de:	f2c0 0300 	movt	r3, #0			1de: R_ARM_THM_MOVT_ABS	clearreadingRB 1e2:	881b      	ldrh	r3, [r3, #0] 1e4:	b29b      	uxth	r3, r3 1e6:	b21b      	sxth	r3, r3 1e8:	2bc8      	cmp	r3, #200	; 0xc8 1ea:	dd2d      	ble.n	248 <moveToMidLine+0x248> 1ec:	f240 0300 	movw	r3, #0			1ec: R_ARM_THM_MOVW_ABS_NC	countLineOne 1f0:	f2c0 0300 	movt	r3, #0			1f0: R_ARM_THM_MOVT_ABS	countLineOne 1f4:	881b      	ldrh	r3, [r3, #0] 1f6:	b29b      	uxth	r3, r3 1f8:	b21b      	sxth	r3, r3 1fa:	2b02      	cmp	r3, #2 1fc:	d124      	bne.n	248 <moveToMidLine+0x248>			 {				 saveRight = 0; 1fe:	f240 0300 	movw	r3, #0			1fe: R_ARM_THM_MOVW_ABS_NC	saveRight 202:	f2c0 0300 	movt	r3, #0			202: R_ARM_THM_MOVT_ABS	saveRight 206:	f04f 0200 	mov.w	r2, #0 20a:	801a      	strh	r2, [r3, #0]				 countLineOne = 3; 20c:	f240 0300 	movw	r3, #0			20c: R_ARM_THM_MOVW_ABS_NC	countLineOne 210:	f2c0 0300 	movt	r3, #0			210: R_ARM_THM_MOVT_ABS	countLineOne 214:	f04f 0203 	mov.w	r2, #3 218:	801a      	strh	r2, [r3, #0]				 countLineThree = 1; 21a:	f240 0300 	movw	r3, #0			21a: R_ARM_THM_MOVW_ABS_NC	countLineThree 21e:	f2c0 0300 	movt	r3, #0			21e: R_ARM_THM_MOVT_ABS	countLineThree 222:	f04f 0201 	mov.w	r2, #1 226:	801a      	strh	r2, [r3, #0]				 saveRight = 0; 228:	f240 0300 	movw	r3, #0			228: R_ARM_THM_MOVW_ABS_NC	saveRight 22c:	f2c0 0300 	movt	r3, #0			22c: R_ARM_THM_MOVT_ABS	saveRight 230:	f04f 0200 	mov.w	r2, #0 234:	801a      	strh	r2, [r3, #0]				 saveForward = 0; 236:	f240 0300 	movw	r3, #0			236: R_ARM_THM_MOVW_ABS_NC	saveForward 23a:	f2c0 0300 	movt	r3, #0			23a: R_ARM_THM_MOVT_ABS	saveForward 23e:	f04f 0200 	mov.w	r2, #0 242:	801a      	strh	r2, [r3, #0]				 stop(); 244:	f7ff fffe 	bl	0 <moveToMidLine>			244: R_ARM_THM_CALL	stop			 }					 if(countLineOne == 3) 248:	f240 0300 	movw	r3, #0			248: R_ARM_THM_MOVW_ABS_NC	countLineOne 24c:	f2c0 0300 	movt	r3, #0			24c: R_ARM_THM_MOVT_ABS	countLineOne 250:	881b      	ldrh	r3, [r3, #0] 252:	b29b      	uxth	r3, r3 254:	b21b      	sxth	r3, r3 256:	2b03      	cmp	r3, #3 258:	f040 8088 	bne.w	36c <moveToMidLine+0x36c>			 {				 if(fin3 == 0) 25c:	f240 0300 	movw	r3, #0			25c: R_ARM_THM_MOVW_ABS_NC	fin3 260:	f2c0 0300 	movt	r3, #0			260: R_ARM_THM_MOVT_ABS	fin3 264:	881b      	ldrh	r3, [r3, #0] 266:	b29b      	uxth	r3, r3 268:	2b00      	cmp	r3, #0 26a:	d108      	bne.n	27e <moveToMidLine+0x27e>				 {					 TurnRight(9000,10,10); 26c:	f242 3028 	movw	r0, #9000	; 0x2328 270:	f04f 010a 	mov.w	r1, #10 274:	f04f 020a 	mov.w	r2, #10 278:	f7ff fffe 	bl	0 <moveToMidLine>			278: R_ARM_THM_CALL	TurnRight 27c:	e076      	b.n	f2 <moveToMidLine+0xf2>				 }				 else				 {					 					 	 saveRight = 0; 27e:	f240 0300 	movw	r3, #0			27e: R_ARM_THM_MOVW_ABS_NC	saveRight 282:	f2c0 0300 	movt	r3, #0			282: R_ARM_THM_MOVT_ABS	saveRight 286:	f04f 0200 	mov.w	r2, #0 28a:	801a      	strh	r2, [r3, #0]						 if(clearreadingL1 > 170) 28c:	f240 0300 	movw	r3, #0			28c: R_ARM_THM_MOVW_ABS_NC	clearreadingL1 290:	f2c0 0300 	movt	r3, #0			290: R_ARM_THM_MOVT_ABS	clearreadingL1 294:	881b      	ldrh	r3, [r3, #0] 296:	b29b      	uxth	r3, r3 298:	b21b      	sxth	r3, r3 29a:	2baa      	cmp	r3, #170	; 0xaa 29c:	dd02      	ble.n	2a4 <moveToMidLine+0x2a4>						 {							stop(); 29e:	f7ff fffe 	bl	0 <moveToMidLine>			29e: R_ARM_THM_CALL	stop 2a2:	e063      	b.n	cc <moveToMidLine+0xcc>						 }						 else						 {							 LsetSpeed = 10; 2a4:	f240 0300 	movw	r3, #0			2a4: R_ARM_THM_MOVW_ABS_NC	LsetSpeed 2a8:	f2c0 0300 	movt	r3, #0			2a8: R_ARM_THM_MOVT_ABS	LsetSpeed 2ac:	f04f 020a 	mov.w	r2, #10 2b0:	801a      	strh	r2, [r3, #0]							 RsetSpeed = -10; 2b2:	f240 0300 	movw	r3, #0			2b2: R_ARM_THM_MOVW_ABS_NC	RsetSpeed 2b6:	f2c0 0300 	movt	r3, #0			2b6: R_ARM_THM_MOVT_ABS	RsetSpeed 2ba:	f64f 72f6 	movw	r2, #65526	; 0xfff6 2be:	801a      	strh	r2, [r3, #0]							 if(clearreadingR2 < 210 && clearreadingR2 > 80 && oneLine == 0){ 2c0:	f240 0300 	movw	r3, #0			2c0: R_ARM_THM_MOVW_ABS_NC	clearreadingR2 2c4:	f2c0 0300 	movt	r3, #0			2c4: R_ARM_THM_MOVT_ABS	clearreadingR2 2c8:	881b      	ldrh	r3, [r3, #0] 2ca:	b29b      	uxth	r3, r3 2cc:	b21b      	sxth	r3, r3 2ce:	2bd1      	cmp	r3, #209	; 0xd1 2d0:	dc1e      	bgt.n	310 <moveToMidLine+0x310> 2d2:	f240 0300 	movw	r3, #0			2d2: R_ARM_THM_MOVW_ABS_NC	clearreadingR2 2d6:	f2c0 0300 	movt	r3, #0			2d6: R_ARM_THM_MOVT_ABS	clearreadingR2 2da:	881b      	ldrh	r3, [r3, #0] 2dc:	b29b      	uxth	r3, r3 2de:	b21b      	sxth	r3, r3 2e0:	2b50      	cmp	r3, #80	; 0x50 2e2:	dd15      	ble.n	310 <moveToMidLine+0x310> 2e4:	f240 0300 	movw	r3, #0			2e4: R_ARM_THM_MOVW_ABS_NC	oneLine 2e8:	f2c0 0300 	movt	r3, #0			2e8: R_ARM_THM_MOVT_ABS	oneLine 2ec:	881b      	ldrh	r3, [r3, #0] 2ee:	b29b      	uxth	r3, r3 2f0:	2b00      	cmp	r3, #0 2f2:	d10d      	bne.n	310 <moveToMidLine+0x310>							 		  LsetSpeed = 5; 2f4:	f240 0300 	movw	r3, #0			2f4: R_ARM_THM_MOVW_ABS_NC	LsetSpeed 2f8:	f2c0 0300 	movt	r3, #0			2f8: R_ARM_THM_MOVT_ABS	LsetSpeed 2fc:	f04f 0205 	mov.w	r2, #5 300:	801a      	strh	r2, [r3, #0]							 		  RsetSpeed = 0; 302:	f240 0300 	movw	r3, #0			302: R_ARM_THM_MOVW_ABS_NC	RsetSpeed 306:	f2c0 0300 	movt	r3, #0			306: R_ARM_THM_MOVT_ABS	RsetSpeed 30a:	f04f 0200 	mov.w	r2, #0 30e:	801a      	strh	r2, [r3, #0]							 	  }							 	  if(clearreadingR2 <= 80){ 310:	f240 0300 	movw	r3, #0			310: R_ARM_THM_MOVW_ABS_NC	clearreadingR2 314:	f2c0 0300 	movt	r3, #0			314: R_ARM_THM_MOVT_ABS	clearreadingR2 318:	881b      	ldrh	r3, [r3, #0] 31a:	b29b      	uxth	r3, r3 31c:	b21b      	sxth	r3, r3 31e:	2b50      	cmp	r3, #80	; 0x50 320:	dc14      	bgt.n	34c <moveToMidLine+0x34c>							 		  LsetSpeed = 0; 322:	f240 0300 	movw	r3, #0			322: R_ARM_THM_MOVW_ABS_NC	LsetSpeed 326:	f2c0 0300 	movt	r3, #0			326: R_ARM_THM_MOVT_ABS	LsetSpeed 32a:	f04f 0200 	mov.w	r2, #0 32e:	801a      	strh	r2, [r3, #0]							 		  RsetSpeed = -5; 330:	f240 0300 	movw	r3, #0			330: R_ARM_THM_MOVW_ABS_NC	RsetSpeed 334:	f2c0 0300 	movt	r3, #0			334: R_ARM_THM_MOVT_ABS	RsetSpeed 338:	f64f 72fb 	movw	r2, #65531	; 0xfffb 33c:	801a      	strh	r2, [r3, #0]							 		  oneLine = 1; 33e:	f240 0300 	movw	r3, #0			33e: R_ARM_THM_MOVW_ABS_NC	oneLine 342:	f2c0 0300 	movt	r3, #0			342: R_ARM_THM_MOVT_ABS	oneLine 346:	f04f 0201 	mov.w	r2, #1 34a:	801a      	strh	r2, [r3, #0]							 	  }							 	  if(clearreadingR2 >= 220){ 34c:	f240 0300 	movw	r3, #0			34c: R_ARM_THM_MOVW_ABS_NC	clearreadingR2 350:	f2c0 0300 	movt	r3, #0			350: R_ARM_THM_MOVT_ABS	clearreadingR2 354:	881b      	ldrh	r3, [r3, #0] 356:	b29b      	uxth	r3, r3 358:	b21b      	sxth	r3, r3 35a:	2bdb      	cmp	r3, #219	; 0xdb 35c:	dd06      	ble.n	36c <moveToMidLine+0x36c>							 		  oneLine = 0; 35e:	f240 0300 	movw	r3, #0			35e: R_ARM_THM_MOVW_ABS_NC	oneLine 362:	f2c0 0300 	movt	r3, #0			362: R_ARM_THM_MOVT_ABS	oneLine 366:	f04f 0200 	mov.w	r2, #0 36a:	801a      	strh	r2, [r3, #0]						 					 }				 }			 }			} 36c:	bd80      	pop	{r7, pc} 36e:	bf00      	nopDisassembly of section .text.main:00000000 <main>:/*lint -save  -e970 Disable MISRA rule (6.3) checking. */int main(void){   0:	b580      	push	{r7, lr}   2:	af00      	add	r7, sp, #0/*lint -restore Enable MISRA rule (6.3) checking. */                                                                                                                                                                     /* Write your local variable definition here */  /*** Processor Expert internal initialization. DON'T REMOVE THIS CODE!!! ***/  PE_low_level_init();   4:	f7ff fffe 	bl	0 <PE_low_level_init>			4: R_ARM_THM_CALL	PE_low_level_init  /*** End of Processor Expert internal initialization.                    ***/  /* Write your code here */  writeAXRegister(MaxTorque);   8:	f240 0000 	movw	r0, #0			8: R_ARM_THM_MOVW_ABS_NC	MaxTorque   c:	f2c0 0000 	movt	r0, #0			c: R_ARM_THM_MOVT_ABS	MaxTorque  10:	f7ff fffe 	bl	0 <main>			10: R_ARM_THM_CALL	writeAXRegister    for(i=0;i<1000;i++);  14:	f240 0300 	movw	r3, #0			14: R_ARM_THM_MOVW_ABS_NC	i  18:	f2c0 0300 	movt	r3, #0			18: R_ARM_THM_MOVT_ABS	i  1c:	f04f 0200 	mov.w	r2, #0  20:	601a      	str	r2, [r3, #0]  22:	e00b      	b.n	3c <main+0x3c>  24:	f240 0300 	movw	r3, #0			24: R_ARM_THM_MOVW_ABS_NC	i  28:	f2c0 0300 	movt	r3, #0			28: R_ARM_THM_MOVT_ABS	i  2c:	681b      	ldr	r3, [r3, #0]  2e:	f103 0201 	add.w	r2, r3, #1  32:	f240 0300 	movw	r3, #0			32: R_ARM_THM_MOVW_ABS_NC	i  36:	f2c0 0300 	movt	r3, #0			36: R_ARM_THM_MOVT_ABS	i  3a:	601a      	str	r2, [r3, #0]  3c:	f240 0300 	movw	r3, #0			3c: R_ARM_THM_MOVW_ABS_NC	i  40:	f2c0 0300 	movt	r3, #0			40: R_ARM_THM_MOVT_ABS	i  44:	681a      	ldr	r2, [r3, #0]  46:	f240 33e7 	movw	r3, #999	; 0x3e7  4a:	429a      	cmp	r2, r3  4c:	ddea      	ble.n	24 <main+0x24>    writeAXRegister(Compliance);  4e:	f240 0000 	movw	r0, #0			4e: R_ARM_THM_MOVW_ABS_NC	Compliance  52:	f2c0 0000 	movt	r0, #0			52: R_ARM_THM_MOVT_ABS	Compliance  56:	f7ff fffe 	bl	0 <main>			56: R_ARM_THM_CALL	writeAXRegister    writeAXRegister(ServoMode);  5a:	f240 0000 	movw	r0, #0			5a: R_ARM_THM_MOVW_ABS_NC	ServoMode  5e:	f2c0 0000 	movt	r0, #0			5e: R_ARM_THM_MOVT_ABS	ServoMode  62:	f7ff fffe 	bl	0 <main>			62: R_ARM_THM_CALL	writeAXRegister  	for(i=0;i<1000;i++);  66:	f240 0300 	movw	r3, #0			66: R_ARM_THM_MOVW_ABS_NC	i  6a:	f2c0 0300 	movt	r3, #0			6a: R_ARM_THM_MOVT_ABS	i  6e:	f04f 0200 	mov.w	r2, #0  72:	601a      	str	r2, [r3, #0]  74:	e00b      	b.n	8e <main+0x8e>  76:	f240 0300 	movw	r3, #0			76: R_ARM_THM_MOVW_ABS_NC	i  7a:	f2c0 0300 	movt	r3, #0			7a: R_ARM_THM_MOVT_ABS	i  7e:	681b      	ldr	r3, [r3, #0]  80:	f103 0201 	add.w	r2, r3, #1  84:	f240 0300 	movw	r3, #0			84: R_ARM_THM_MOVW_ABS_NC	i  88:	f2c0 0300 	movt	r3, #0			88: R_ARM_THM_MOVT_ABS	i  8c:	601a      	str	r2, [r3, #0]  8e:	f240 0300 	movw	r3, #0			8e: R_ARM_THM_MOVW_ABS_NC	i  92:	f2c0 0300 	movt	r3, #0			92: R_ARM_THM_MOVT_ABS	i  96:	681a      	ldr	r2, [r3, #0]  98:	f240 33e7 	movw	r3, #999	; 0x3e7  9c:	429a      	cmp	r2, r3  9e:	ddea      	ble.n	76 <main+0x76>   	Servo = 1;  a0:	f240 0300 	movw	r3, #0			a0: R_ARM_THM_MOVW_ABS_NC	Servo  a4:	f2c0 0300 	movt	r3, #0			a4: R_ARM_THM_MOVT_ABS	Servo  a8:	f04f 0201 	mov.w	r2, #1  ac:	601a      	str	r2, [r3, #0]   	//ServoDeg(1);   	ServoDeg(9);  ae:	f04f 0009 	mov.w	r0, #9  b2:	f7ff fffe 	bl	0 <main>			b2: R_ARM_THM_CALL	ServoDeg  b6:	e000      	b.n	ba <main+0xba>		 			 ServoDeg(Servo);		 			 for(i=0;i<100000;i++);		 	  }		 }	}  b8:	bf00      	nop								 	  }	}detectPellet(pellet);moveToMidLine();*/	saveRight = 0;  ba:	f240 0300 	movw	r3, #0			ba: R_ARM_THM_MOVW_ABS_NC	saveRight  be:	f2c0 0300 	movt	r3, #0			be: R_ARM_THM_MOVT_ABS	saveRight  c2:	f04f 0200 	mov.w	r2, #0  c6:	801a      	strh	r2, [r3, #0]	while(cse1!= 6)  c8:	e22b      	b.n	522 <main+0x522>	{	switch(cse1)  ca:	f240 0300 	movw	r3, #0			ca: R_ARM_THM_MOVW_ABS_NC	cse1  ce:	f2c0 0300 	movt	r3, #0			ce: R_ARM_THM_MOVT_ABS	cse1  d2:	881b      	ldrh	r3, [r3, #0]  d4:	b29b      	uxth	r3, r3  d6:	b21b      	sxth	r3, r3  d8:	f103 33ff 	add.w	r3, r3, #4294967295  dc:	2b04      	cmp	r3, #4  de:	f200 8220 	bhi.w	522 <main+0x522>  e2:	a201      	add	r2, pc, #4	; (adr r2, e8 <main+0xe8>)  e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]  e8:	000000fd 	.word	0x000000fd			e8: R_ARM_ABS32	.text.main  ec:	0000013f 	.word	0x0000013f			ec: R_ARM_ABS32	.text.main  f0:	000001a3 	.word	0x000001a3			f0: R_ARM_ABS32	.text.main  f4:	000002cd 	.word	0x000002cd			f4: R_ARM_ABS32	.text.main  f8:	00000369 	.word	0x00000369			f8: R_ARM_ABS32	.text.main	{	case 1: TurnRight(9000,10,10);  fc:	f242 3028 	movw	r0, #9000	; 0x2328 100:	f04f 010a 	mov.w	r1, #10 104:	f04f 020a 	mov.w	r2, #10 108:	f7ff fffe 	bl	0 <main>			108: R_ARM_THM_CALL	TurnRight			if(fin3 == 1) 10c:	f240 0300 	movw	r3, #0			10c: R_ARM_THM_MOVW_ABS_NC	fin3 110:	f2c0 0300 	movt	r3, #0			110: R_ARM_THM_MOVT_ABS	fin3 114:	881b      	ldrh	r3, [r3, #0] 116:	b29b      	uxth	r3, r3 118:	b21b      	sxth	r3, r3 11a:	2b01      	cmp	r3, #1 11c:	f040 81fa 	bne.w	514 <main+0x514>			{				cse1 = 2; 120:	f240 0300 	movw	r3, #0			120: R_ARM_THM_MOVW_ABS_NC	cse1 124:	f2c0 0300 	movt	r3, #0			124: R_ARM_THM_MOVT_ABS	cse1 128:	f04f 0202 	mov.w	r2, #2 12c:	801a      	strh	r2, [r3, #0]				fin3 = 0; 12e:	f240 0300 	movw	r3, #0			12e: R_ARM_THM_MOVW_ABS_NC	fin3 132:	f2c0 0300 	movt	r3, #0			132: R_ARM_THM_MOVT_ABS	fin3 136:	f04f 0200 	mov.w	r2, #0 13a:	801a      	strh	r2, [r3, #0]			}			break; 13c:	e1ea      	b.n	514 <main+0x514>	case 2: if(clearreadingLB < 180 && clearreadingRB < 180){ 13e:	f240 0300 	movw	r3, #0			13e: R_ARM_THM_MOVW_ABS_NC	clearreadingLB 142:	f2c0 0300 	movt	r3, #0			142: R_ARM_THM_MOVT_ABS	clearreadingLB 146:	881b      	ldrh	r3, [r3, #0] 148:	b29b      	uxth	r3, r3 14a:	b21b      	sxth	r3, r3 14c:	2bb3      	cmp	r3, #179	; 0xb3 14e:	dc17      	bgt.n	180 <main+0x180> 150:	f240 0300 	movw	r3, #0			150: R_ARM_THM_MOVW_ABS_NC	clearreadingRB 154:	f2c0 0300 	movt	r3, #0			154: R_ARM_THM_MOVT_ABS	clearreadingRB 158:	881b      	ldrh	r3, [r3, #0] 15a:	b29b      	uxth	r3, r3 15c:	b21b      	sxth	r3, r3 15e:	2bb3      	cmp	r3, #179	; 0xb3 160:	dc0e      	bgt.n	180 <main+0x180>				LsetSpeed = 10; 162:	f240 0300 	movw	r3, #0			162: R_ARM_THM_MOVW_ABS_NC	LsetSpeed 166:	f2c0 0300 	movt	r3, #0			166: R_ARM_THM_MOVT_ABS	LsetSpeed 16a:	f04f 020a 	mov.w	r2, #10 16e:	801a      	strh	r2, [r3, #0]				RsetSpeed = -10; 170:	f240 0300 	movw	r3, #0			170: R_ARM_THM_MOVW_ABS_NC	RsetSpeed 174:	f2c0 0300 	movt	r3, #0			174: R_ARM_THM_MOVT_ABS	RsetSpeed 178:	f64f 72f6 	movw	r2, #65526	; 0xfff6 17c:	801a      	strh	r2, [r3, #0]			{				stop();				cse1 = 3;				saveRight = 0;			}			break; 17e:	e1d0      	b.n	522 <main+0x522>				LsetSpeed = 10;				RsetSpeed = -10;			}			else			{				stop(); 180:	f7ff fffe 	bl	0 <main>			180: R_ARM_THM_CALL	stop				cse1 = 3; 184:	f240 0300 	movw	r3, #0			184: R_ARM_THM_MOVW_ABS_NC	cse1 188:	f2c0 0300 	movt	r3, #0			188: R_ARM_THM_MOVT_ABS	cse1 18c:	f04f 0203 	mov.w	r2, #3 190:	801a      	strh	r2, [r3, #0]				saveRight = 0; 192:	f240 0300 	movw	r3, #0			192: R_ARM_THM_MOVW_ABS_NC	saveRight 196:	f2c0 0300 	movt	r3, #0			196: R_ARM_THM_MOVT_ABS	saveRight 19a:	f04f 0200 	mov.w	r2, #0 19e:	801a      	strh	r2, [r3, #0]			}			break; 1a0:	e1bf      	b.n	522 <main+0x522>	case 3: TurnRight(9000,10,10); 1a2:	f242 3028 	movw	r0, #9000	; 0x2328 1a6:	f04f 010a 	mov.w	r1, #10 1aa:	f04f 020a 	mov.w	r2, #10 1ae:	f7ff fffe 	bl	0 <main>			1ae: R_ARM_THM_CALL	TurnRight			if(fin3 == 1) 1b2:	f240 0300 	movw	r3, #0			1b2: R_ARM_THM_MOVW_ABS_NC	fin3 1b6:	f2c0 0300 	movt	r3, #0			1b6: R_ARM_THM_MOVT_ABS	fin3 1ba:	881b      	ldrh	r3, [r3, #0] 1bc:	b29b      	uxth	r3, r3 1be:	b21b      	sxth	r3, r3 1c0:	2b01      	cmp	r3, #1 1c2:	f040 81a9 	bne.w	518 <main+0x518>			{				saveLeft = 0; 1c6:	f240 0300 	movw	r3, #0			1c6: R_ARM_THM_MOVW_ABS_NC	saveLeft 1ca:	f2c0 0300 	movt	r3, #0			1ca: R_ARM_THM_MOVT_ABS	saveLeft 1ce:	f04f 0200 	mov.w	r2, #0 1d2:	801a      	strh	r2, [r3, #0]				Forward(200,10); 1d4:	f04f 00c8 	mov.w	r0, #200	; 0xc8 1d8:	f04f 010a 	mov.w	r1, #10 1dc:	f7ff fffe 	bl	0 <main>			1dc: R_ARM_THM_CALL	Forward				if(clearreadingR2 < 200 && clearreadingR2 > 80 && oneLineTwo == 0) 1e0:	f240 0300 	movw	r3, #0			1e0: R_ARM_THM_MOVW_ABS_NC	clearreadingR2 1e4:	f2c0 0300 	movt	r3, #0			1e4: R_ARM_THM_MOVT_ABS	clearreadingR2 1e8:	881b      	ldrh	r3, [r3, #0] 1ea:	b29b      	uxth	r3, r3 1ec:	b21b      	sxth	r3, r3 1ee:	2bc7      	cmp	r3, #199	; 0xc7 1f0:	dc1e      	bgt.n	230 <main+0x230> 1f2:	f240 0300 	movw	r3, #0			1f2: R_ARM_THM_MOVW_ABS_NC	clearreadingR2 1f6:	f2c0 0300 	movt	r3, #0			1f6: R_ARM_THM_MOVT_ABS	clearreadingR2 1fa:	881b      	ldrh	r3, [r3, #0] 1fc:	b29b      	uxth	r3, r3 1fe:	b21b      	sxth	r3, r3 200:	2b50      	cmp	r3, #80	; 0x50 202:	dd15      	ble.n	230 <main+0x230> 204:	f240 0300 	movw	r3, #0			204: R_ARM_THM_MOVW_ABS_NC	oneLineTwo 208:	f2c0 0300 	movt	r3, #0			208: R_ARM_THM_MOVT_ABS	oneLineTwo 20c:	881b      	ldrh	r3, [r3, #0] 20e:	b29b      	uxth	r3, r3 210:	2b00      	cmp	r3, #0 212:	d10d      	bne.n	230 <main+0x230>				{					LsetSpeed = 5; 214:	f240 0300 	movw	r3, #0			214: R_ARM_THM_MOVW_ABS_NC	LsetSpeed 218:	f2c0 0300 	movt	r3, #0			218: R_ARM_THM_MOVT_ABS	LsetSpeed 21c:	f04f 0205 	mov.w	r2, #5 220:	801a      	strh	r2, [r3, #0]					RsetSpeed = 0; 222:	f240 0300 	movw	r3, #0			222: R_ARM_THM_MOVW_ABS_NC	RsetSpeed 226:	f2c0 0300 	movt	r3, #0			226: R_ARM_THM_MOVT_ABS	RsetSpeed 22a:	f04f 0200 	mov.w	r2, #0 22e:	801a      	strh	r2, [r3, #0]				}				if(clearreadingR2<= 80) 230:	f240 0300 	movw	r3, #0			230: R_ARM_THM_MOVW_ABS_NC	clearreadingR2 234:	f2c0 0300 	movt	r3, #0			234: R_ARM_THM_MOVT_ABS	clearreadingR2 238:	881b      	ldrh	r3, [r3, #0] 23a:	b29b      	uxth	r3, r3 23c:	b21b      	sxth	r3, r3 23e:	2b50      	cmp	r3, #80	; 0x50 240:	dc14      	bgt.n	26c <main+0x26c>				{					LsetSpeed = 0; 242:	f240 0300 	movw	r3, #0			242: R_ARM_THM_MOVW_ABS_NC	LsetSpeed 246:	f2c0 0300 	movt	r3, #0			246: R_ARM_THM_MOVT_ABS	LsetSpeed 24a:	f04f 0200 	mov.w	r2, #0 24e:	801a      	strh	r2, [r3, #0]					RsetSpeed = -5; 250:	f240 0300 	movw	r3, #0			250: R_ARM_THM_MOVW_ABS_NC	RsetSpeed 254:	f2c0 0300 	movt	r3, #0			254: R_ARM_THM_MOVT_ABS	RsetSpeed 258:	f64f 72fb 	movw	r2, #65531	; 0xfffb 25c:	801a      	strh	r2, [r3, #0]					oneLineTwo = 1; 25e:	f240 0300 	movw	r3, #0			25e: R_ARM_THM_MOVW_ABS_NC	oneLineTwo 262:	f2c0 0300 	movt	r3, #0			262: R_ARM_THM_MOVT_ABS	oneLineTwo 266:	f04f 0201 	mov.w	r2, #1 26a:	801a      	strh	r2, [r3, #0]				}				if(clearreadingR2 >= 220) 26c:	f240 0300 	movw	r3, #0			26c: R_ARM_THM_MOVW_ABS_NC	clearreadingR2 270:	f2c0 0300 	movt	r3, #0			270: R_ARM_THM_MOVT_ABS	clearreadingR2 274:	881b      	ldrh	r3, [r3, #0] 276:	b29b      	uxth	r3, r3 278:	b21b      	sxth	r3, r3 27a:	2bdb      	cmp	r3, #219	; 0xdb 27c:	dd06      	ble.n	28c <main+0x28c>				{					oneLineTwo = 0; 27e:	f240 0300 	movw	r3, #0			27e: R_ARM_THM_MOVW_ABS_NC	oneLineTwo 282:	f2c0 0300 	movt	r3, #0			282: R_ARM_THM_MOVT_ABS	oneLineTwo 286:	f04f 0200 	mov.w	r2, #0 28a:	801a      	strh	r2, [r3, #0]				}				fin3 = 0; 28c:	f240 0300 	movw	r3, #0			28c: R_ARM_THM_MOVW_ABS_NC	fin3 290:	f2c0 0300 	movt	r3, #0			290: R_ARM_THM_MOVT_ABS	fin3 294:	f04f 0200 	mov.w	r2, #0 298:	801a      	strh	r2, [r3, #0]				if(fin1 == 1) 29a:	f240 0300 	movw	r3, #0			29a: R_ARM_THM_MOVW_ABS_NC	fin1 29e:	f2c0 0300 	movt	r3, #0			29e: R_ARM_THM_MOVT_ABS	fin1 2a2:	881b      	ldrh	r3, [r3, #0] 2a4:	b29b      	uxth	r3, r3 2a6:	b21b      	sxth	r3, r3 2a8:	2b01      	cmp	r3, #1 2aa:	f040 8135 	bne.w	518 <main+0x518>				{					cse1 = 4; 2ae:	f240 0300 	movw	r3, #0			2ae: R_ARM_THM_MOVW_ABS_NC	cse1 2b2:	f2c0 0300 	movt	r3, #0			2b2: R_ARM_THM_MOVT_ABS	cse1 2b6:	f04f 0204 	mov.w	r2, #4 2ba:	801a      	strh	r2, [r3, #0]					fin1 = 0; 2bc:	f240 0300 	movw	r3, #0			2bc: R_ARM_THM_MOVW_ABS_NC	fin1 2c0:	f2c0 0300 	movt	r3, #0			2c0: R_ARM_THM_MOVT_ABS	fin1 2c4:	f04f 0200 	mov.w	r2, #0 2c8:	801a      	strh	r2, [r3, #0]				}			}			break; 2ca:	e125      	b.n	518 <main+0x518>	case 4: stop(); 2cc:	f7ff fffe 	bl	0 <main>			2cc: R_ARM_THM_CALL	stop			if(stageOne != 3) 2d0:	f240 0300 	movw	r3, #0			2d0: R_ARM_THM_MOVW_ABS_NC	stageOne 2d4:	f2c0 0300 	movt	r3, #0			2d4: R_ARM_THM_MOVT_ABS	stageOne 2d8:	881b      	ldrh	r3, [r3, #0] 2da:	b29b      	uxth	r3, r3 2dc:	b21b      	sxth	r3, r3 2de:	2b03      	cmp	r3, #3 2e0:	d00d      	beq.n	2fe <main+0x2fe>			{				LsetSpeed = 10; 2e2:	f240 0300 	movw	r3, #0			2e2: R_ARM_THM_MOVW_ABS_NC	LsetSpeed 2e6:	f2c0 0300 	movt	r3, #0			2e6: R_ARM_THM_MOVT_ABS	LsetSpeed 2ea:	f04f 020a 	mov.w	r2, #10 2ee:	801a      	strh	r2, [r3, #0]				RsetSpeed = -20; 2f0:	f240 0300 	movw	r3, #0			2f0: R_ARM_THM_MOVW_ABS_NC	RsetSpeed 2f4:	f2c0 0300 	movt	r3, #0			2f4: R_ARM_THM_MOVT_ABS	RsetSpeed 2f8:	f64f 72ec 	movw	r2, #65516	; 0xffec 2fc:	801a      	strh	r2, [r3, #0]			}			if(clearreadingRB > 180) 2fe:	f240 0300 	movw	r3, #0			2fe: R_ARM_THM_MOVW_ABS_NC	clearreadingRB 302:	f2c0 0300 	movt	r3, #0			302: R_ARM_THM_MOVT_ABS	clearreadingRB 306:	881b      	ldrh	r3, [r3, #0] 308:	b29b      	uxth	r3, r3 30a:	b21b      	sxth	r3, r3 30c:	2bb4      	cmp	r3, #180	; 0xb4 30e:	dd06      	ble.n	31e <main+0x31e>			{				stageOne = 1; 310:	f240 0300 	movw	r3, #0			310: R_ARM_THM_MOVW_ABS_NC	stageOne 314:	f2c0 0300 	movt	r3, #0			314: R_ARM_THM_MOVT_ABS	stageOne 318:	f04f 0201 	mov.w	r2, #1 31c:	801a      	strh	r2, [r3, #0]			}			if(clearreadingR1 >= 100 && stageOne == 1) 31e:	f240 0300 	movw	r3, #0			31e: R_ARM_THM_MOVW_ABS_NC	clearreadingR1 322:	f2c0 0300 	movt	r3, #0			322: R_ARM_THM_MOVT_ABS	clearreadingR1 326:	881b      	ldrh	r3, [r3, #0] 328:	b29b      	uxth	r3, r3 32a:	b21b      	sxth	r3, r3 32c:	2b63      	cmp	r3, #99	; 0x63 32e:	f340 80f5 	ble.w	51c <main+0x51c> 332:	f240 0300 	movw	r3, #0			332: R_ARM_THM_MOVW_ABS_NC	stageOne 336:	f2c0 0300 	movt	r3, #0			336: R_ARM_THM_MOVT_ABS	stageOne 33a:	881b      	ldrh	r3, [r3, #0] 33c:	b29b      	uxth	r3, r3 33e:	b21b      	sxth	r3, r3 340:	2b01      	cmp	r3, #1 342:	f040 80eb 	bne.w	51c <main+0x51c>			{				stop(); 346:	f7ff fffe 	bl	0 <main>			346: R_ARM_THM_CALL	stop				cse1 = 5; 34a:	f240 0300 	movw	r3, #0			34a: R_ARM_THM_MOVW_ABS_NC	cse1 34e:	f2c0 0300 	movt	r3, #0			34e: R_ARM_THM_MOVT_ABS	cse1 352:	f04f 0205 	mov.w	r2, #5 356:	801a      	strh	r2, [r3, #0]				stageOne = 3; 358:	f240 0300 	movw	r3, #0			358: R_ARM_THM_MOVW_ABS_NC	stageOne 35c:	f2c0 0300 	movt	r3, #0			35c: R_ARM_THM_MOVT_ABS	stageOne 360:	f04f 0203 	mov.w	r2, #3 364:	801a      	strh	r2, [r3, #0]			}			break; 366:	e0d9      	b.n	51c <main+0x51c>	case 5: if(clearreadingR1 < 240 && f6 == 0) 368:	f240 0300 	movw	r3, #0			368: R_ARM_THM_MOVW_ABS_NC	clearreadingR1 36c:	f2c0 0300 	movt	r3, #0			36c: R_ARM_THM_MOVT_ABS	clearreadingR1 370:	881b      	ldrh	r3, [r3, #0] 372:	b29b      	uxth	r3, r3 374:	b21b      	sxth	r3, r3 376:	2bef      	cmp	r3, #239	; 0xef 378:	dc16      	bgt.n	3a8 <main+0x3a8> 37a:	f240 0300 	movw	r3, #0			37a: R_ARM_THM_MOVW_ABS_NC	f6 37e:	f2c0 0300 	movt	r3, #0			37e: R_ARM_THM_MOVT_ABS	f6 382:	881b      	ldrh	r3, [r3, #0] 384:	b29b      	uxth	r3, r3 386:	2b00      	cmp	r3, #0 388:	d10e      	bne.n	3a8 <main+0x3a8>	{		LsetSpeed = 0; 38a:	f240 0300 	movw	r3, #0			38a: R_ARM_THM_MOVW_ABS_NC	LsetSpeed 38e:	f2c0 0300 	movt	r3, #0			38e: R_ARM_THM_MOVT_ABS	LsetSpeed 392:	f04f 0200 	mov.w	r2, #0 396:	801a      	strh	r2, [r3, #0]		RsetSpeed = 10; 398:	f240 0300 	movw	r3, #0			398: R_ARM_THM_MOVW_ABS_NC	RsetSpeed 39c:	f2c0 0300 	movt	r3, #0			39c: R_ARM_THM_MOVT_ABS	RsetSpeed 3a0:	f04f 020a 	mov.w	r2, #10 3a4:	801a      	strh	r2, [r3, #0] 3a6:	e017      	b.n	3d8 <main+0x3d8>	}	else if(clearreadingR1 >=240 && f6 == 0) 3a8:	f240 0300 	movw	r3, #0			3a8: R_ARM_THM_MOVW_ABS_NC	clearreadingR1 3ac:	f2c0 0300 	movt	r3, #0			3ac: R_ARM_THM_MOVT_ABS	clearreadingR1 3b0:	881b      	ldrh	r3, [r3, #0] 3b2:	b29b      	uxth	r3, r3 3b4:	b21b      	sxth	r3, r3 3b6:	2bef      	cmp	r3, #239	; 0xef 3b8:	dd0e      	ble.n	3d8 <main+0x3d8> 3ba:	f240 0300 	movw	r3, #0			3ba: R_ARM_THM_MOVW_ABS_NC	f6 3be:	f2c0 0300 	movt	r3, #0			3be: R_ARM_THM_MOVT_ABS	f6 3c2:	881b      	ldrh	r3, [r3, #0] 3c4:	b29b      	uxth	r3, r3 3c6:	2b00      	cmp	r3, #0 3c8:	d106      	bne.n	3d8 <main+0x3d8>	{		f6 = 1; 3ca:	f240 0300 	movw	r3, #0			3ca: R_ARM_THM_MOVW_ABS_NC	f6 3ce:	f2c0 0300 	movt	r3, #0			3ce: R_ARM_THM_MOVT_ABS	f6 3d2:	f04f 0201 	mov.w	r2, #1 3d6:	801a      	strh	r2, [r3, #0]	}	if(clearreadingRB < 200 && f6 == 1) 3d8:	f240 0300 	movw	r3, #0			3d8: R_ARM_THM_MOVW_ABS_NC	clearreadingRB 3dc:	f2c0 0300 	movt	r3, #0			3dc: R_ARM_THM_MOVT_ABS	clearreadingRB 3e0:	881b      	ldrh	r3, [r3, #0] 3e2:	b29b      	uxth	r3, r3 3e4:	b21b      	sxth	r3, r3 3e6:	2bc7      	cmp	r3, #199	; 0xc7 3e8:	dc17      	bgt.n	41a <main+0x41a> 3ea:	f240 0300 	movw	r3, #0			3ea: R_ARM_THM_MOVW_ABS_NC	f6 3ee:	f2c0 0300 	movt	r3, #0			3ee: R_ARM_THM_MOVT_ABS	f6 3f2:	881b      	ldrh	r3, [r3, #0] 3f4:	b29b      	uxth	r3, r3 3f6:	b21b      	sxth	r3, r3 3f8:	2b01      	cmp	r3, #1 3fa:	d10e      	bne.n	41a <main+0x41a>	{		LsetSpeed = 5; 3fc:	f240 0300 	movw	r3, #0			3fc: R_ARM_THM_MOVW_ABS_NC	LsetSpeed 400:	f2c0 0300 	movt	r3, #0			400: R_ARM_THM_MOVT_ABS	LsetSpeed 404:	f04f 0205 	mov.w	r2, #5 408:	801a      	strh	r2, [r3, #0]		RsetSpeed = -5; 40a:	f240 0300 	movw	r3, #0			40a: R_ARM_THM_MOVW_ABS_NC	RsetSpeed 40e:	f2c0 0300 	movt	r3, #0			40e: R_ARM_THM_MOVT_ABS	RsetSpeed 412:	f64f 72fb 	movw	r2, #65531	; 0xfffb 416:	801a      	strh	r2, [r3, #0] 418:	e018      	b.n	44c <main+0x44c>	}	else if(clearreadingRB >= 200 && f6 == 1) 41a:	f240 0300 	movw	r3, #0			41a: R_ARM_THM_MOVW_ABS_NC	clearreadingRB 41e:	f2c0 0300 	movt	r3, #0			41e: R_ARM_THM_MOVT_ABS	clearreadingRB 422:	881b      	ldrh	r3, [r3, #0] 424:	b29b      	uxth	r3, r3 426:	b21b      	sxth	r3, r3 428:	2bc7      	cmp	r3, #199	; 0xc7 42a:	dd0f      	ble.n	44c <main+0x44c> 42c:	f240 0300 	movw	r3, #0			42c: R_ARM_THM_MOVW_ABS_NC	f6 430:	f2c0 0300 	movt	r3, #0			430: R_ARM_THM_MOVT_ABS	f6 434:	881b      	ldrh	r3, [r3, #0] 436:	b29b      	uxth	r3, r3 438:	b21b      	sxth	r3, r3 43a:	2b01      	cmp	r3, #1 43c:	d106      	bne.n	44c <main+0x44c>	{		f6 = 2; 43e:	f240 0300 	movw	r3, #0			43e: R_ARM_THM_MOVW_ABS_NC	f6 442:	f2c0 0300 	movt	r3, #0			442: R_ARM_THM_MOVT_ABS	f6 446:	f04f 0202 	mov.w	r2, #2 44a:	801a      	strh	r2, [r3, #0]	}	if(clearreadingR1 < 200 && f6 == 2) 44c:	f240 0300 	movw	r3, #0			44c: R_ARM_THM_MOVW_ABS_NC	clearreadingR1 450:	f2c0 0300 	movt	r3, #0			450: R_ARM_THM_MOVT_ABS	clearreadingR1 454:	881b      	ldrh	r3, [r3, #0] 456:	b29b      	uxth	r3, r3 458:	b21b      	sxth	r3, r3 45a:	2bc7      	cmp	r3, #199	; 0xc7 45c:	dc17      	bgt.n	48e <main+0x48e> 45e:	f240 0300 	movw	r3, #0			45e: R_ARM_THM_MOVW_ABS_NC	f6 462:	f2c0 0300 	movt	r3, #0			462: R_ARM_THM_MOVT_ABS	f6 466:	881b      	ldrh	r3, [r3, #0] 468:	b29b      	uxth	r3, r3 46a:	b21b      	sxth	r3, r3 46c:	2b02      	cmp	r3, #2 46e:	d10e      	bne.n	48e <main+0x48e>	{		LsetSpeed = 5; 470:	f240 0300 	movw	r3, #0			470: R_ARM_THM_MOVW_ABS_NC	LsetSpeed 474:	f2c0 0300 	movt	r3, #0			474: R_ARM_THM_MOVT_ABS	LsetSpeed 478:	f04f 0205 	mov.w	r2, #5 47c:	801a      	strh	r2, [r3, #0]		RsetSpeed = 0; 47e:	f240 0300 	movw	r3, #0			47e: R_ARM_THM_MOVW_ABS_NC	RsetSpeed 482:	f2c0 0300 	movt	r3, #0			482: R_ARM_THM_MOVT_ABS	RsetSpeed 486:	f04f 0200 	mov.w	r2, #0 48a:	801a      	strh	r2, [r3, #0] 48c:	e018      	b.n	4c0 <main+0x4c0>	}	else if(clearreadingR1 >= 200 && f6 == 2) 48e:	f240 0300 	movw	r3, #0			48e: R_ARM_THM_MOVW_ABS_NC	clearreadingR1 492:	f2c0 0300 	movt	r3, #0			492: R_ARM_THM_MOVT_ABS	clearreadingR1 496:	881b      	ldrh	r3, [r3, #0] 498:	b29b      	uxth	r3, r3 49a:	b21b      	sxth	r3, r3 49c:	2bc7      	cmp	r3, #199	; 0xc7 49e:	dd0f      	ble.n	4c0 <main+0x4c0> 4a0:	f240 0300 	movw	r3, #0			4a0: R_ARM_THM_MOVW_ABS_NC	f6 4a4:	f2c0 0300 	movt	r3, #0			4a4: R_ARM_THM_MOVT_ABS	f6 4a8:	881b      	ldrh	r3, [r3, #0] 4aa:	b29b      	uxth	r3, r3 4ac:	b21b      	sxth	r3, r3 4ae:	2b02      	cmp	r3, #2 4b0:	d106      	bne.n	4c0 <main+0x4c0>	{		f6 = 3; 4b2:	f240 0300 	movw	r3, #0			4b2: R_ARM_THM_MOVW_ABS_NC	f6 4b6:	f2c0 0300 	movt	r3, #0			4b6: R_ARM_THM_MOVT_ABS	f6 4ba:	f04f 0203 	mov.w	r2, #3 4be:	801a      	strh	r2, [r3, #0]	}	if(clearreadingR1 > 240 && clearreadingRB > 150 && f6 == 3) 4c0:	f240 0300 	movw	r3, #0			4c0: R_ARM_THM_MOVW_ABS_NC	clearreadingR1 4c4:	f2c0 0300 	movt	r3, #0			4c4: R_ARM_THM_MOVT_ABS	clearreadingR1 4c8:	881b      	ldrh	r3, [r3, #0] 4ca:	b29b      	uxth	r3, r3 4cc:	b21b      	sxth	r3, r3 4ce:	2bf0      	cmp	r3, #240	; 0xf0 4d0:	dd26      	ble.n	520 <main+0x520> 4d2:	f240 0300 	movw	r3, #0			4d2: R_ARM_THM_MOVW_ABS_NC	clearreadingRB 4d6:	f2c0 0300 	movt	r3, #0			4d6: R_ARM_THM_MOVT_ABS	clearreadingRB 4da:	881b      	ldrh	r3, [r3, #0] 4dc:	b29b      	uxth	r3, r3 4de:	b21b      	sxth	r3, r3 4e0:	2b96      	cmp	r3, #150	; 0x96 4e2:	dd1d      	ble.n	520 <main+0x520> 4e4:	f240 0300 	movw	r3, #0			4e4: R_ARM_THM_MOVW_ABS_NC	f6 4e8:	f2c0 0300 	movt	r3, #0			4e8: R_ARM_THM_MOVT_ABS	f6 4ec:	881b      	ldrh	r3, [r3, #0] 4ee:	b29b      	uxth	r3, r3 4f0:	b21b      	sxth	r3, r3 4f2:	2b03      	cmp	r3, #3 4f4:	d114      	bne.n	520 <main+0x520>	{		cse1 = 6; 4f6:	f240 0300 	movw	r3, #0			4f6: R_ARM_THM_MOVW_ABS_NC	cse1 4fa:	f2c0 0300 	movt	r3, #0			4fa: R_ARM_THM_MOVT_ABS	cse1 4fe:	f04f 0206 	mov.w	r2, #6 502:	801a      	strh	r2, [r3, #0]		f6 = 0; 504:	f240 0300 	movw	r3, #0			504: R_ARM_THM_MOVW_ABS_NC	f6 508:	f2c0 0300 	movt	r3, #0			508: R_ARM_THM_MOVT_ABS	f6 50c:	f04f 0200 	mov.w	r2, #0 510:	801a      	strh	r2, [r3, #0]	}			break; 512:	e005      	b.n	520 <main+0x520>			if(fin3 == 1)			{				cse1 = 2;				fin3 = 0;			}			break; 514:	bf00      	nop 516:	e004      	b.n	522 <main+0x522>				{					cse1 = 4;					fin1 = 0;				}			}			break; 518:	bf00      	nop 51a:	e002      	b.n	522 <main+0x522>			{				stop();				cse1 = 5;				stageOne = 3;			}			break; 51c:	bf00      	nop 51e:	e000      	b.n	522 <main+0x522>	if(clearreadingR1 > 240 && clearreadingRB > 150 && f6 == 3)	{		cse1 = 6;		f6 = 0;	}			break; 520:	bf00      	nop	}detectPellet(pellet);moveToMidLine();*/	saveRight = 0;	while(cse1!= 6) 522:	f240 0300 	movw	r3, #0			522: R_ARM_THM_MOVW_ABS_NC	cse1 526:	f2c0 0300 	movt	r3, #0			526: R_ARM_THM_MOVT_ABS	cse1 52a:	881b      	ldrh	r3, [r3, #0] 52c:	b29b      	uxth	r3, r3 52e:	b21b      	sxth	r3, r3 530:	2b06      	cmp	r3, #6 532:	f47f adca 	bne.w	ca <main+0xca>	}			break;		}	}	if(cse1 == 6) 536:	f240 0300 	movw	r3, #0			536: R_ARM_THM_MOVW_ABS_NC	cse1 53a:	f2c0 0300 	movt	r3, #0			53a: R_ARM_THM_MOVT_ABS	cse1 53e:	881b      	ldrh	r3, [r3, #0] 540:	b29b      	uxth	r3, r3 542:	b21b      	sxth	r3, r3 544:	2b06      	cmp	r3, #6 546:	d101      	bne.n	54c <main+0x54c>	{		stop(); 548:	f7ff fffe 	bl	0 <main>			548: R_ARM_THM_CALL	stop	}							scADC0_SE15;				// start ADC conversion of signal at single-ended ADC0_SE8 pin    54c:	f44f 4330 	mov.w	r3, #45056	; 0xb000 550:	f2c4 0303 	movt	r3, #16387	; 0x4003 554:	f04f 020f 	mov.w	r2, #15 558:	601a      	str	r2, [r3, #0]		 	  while (ADC0_COCO == 0);	// wait for conversion completed (COCO) before reading ADC value 55a:	bf00      	nop 55c:	f44f 4330 	mov.w	r3, #45056	; 0xb000 560:	f2c4 0303 	movt	r3, #16387	; 0x4003 564:	681b      	ldr	r3, [r3, #0] 566:	f003 0380 	and.w	r3, r3, #128	; 0x80 56a:	ea4f 13d3 	mov.w	r3, r3, lsr #7 56e:	2b00      	cmp	r3, #0 570:	d0f4      	beq.n	55c <main+0x55c>		 	  Pellet_in = ADC0_RA; 572:	f44f 4330 	mov.w	r3, #45056	; 0xb000 576:	f2c4 0303 	movt	r3, #16387	; 0x4003 57a:	691b      	ldr	r3, [r3, #16] 57c:	461a      	mov	r2, r3 57e:	f240 0300 	movw	r3, #0			57e: R_ARM_THM_MOVW_ABS_NC	Pellet_in 582:	f2c0 0300 	movt	r3, #0			582: R_ARM_THM_MOVT_ABS	Pellet_in 586:	601a      	str	r2, [r3, #0]		 	  		 	  		 		  		 	 if(CMUDetectedState == 0){ 588:	f240 0300 	movw	r3, #0			588: R_ARM_THM_MOVW_ABS_NC	CMUDetectedState 58c:	f2c0 0300 	movt	r3, #0			58c: R_ARM_THM_MOVT_ABS	CMUDetectedState 590:	681b      	ldr	r3, [r3, #0] 592:	2b00      	cmp	r3, #0 594:	d141      	bne.n	61a <main+0x61a>			 	 // if(Obj1xcenter>=130 && Obj1xcenter<=200){			 	 if(Obj1xcenter>=155 && Obj1xcenter<=175){ 596:	f240 0300 	movw	r3, #0			596: R_ARM_THM_MOVW_ABS_NC	Obj1xcenter 59a:	f2c0 0300 	movt	r3, #0			59a: R_ARM_THM_MOVT_ABS	Obj1xcenter 59e:	681b      	ldr	r3, [r3, #0] 5a0:	2b9a      	cmp	r3, #154	; 0x9a 5a2:	dd2b      	ble.n	5fc <main+0x5fc> 5a4:	f240 0300 	movw	r3, #0			5a4: R_ARM_THM_MOVW_ABS_NC	Obj1xcenter 5a8:	f2c0 0300 	movt	r3, #0			5a8: R_ARM_THM_MOVT_ABS	Obj1xcenter 5ac:	681b      	ldr	r3, [r3, #0] 5ae:	2baf      	cmp	r3, #175	; 0xaf 5b0:	dc24      	bgt.n	5fc <main+0x5fc>			 		detected = 1; 5b2:	f240 0300 	movw	r3, #0			5b2: R_ARM_THM_MOVW_ABS_NC	detected 5b6:	f2c0 0300 	movt	r3, #0			5b6: R_ARM_THM_MOVT_ABS	detected 5ba:	f04f 0201 	mov.w	r2, #1 5be:	601a      	str	r2, [r3, #0]			 		move = 1; 5c0:	f240 0300 	movw	r3, #0			5c0: R_ARM_THM_MOVW_ABS_NC	move 5c4:	f2c0 0300 	movt	r3, #0			5c4: R_ARM_THM_MOVT_ABS	move 5c8:	f04f 0201 	mov.w	r2, #1 5cc:	601a      	str	r2, [r3, #0]			 		PTE4o = 0; 5ce:	f44f 4371 	mov.w	r3, #61696	; 0xf100 5d2:	f2c4 030f 	movt	r3, #16399	; 0x400f 5d6:	681a      	ldr	r2, [r3, #0] 5d8:	f36f 1204 	bfc	r2, #4, #1 5dc:	601a      	str	r2, [r3, #0]			 		Obj1xcenter = 0; 5de:	f240 0300 	movw	r3, #0			5de: R_ARM_THM_MOVW_ABS_NC	Obj1xcenter 5e2:	f2c0 0300 	movt	r3, #0			5e2: R_ARM_THM_MOVT_ABS	Obj1xcenter 5e6:	f04f 0200 	mov.w	r2, #0 5ea:	601a      	str	r2, [r3, #0]			 		CMUDetectedState = 1; 5ec:	f240 0300 	movw	r3, #0			5ec: R_ARM_THM_MOVW_ABS_NC	CMUDetectedState 5f0:	f2c0 0300 	movt	r3, #0			5f0: R_ARM_THM_MOVT_ABS	CMUDetectedState 5f4:	f04f 0201 	mov.w	r2, #1 5f8:	601a      	str	r2, [r3, #0] 5fa:	e00e      	b.n	61a <main+0x61a>			 	 }			 	 else{			 		detected = 5; 5fc:	f240 0300 	movw	r3, #0			5fc: R_ARM_THM_MOVW_ABS_NC	detected 600:	f2c0 0300 	movt	r3, #0			600: R_ARM_THM_MOVT_ABS	detected 604:	f04f 0205 	mov.w	r2, #5 608:	601a      	str	r2, [r3, #0]			 		PTE4o = 1; 60a:	f44f 4371 	mov.w	r3, #61696	; 0xf100 60e:	f2c4 030f 	movt	r3, #16399	; 0x400f 612:	681a      	ldr	r2, [r3, #0] 614:	f042 0210 	orr.w	r2, r2, #16 618:	601a      	str	r2, [r3, #0]			 	 }		 	 }		 	 detectPellet(detected); 61a:	f240 0300 	movw	r3, #0			61a: R_ARM_THM_MOVW_ABS_NC	detected 61e:	f2c0 0300 	movt	r3, #0			61e: R_ARM_THM_MOVT_ABS	detected 622:	681b      	ldr	r3, [r3, #0] 624:	4618      	mov	r0, r3 626:	f7ff fffe 	bl	0 <main>			626: R_ARM_THM_CALL	detectPellet		 	  		 	 if (period >= 60 && period <= 150 && Pellet_in > 1000) { 62a:	f240 0300 	movw	r3, #0			62a: R_ARM_THM_MOVW_ABS_NC	period 62e:	f2c0 0300 	movt	r3, #0			62e: R_ARM_THM_MOVT_ABS	period 632:	681b      	ldr	r3, [r3, #0] 634:	2b3b      	cmp	r3, #59	; 0x3b 636:	f340 80ee 	ble.w	816 <main+0x816> 63a:	f240 0300 	movw	r3, #0			63a: R_ARM_THM_MOVW_ABS_NC	period 63e:	f2c0 0300 	movt	r3, #0			63e: R_ARM_THM_MOVT_ABS	period 642:	681b      	ldr	r3, [r3, #0] 644:	2b96      	cmp	r3, #150	; 0x96 646:	f300 80e6 	bgt.w	816 <main+0x816> 64a:	f240 0300 	movw	r3, #0			64a: R_ARM_THM_MOVW_ABS_NC	Pellet_in 64e:	f2c0 0300 	movt	r3, #0			64e: R_ARM_THM_MOVT_ABS	Pellet_in 652:	681b      	ldr	r3, [r3, #0] 654:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8 658:	f340 80dd 	ble.w	816 <main+0x816>		 		if(Servo == 3){ 65c:	f240 0300 	movw	r3, #0			65c: R_ARM_THM_MOVW_ABS_NC	Servo 660:	f2c0 0300 	movt	r3, #0			660: R_ARM_THM_MOVT_ABS	Servo 664:	681b      	ldr	r3, [r3, #0] 666:	2b03      	cmp	r3, #3 668:	f040 80a0 	bne.w	7ac <main+0x7ac>		 			  colour = 'G'; 66c:	f240 0300 	movw	r3, #0			66c: R_ARM_THM_MOVW_ABS_NC	colour 670:	f2c0 0300 	movt	r3, #0			670: R_ARM_THM_MOVT_ABS	colour 674:	f04f 0247 	mov.w	r2, #71	; 0x47 678:	701a      	strb	r2, [r3, #0]		 			  writeAXRegister(WheelMode); 67a:	f240 0000 	movw	r0, #0			67a: R_ARM_THM_MOVW_ABS_NC	WheelMode 67e:	f2c0 0000 	movt	r0, #0			67e: R_ARM_THM_MOVT_ABS	WheelMode 682:	f7ff fffe 	bl	0 <main>			682: R_ARM_THM_CALL	writeAXRegister		 			  for(i=0;i<100;i++); 686:	f240 0300 	movw	r3, #0			686: R_ARM_THM_MOVW_ABS_NC	i 68a:	f2c0 0300 	movt	r3, #0			68a: R_ARM_THM_MOVT_ABS	i 68e:	f04f 0200 	mov.w	r2, #0 692:	601a      	str	r2, [r3, #0] 694:	e00b      	b.n	6ae <main+0x6ae> 696:	f240 0300 	movw	r3, #0			696: R_ARM_THM_MOVW_ABS_NC	i 69a:	f2c0 0300 	movt	r3, #0			69a: R_ARM_THM_MOVT_ABS	i 69e:	681b      	ldr	r3, [r3, #0] 6a0:	f103 0201 	add.w	r2, r3, #1 6a4:	f240 0300 	movw	r3, #0			6a4: R_ARM_THM_MOVW_ABS_NC	i 6a8:	f2c0 0300 	movt	r3, #0			6a8: R_ARM_THM_MOVT_ABS	i 6ac:	601a      	str	r2, [r3, #0] 6ae:	f240 0300 	movw	r3, #0			6ae: R_ARM_THM_MOVW_ABS_NC	i 6b2:	f2c0 0300 	movt	r3, #0			6b2: R_ARM_THM_MOVT_ABS	i 6b6:	681b      	ldr	r3, [r3, #0] 6b8:	2b63      	cmp	r3, #99	; 0x63 6ba:	ddec      	ble.n	696 <main+0x696>		 			 writeAXRegister(MoveCCW); 6bc:	f240 0000 	movw	r0, #0			6bc: R_ARM_THM_MOVW_ABS_NC	MoveCCW 6c0:	f2c0 0000 	movt	r0, #0			6c0: R_ARM_THM_MOVT_ABS	MoveCCW 6c4:	f7ff fffe 	bl	0 <main>			6c4: R_ARM_THM_CALL	writeAXRegister		 			 for(i=0;i<75000;i++); 6c8:	f240 0300 	movw	r3, #0			6c8: R_ARM_THM_MOVW_ABS_NC	i 6cc:	f2c0 0300 	movt	r3, #0			6cc: R_ARM_THM_MOVT_ABS	i 6d0:	f04f 0200 	mov.w	r2, #0 6d4:	601a      	str	r2, [r3, #0] 6d6:	e00b      	b.n	6f0 <main+0x6f0> 6d8:	f240 0300 	movw	r3, #0			6d8: R_ARM_THM_MOVW_ABS_NC	i 6dc:	f2c0 0300 	movt	r3, #0			6dc: R_ARM_THM_MOVT_ABS	i 6e0:	681b      	ldr	r3, [r3, #0] 6e2:	f103 0201 	add.w	r2, r3, #1 6e6:	f240 0300 	movw	r3, #0			6e6: R_ARM_THM_MOVW_ABS_NC	i 6ea:	f2c0 0300 	movt	r3, #0			6ea: R_ARM_THM_MOVT_ABS	i 6ee:	601a      	str	r2, [r3, #0] 6f0:	f240 0300 	movw	r3, #0			6f0: R_ARM_THM_MOVW_ABS_NC	i 6f4:	f2c0 0300 	movt	r3, #0			6f4: R_ARM_THM_MOVT_ABS	i 6f8:	681a      	ldr	r2, [r3, #0] 6fa:	f242 43f7 	movw	r3, #9463	; 0x24f7 6fe:	f2c0 0301 	movt	r3, #1 702:	429a      	cmp	r2, r3 704:	dde8      	ble.n	6d8 <main+0x6d8>		 			 writeAXRegister(StopMoving); 706:	f240 0000 	movw	r0, #0			706: R_ARM_THM_MOVW_ABS_NC	StopMoving 70a:	f2c0 0000 	movt	r0, #0			70a: R_ARM_THM_MOVT_ABS	StopMoving 70e:	f7ff fffe 	bl	0 <main>			70e: R_ARM_THM_CALL	writeAXRegister		 			 for(i=0;i<100;i++); 712:	f240 0300 	movw	r3, #0			712: R_ARM_THM_MOVW_ABS_NC	i 716:	f2c0 0300 	movt	r3, #0			716: R_ARM_THM_MOVT_ABS	i 71a:	f04f 0200 	mov.w	r2, #0 71e:	601a      	str	r2, [r3, #0] 720:	e00b      	b.n	73a <main+0x73a> 722:	f240 0300 	movw	r3, #0			722: R_ARM_THM_MOVW_ABS_NC	i 726:	f2c0 0300 	movt	r3, #0			726: R_ARM_THM_MOVT_ABS	i 72a:	681b      	ldr	r3, [r3, #0] 72c:	f103 0201 	add.w	r2, r3, #1 730:	f240 0300 	movw	r3, #0			730: R_ARM_THM_MOVW_ABS_NC	i 734:	f2c0 0300 	movt	r3, #0			734: R_ARM_THM_MOVT_ABS	i 738:	601a      	str	r2, [r3, #0] 73a:	f240 0300 	movw	r3, #0			73a: R_ARM_THM_MOVW_ABS_NC	i 73e:	f2c0 0300 	movt	r3, #0			73e: R_ARM_THM_MOVT_ABS	i 742:	681b      	ldr	r3, [r3, #0] 744:	2b63      	cmp	r3, #99	; 0x63 746:	ddec      	ble.n	722 <main+0x722>		 			 writeAXRegister(ServoMode); 748:	f240 0000 	movw	r0, #0			748: R_ARM_THM_MOVW_ABS_NC	ServoMode 74c:	f2c0 0000 	movt	r0, #0			74c: R_ARM_THM_MOVT_ABS	ServoMode 750:	f7ff fffe 	bl	0 <main>			750: R_ARM_THM_CALL	writeAXRegister		 			 for(i=0;i<100;i++); 754:	f240 0300 	movw	r3, #0			754: R_ARM_THM_MOVW_ABS_NC	i 758:	f2c0 0300 	movt	r3, #0			758: R_ARM_THM_MOVT_ABS	i 75c:	f04f 0200 	mov.w	r2, #0 760:	601a      	str	r2, [r3, #0] 762:	e00b      	b.n	77c <main+0x77c> 764:	f240 0300 	movw	r3, #0			764: R_ARM_THM_MOVW_ABS_NC	i 768:	f2c0 0300 	movt	r3, #0			768: R_ARM_THM_MOVT_ABS	i 76c:	681b      	ldr	r3, [r3, #0] 76e:	f103 0201 	add.w	r2, r3, #1 772:	f240 0300 	movw	r3, #0			772: R_ARM_THM_MOVW_ABS_NC	i 776:	f2c0 0300 	movt	r3, #0			776: R_ARM_THM_MOVT_ABS	i 77a:	601a      	str	r2, [r3, #0] 77c:	f240 0300 	movw	r3, #0			77c: R_ARM_THM_MOVW_ABS_NC	i 780:	f2c0 0300 	movt	r3, #0			780: R_ARM_THM_MOVT_ABS	i 784:	681b      	ldr	r3, [r3, #0] 786:	2b63      	cmp	r3, #99	; 0x63 788:	ddec      	ble.n	764 <main+0x764>		 			 Servo = 0; 78a:	f240 0300 	movw	r3, #0			78a: R_ARM_THM_MOVW_ABS_NC	Servo 78e:	f2c0 0300 	movt	r3, #0			78e: R_ARM_THM_MOVT_ABS	Servo 792:	f04f 0200 	mov.w	r2, #0 796:	601a      	str	r2, [r3, #0]		 			 ServoDeg(Servo); 798:	f240 0300 	movw	r3, #0			798: R_ARM_THM_MOVW_ABS_NC	Servo 79c:	f2c0 0300 	movt	r3, #0			79c: R_ARM_THM_MOVT_ABS	Servo 7a0:	681b      	ldr	r3, [r3, #0] 7a2:	b2db      	uxtb	r3, r3 7a4:	4618      	mov	r0, r3 7a6:	f7ff fffe 	bl	0 <main>			7a6: R_ARM_THM_CALL	ServoDeg			 	 }		 	 }		 	 detectPellet(detected);		 	  		 	 if (period >= 60 && period <= 150 && Pellet_in > 1000) {		 		if(Servo == 3){ 7aa:	e124      	b.n	250 <main+0x250>		 			 for(i=0;i<100;i++);		 			 Servo = 0;		 			 ServoDeg(Servo);		 			 }		 			 else{		 			 	Servo++; 7ac:	f240 0300 	movw	r3, #0			7ac: R_ARM_THM_MOVW_ABS_NC	Servo 7b0:	f2c0 0300 	movt	r3, #0			7b0: R_ARM_THM_MOVT_ABS	Servo 7b4:	681b      	ldr	r3, [r3, #0] 7b6:	f103 0201 	add.w	r2, r3, #1 7ba:	f240 0300 	movw	r3, #0			7ba: R_ARM_THM_MOVW_ABS_NC	Servo 7be:	f2c0 0300 	movt	r3, #0			7be: R_ARM_THM_MOVT_ABS	Servo 7c2:	601a      	str	r2, [r3, #0]		 			 	ServoDeg(Servo); 7c4:	f240 0300 	movw	r3, #0			7c4: R_ARM_THM_MOVW_ABS_NC	Servo 7c8:	f2c0 0300 	movt	r3, #0			7c8: R_ARM_THM_MOVT_ABS	Servo 7cc:	681b      	ldr	r3, [r3, #0] 7ce:	b2db      	uxtb	r3, r3 7d0:	4618      	mov	r0, r3 7d2:	f7ff fffe 	bl	0 <main>			7d2: R_ARM_THM_CALL	ServoDeg		 			 	for(i=0;i<100000;i++); 7d6:	f240 0300 	movw	r3, #0			7d6: R_ARM_THM_MOVW_ABS_NC	i 7da:	f2c0 0300 	movt	r3, #0			7da: R_ARM_THM_MOVT_ABS	i 7de:	f04f 0200 	mov.w	r2, #0 7e2:	601a      	str	r2, [r3, #0] 7e4:	e00b      	b.n	7fe <main+0x7fe> 7e6:	f240 0300 	movw	r3, #0			7e6: R_ARM_THM_MOVW_ABS_NC	i 7ea:	f2c0 0300 	movt	r3, #0			7ea: R_ARM_THM_MOVT_ABS	i 7ee:	681b      	ldr	r3, [r3, #0] 7f0:	f103 0201 	add.w	r2, r3, #1 7f4:	f240 0300 	movw	r3, #0			7f4: R_ARM_THM_MOVW_ABS_NC	i 7f8:	f2c0 0300 	movt	r3, #0			7f8: R_ARM_THM_MOVT_ABS	i 7fc:	601a      	str	r2, [r3, #0] 7fe:	f240 0300 	movw	r3, #0			7fe: R_ARM_THM_MOVW_ABS_NC	i 802:	f2c0 0300 	movt	r3, #0			802: R_ARM_THM_MOVT_ABS	i 806:	681a      	ldr	r2, [r3, #0] 808:	f248 639f 	movw	r3, #34463	; 0x869f 80c:	f2c0 0301 	movt	r3, #1 810:	429a      	cmp	r2, r3 812:	dde8      	ble.n	7e6 <main+0x7e6>			 	 }		 	 }		 	 detectPellet(detected);		 	  		 	 if (period >= 60 && period <= 150 && Pellet_in > 1000) {		 		if(Servo == 3){ 814:	e0ef      	b.n	9f6 <main+0x9f6>		 			 	Servo++;		 			 	ServoDeg(Servo);		 			 	for(i=0;i<100000;i++);		 			 }		 	 	}		 	 else if (period < 60 && Pellet_in > 1000) { 816:	f240 0300 	movw	r3, #0			816: R_ARM_THM_MOVW_ABS_NC	period 81a:	f2c0 0300 	movt	r3, #0			81a: R_ARM_THM_MOVT_ABS	period 81e:	681b      	ldr	r3, [r3, #0] 820:	2b3b      	cmp	r3, #59	; 0x3b 822:	f73f ac49 	bgt.w	b8 <main+0xb8> 826:	f240 0300 	movw	r3, #0			826: R_ARM_THM_MOVW_ABS_NC	Pellet_in 82a:	f2c0 0300 	movt	r3, #0			82a: R_ARM_THM_MOVT_ABS	Pellet_in 82e:	681b      	ldr	r3, [r3, #0] 830:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8 834:	f77f ac40 	ble.w	b8 <main+0xb8>		 		 colour = 'U'; 838:	f240 0300 	movw	r3, #0			838: R_ARM_THM_MOVW_ABS_NC	colour 83c:	f2c0 0300 	movt	r3, #0			83c: R_ARM_THM_MOVT_ABS	colour 840:	f04f 0255 	mov.w	r2, #85	; 0x55 844:	701a      	strb	r2, [r3, #0]		 		if(Servo == 0){ 846:	f240 0300 	movw	r3, #0			846: R_ARM_THM_MOVW_ABS_NC	Servo 84a:	f2c0 0300 	movt	r3, #0			84a: R_ARM_THM_MOVT_ABS	Servo 84e:	681b      	ldr	r3, [r3, #0] 850:	2b00      	cmp	r3, #0 852:	f040 809a 	bne.w	98a <main+0x98a>		 			 writeAXRegister(WheelMode); 856:	f240 0000 	movw	r0, #0			856: R_ARM_THM_MOVW_ABS_NC	WheelMode 85a:	f2c0 0000 	movt	r0, #0			85a: R_ARM_THM_MOVT_ABS	WheelMode 85e:	f7ff fffe 	bl	0 <main>			85e: R_ARM_THM_CALL	writeAXRegister		 			 for(i=0;i<100;i++); 862:	f240 0300 	movw	r3, #0			862: R_ARM_THM_MOVW_ABS_NC	i 866:	f2c0 0300 	movt	r3, #0			866: R_ARM_THM_MOVT_ABS	i 86a:	f04f 0200 	mov.w	r2, #0 86e:	601a      	str	r2, [r3, #0] 870:	e00b      	b.n	88a <main+0x88a> 872:	f240 0300 	movw	r3, #0			872: R_ARM_THM_MOVW_ABS_NC	i 876:	f2c0 0300 	movt	r3, #0			876: R_ARM_THM_MOVT_ABS	i 87a:	681b      	ldr	r3, [r3, #0] 87c:	f103 0201 	add.w	r2, r3, #1 880:	f240 0300 	movw	r3, #0			880: R_ARM_THM_MOVW_ABS_NC	i 884:	f2c0 0300 	movt	r3, #0			884: R_ARM_THM_MOVT_ABS	i 888:	601a      	str	r2, [r3, #0] 88a:	f240 0300 	movw	r3, #0			88a: R_ARM_THM_MOVW_ABS_NC	i 88e:	f2c0 0300 	movt	r3, #0			88e: R_ARM_THM_MOVT_ABS	i 892:	681b      	ldr	r3, [r3, #0] 894:	2b63      	cmp	r3, #99	; 0x63 896:	ddec      	ble.n	872 <main+0x872>		 			 writeAXRegister(MoveCW); 898:	f240 0000 	movw	r0, #0			898: R_ARM_THM_MOVW_ABS_NC	MoveCW 89c:	f2c0 0000 	movt	r0, #0			89c: R_ARM_THM_MOVT_ABS	MoveCW 8a0:	f7ff fffe 	bl	0 <main>			8a0: R_ARM_THM_CALL	writeAXRegister		 			 for(i=0;i<75000;i++); 8a4:	f240 0300 	movw	r3, #0			8a4: R_ARM_THM_MOVW_ABS_NC	i 8a8:	f2c0 0300 	movt	r3, #0			8a8: R_ARM_THM_MOVT_ABS	i 8ac:	f04f 0200 	mov.w	r2, #0 8b0:	601a      	str	r2, [r3, #0] 8b2:	e00b      	b.n	8cc <main+0x8cc> 8b4:	f240 0300 	movw	r3, #0			8b4: R_ARM_THM_MOVW_ABS_NC	i 8b8:	f2c0 0300 	movt	r3, #0			8b8: R_ARM_THM_MOVT_ABS	i 8bc:	681b      	ldr	r3, [r3, #0] 8be:	f103 0201 	add.w	r2, r3, #1 8c2:	f240 0300 	movw	r3, #0			8c2: R_ARM_THM_MOVW_ABS_NC	i 8c6:	f2c0 0300 	movt	r3, #0			8c6: R_ARM_THM_MOVT_ABS	i 8ca:	601a      	str	r2, [r3, #0] 8cc:	f240 0300 	movw	r3, #0			8cc: R_ARM_THM_MOVW_ABS_NC	i 8d0:	f2c0 0300 	movt	r3, #0			8d0: R_ARM_THM_MOVT_ABS	i 8d4:	681a      	ldr	r2, [r3, #0] 8d6:	f242 43f7 	movw	r3, #9463	; 0x24f7 8da:	f2c0 0301 	movt	r3, #1 8de:	429a      	cmp	r2, r3 8e0:	dde8      	ble.n	8b4 <main+0x8b4>		 			 writeAXRegister(StopMoving); 8e2:	f240 0000 	movw	r0, #0			8e2: R_ARM_THM_MOVW_ABS_NC	StopMoving 8e6:	f2c0 0000 	movt	r0, #0			8e6: R_ARM_THM_MOVT_ABS	StopMoving 8ea:	f7ff fffe 	bl	0 <main>			8ea: R_ARM_THM_CALL	writeAXRegister		 			 for(i=0;i<100;i++); 8ee:	f240 0300 	movw	r3, #0			8ee: R_ARM_THM_MOVW_ABS_NC	i 8f2:	f2c0 0300 	movt	r3, #0			8f2: R_ARM_THM_MOVT_ABS	i 8f6:	f04f 0200 	mov.w	r2, #0 8fa:	601a      	str	r2, [r3, #0] 8fc:	e00b      	b.n	916 <main+0x916> 8fe:	f240 0300 	movw	r3, #0			8fe: R_ARM_THM_MOVW_ABS_NC	i 902:	f2c0 0300 	movt	r3, #0			902: R_ARM_THM_MOVT_ABS	i 906:	681b      	ldr	r3, [r3, #0] 908:	f103 0201 	add.w	r2, r3, #1 90c:	f240 0300 	movw	r3, #0			90c: R_ARM_THM_MOVW_ABS_NC	i 910:	f2c0 0300 	movt	r3, #0			910: R_ARM_THM_MOVT_ABS	i 914:	601a      	str	r2, [r3, #0] 916:	f240 0300 	movw	r3, #0			916: R_ARM_THM_MOVW_ABS_NC	i 91a:	f2c0 0300 	movt	r3, #0			91a: R_ARM_THM_MOVT_ABS	i 91e:	681b      	ldr	r3, [r3, #0] 920:	2b63      	cmp	r3, #99	; 0x63 922:	ddec      	ble.n	8fe <main+0x8fe>		 			 writeAXRegister(ServoMode); 924:	f240 0000 	movw	r0, #0			924: R_ARM_THM_MOVW_ABS_NC	ServoMode 928:	f2c0 0000 	movt	r0, #0			928: R_ARM_THM_MOVT_ABS	ServoMode 92c:	f7ff fffe 	bl	0 <main>			92c: R_ARM_THM_CALL	writeAXRegister		 			 for(i=0;i<100;i++); 930:	f240 0300 	movw	r3, #0			930: R_ARM_THM_MOVW_ABS_NC	i 934:	f2c0 0300 	movt	r3, #0			934: R_ARM_THM_MOVT_ABS	i 938:	f04f 0200 	mov.w	r2, #0 93c:	601a      	str	r2, [r3, #0] 93e:	e00b      	b.n	958 <main+0x958> 940:	f240 0300 	movw	r3, #0			940: R_ARM_THM_MOVW_ABS_NC	i 944:	f2c0 0300 	movt	r3, #0			944: R_ARM_THM_MOVT_ABS	i 948:	681b      	ldr	r3, [r3, #0] 94a:	f103 0201 	add.w	r2, r3, #1 94e:	f240 0300 	movw	r3, #0			94e: R_ARM_THM_MOVW_ABS_NC	i 952:	f2c0 0300 	movt	r3, #0			952: R_ARM_THM_MOVT_ABS	i 956:	601a      	str	r2, [r3, #0] 958:	f240 0300 	movw	r3, #0			958: R_ARM_THM_MOVW_ABS_NC	i 95c:	f2c0 0300 	movt	r3, #0			95c: R_ARM_THM_MOVT_ABS	i 960:	681b      	ldr	r3, [r3, #0] 962:	2b63      	cmp	r3, #99	; 0x63 964:	ddec      	ble.n	940 <main+0x940>		 			 Servo = 3; 966:	f240 0300 	movw	r3, #0			966: R_ARM_THM_MOVW_ABS_NC	Servo 96a:	f2c0 0300 	movt	r3, #0			96a: R_ARM_THM_MOVT_ABS	Servo 96e:	f04f 0203 	mov.w	r2, #3 972:	601a      	str	r2, [r3, #0]		 			 ServoDeg(Servo); 974:	f240 0300 	movw	r3, #0			974: R_ARM_THM_MOVW_ABS_NC	Servo 978:	f2c0 0300 	movt	r3, #0			978: R_ARM_THM_MOVT_ABS	Servo 97c:	681b      	ldr	r3, [r3, #0] 97e:	b2db      	uxtb	r3, r3 980:	4618      	mov	r0, r3 982:	f7ff fffe 	bl	0 <main>			982: R_ARM_THM_CALL	ServoDeg		 			 ServoDeg(Servo);		 			 for(i=0;i<100000;i++);		 	  }		 }	} 986:	f7ff bb97 	b.w	b8 <main+0xb8>		 			 for(i=0;i<100;i++);		 			 Servo = 3;		 			 ServoDeg(Servo);		 		}		 		else{		 			 Servo--; 98a:	f240 0300 	movw	r3, #0			98a: R_ARM_THM_MOVW_ABS_NC	Servo 98e:	f2c0 0300 	movt	r3, #0			98e: R_ARM_THM_MOVT_ABS	Servo 992:	681b      	ldr	r3, [r3, #0] 994:	f103 32ff 	add.w	r2, r3, #4294967295 998:	f240 0300 	movw	r3, #0			998: R_ARM_THM_MOVW_ABS_NC	Servo 99c:	f2c0 0300 	movt	r3, #0			99c: R_ARM_THM_MOVT_ABS	Servo 9a0:	601a      	str	r2, [r3, #0]		 			 ServoDeg(Servo); 9a2:	f240 0300 	movw	r3, #0			9a2: R_ARM_THM_MOVW_ABS_NC	Servo 9a6:	f2c0 0300 	movt	r3, #0			9a6: R_ARM_THM_MOVT_ABS	Servo 9aa:	681b      	ldr	r3, [r3, #0] 9ac:	b2db      	uxtb	r3, r3 9ae:	4618      	mov	r0, r3 9b0:	f7ff fffe 	bl	0 <main>			9b0: R_ARM_THM_CALL	ServoDeg		 			 for(i=0;i<100000;i++); 9b4:	f240 0300 	movw	r3, #0			9b4: R_ARM_THM_MOVW_ABS_NC	i 9b8:	f2c0 0300 	movt	r3, #0			9b8: R_ARM_THM_MOVT_ABS	i 9bc:	f04f 0200 	mov.w	r2, #0 9c0:	601a      	str	r2, [r3, #0] 9c2:	e00b      	b.n	9dc <main+0x9dc> 9c4:	f240 0300 	movw	r3, #0			9c4: R_ARM_THM_MOVW_ABS_NC	i 9c8:	f2c0 0300 	movt	r3, #0			9c8: R_ARM_THM_MOVT_ABS	i 9cc:	681b      	ldr	r3, [r3, #0] 9ce:	f103 0201 	add.w	r2, r3, #1 9d2:	f240 0300 	movw	r3, #0			9d2: R_ARM_THM_MOVW_ABS_NC	i 9d6:	f2c0 0300 	movt	r3, #0			9d6: R_ARM_THM_MOVT_ABS	i 9da:	601a      	str	r2, [r3, #0] 9dc:	f240 0300 	movw	r3, #0			9dc: R_ARM_THM_MOVW_ABS_NC	i 9e0:	f2c0 0300 	movt	r3, #0			9e0: R_ARM_THM_MOVT_ABS	i 9e4:	681a      	ldr	r2, [r3, #0] 9e6:	f248 639f 	movw	r3, #34463	; 0x869f 9ea:	f2c0 0301 	movt	r3, #1 9ee:	429a      	cmp	r2, r3 9f0:	dde8      	ble.n	9c4 <main+0x9c4>		 	  }		 }	} 9f2:	f7ff bb61 	b.w	b8 <main+0xb8> 9f6:	f7ff bb5f 	b.w	b8 <main+0xb8> 9fa:	bf00      	nop